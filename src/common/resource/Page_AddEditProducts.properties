pageName				=PageAddEditProducts
containerWindowName		=MainWindow

pageMessageLocator		=

fieldDependencies		=prodType##licenseType

productLineKeyword		=TEXT##//td[label[normalize-space(text())='Product Line Keyword']]/input[contains(@id,'ProductLine')]
solutionDivision		=PICKLIST##//td[label[normalize-space(text())='Solution Division']]/select[contains(@id,'SolutionDiv')]
searchButton			=BUTTON##//input[contains(@name, 'goSearch')]

#saveButton and cancelButton are defined in common/resource/Page_Common.properties
multiLineItemsButton	=BUTTON##//input[normalize-space(@class)='btn' and normalize-space(@value)='Multi Line Items']
saveAndMoreButton		=BUTTON##//input[normalize-space(@class)='btn' and normalize-space(@value)='Save & More']

productLineCheckBox		=CHECKBOX##//*[normalize-space(text())='Product Line']/ancestor::th[1]/preceding-sibling::th[1]//input[normalize-space(@type)='checkbox']

#We are using a generic set of fields with a token to identify the product line, which
#  requires custom populate methods.  The reasons are:
#    - we don't want to have to duplicate the set of product fields for every possible
#      product, because of the possible maintenance requirements when the objects or
#      product names change in the GUI
#    - it makes custom methods like Oppty.addProduct(s) and Oppty.editProduct(s)
#      simpler to implement

#We need to specify td[1] on the product line check boxes because we are not able to identify them using an attribute, as we do for the other fields by using @id.
#  For example:
#    aecADSKConsultingSvcs=CHECKBOX##//td[normalize-space(text())='token1']/preceding-sibling::td[1]//input[normalize-space(@type)='checkbox']

#Note that we are able to use this metadata file for editing as well as selecting.  The required locators differ slightly, though: the column containing the
#  product line name is rendered differently in the two pages.  Note that this does not apply to the product line check box field, as it does not appear on
#  the Edit Products page.  Also, the ...TotalPrice field's id attribute differs between the two pages.
#  For example, prodLine is rendered this way on the pages in the GUI:
#    Product Selection page:
#      	//td[normalize-space(text())='TOKEN1']
#    Edit Products page:
#       //td[span[normalize-space(text())='TOKEN1']]
#  Using this locator, we can find it on both pages:
#       //td/descendant-or-self::*[normalize-space(text())='TOKEN1']
#  We need to reference the product line column in all other locators, because that is how we find the correct product row.  However, because the product line
#    value is sometimes in a td (Product Selection page) and sometimes in a td/span (Edit Products page), we need to be flexible when determining its ancestor,
#    which we use as the context node for finding the rest of the columns.  Hence the ancestor-or-self construction.  (Alternatively, we could define
#    separate locators for the two pages, but where's the fun in that?)

#Note that we have a special use for the prodLine field!  It is used in the test properties file to specify the name of the product
#  to select or edit.  See Oppty.addProduct(s) and Oppty.editProduct(s) for details

prodCheckBox	=CHECKBOX##//td[normalize-space(text())='TOKEN1']/preceding-sibling::td[1]//input[normalize-space(@type)='checkbox']
prodLine		=READ_ONLY##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']
prodType		=PICKLIST##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']/ancestor-or-self::td/following-sibling::td//select[contains(@id,'ProductTypeList')]
licenseType		=PICKLIST##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']/ancestor-or-self::td/following-sibling::td//select[contains(@id,'LicenseTypeList')]
estSeats		=TEXT##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']/ancestor-or-self::td/following-sibling::td//input[contains(@id,'seatCount')]
salesPrice		=TEXT##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']/ancestor-or-self::td/following-sibling::td//input[contains(@id,'seatUnitPrice')]
totalPrice		=READ_ONLY##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']/ancestor-or-self::td/following-sibling::td//input[contains(@id,'seatTotalPrice') or contains(@id,'seatonloadtotal')]
billingDate		=DATE##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']/ancestor-or-self::td/following-sibling::td//input[contains(@onfocus,'pickDate')]
comments		=TEXT##//td/descendant-or-self::*[normalize-space(text())='TOKEN1']/ancestor-or-self::td/following-sibling::td//textarea[contains(@id,'prodDesc')]
