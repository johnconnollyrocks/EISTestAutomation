package scat;//import scat.SCATConstants;import common.EISConstants;import common.EISTestBase;import common.Page_;import common.Util;/** * Representation of features and functionality specific to the SCAT * application. *  * @author Nithya Somasundaram * @version 1.0.0 */public class SCATTestBase extends EISTestBase {	private static final String APP_NAME = "scat";	private static final String APP_BASE_DIR = "scat";	public static Page_ loginPage = null;	public static Page_ homePage = null;	public static Page_ createSubCntrAdminHomePage = null;	public static Page_ createSubCntrSecGatewayAdminPage = null;	// TODO We need to figure out what is an auto user, do they use users on the	// setup page,	// do they log in as an auto user and then as a partner user, etc.	private String scatUser = "";	private static String currentUser = "";	// Define only SCAT-specific windows. SFDC-scope windows (such as	// mainWindow) are static	// objects in the EISTestBase class	// Define SCAT-specific Page objects that have no associated test	// properties. The pages	// defined here are those that:	// will never be referenced in a test properties file, AND	// contain SCAT-specific GUI elements	// Note that if a test DOES need to specify test properties for one of these	// pages	// (e.g., search terms), it can create its own local version of the page,	// and pass	// the pagePropertiesFilenameKey argument	/**	 * Default constructor. It calls the superclass constructor, passing the	 * application's name and directory in the framework's source code	 * hierarchy.	 * @param string2 	 * @param string 	 */	SCATTestBase(String browser, String APP_BROWSER) {		// TODO Change to get APP_BASE_DIR from properties? (currently passed in		// as JVM arg)		super(APP_NAME, APP_BASE_DIR, browser, APP_BROWSER);		setup();	}	/**	 * Gets the Major Accounts user name. (NOTE that it is not yet clear what	 * constitutes an SCAT user, a partner user, an admin user, etc.)	 * 	 * @return The Major Accounts user name	 */	final String getSCATUser() {		return scatUser;	}	@Override	public String toString() {		return getAppName() + " [" + "super=             " + super.toString()				+ ", scatUser=     " + scatUser + "]";	}	/**	 * Configures high-level SCAT-specific objects.	 * 	 * @see #doSetup()	 */	@Override	protected final void setup() {		super.setup();		doSetup();	}	/**	 * Configures high-level SCAT-specific objects&#58;<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates SCAT-specific Page objects<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates SCAT-specific Window objects	 * 	 * @see #createAppWindows()	 * @see #createAppPages()	 */	private final void doSetup() {    	setEnvironmentVariables();    			createAppWindows();		createPages();		// MUST be called after super.setup!!!		// NOTE that SCATUser is the equivalent of a user that is found in the		// setup screen.		// The user that logs in to the app is known as the auto user. Until we		// figure out		// whether that model applies, don't call this.		// setSCATUser();	}	/**	 * Instantiates SCAT-specific Window objects.	 */	@Override	protected final void createAppWindows() {		// Instantiate only SCAT-specific windows. SFDC-scope windows (such as		// mainWindow) are static		// objects in the EISTestBase class	}	/**	 * Instantiates SCAT-specific Page objects.	 */	private final void createAppPages() {		// Instantiate Page objects that have no associated test properties		// Note that if a test DOES need to specify test properties for one of		// these pages		// (e.g., search terms), it can create its own local version of the		// page, and pass		// the pagePropertiesFilenameKey argument, OR create it here, by calling		// createPage		// instead of createStaticPage		// Can also instantiate regular (i.e., with associated test properties)		// SCAT-specific		// Page objects here, but typically it is best for the test or utility		// methods to do that;		// if we do it here we may end up creating Page objects that never get		// used.	}	private final void createPages() {		// Instantiate pages that are not specific to a particular app. The		// pages instantiated		// here are those that will never be referenced in a test properties		// file		// NOTE that it is not totally clear at this point (Oct 2010) which		// windows and pages		// are app-specific and which are not		//		// The lookup page will be referenced in Page.doPopulate when a field of		// type LOOKUP is		// referenced in a test properties file		loginPage = createPage(testProperties, "PAGE_LOGIN_PROPERTIES_FILE",600);		homePage = createPage(testProperties, "PAGE_HOME_PROPERTIES_FILE", 600);				createSubCntrAdminHomePage = createPage(testProperties, "PAGE_SUBCNTR_ADMIN_HOME_PROPERTIES_FILE", 600);		createSubCntrSecGatewayAdminPage = createPage(testProperties, "PAGE_SUBCNTR_SEC_GTWY_ADMIN_PROPERTIES_FILE", 600);	}	protected final void launchSCAT(String url) {		// Assumes a browser window is already open		open(url);		// Deal with possible certificate error by clicking (occurs often after		// we open a partner portal)		// We can't do it using normal WebDriver calls, because WebDriver just		// cannot see the link!		// NOTE that the AutoIT process we use to do this will sometimes open a		// new browser. I don't		// know why, but I have observed that it occurs only in the cases where		// we don't encounter		// the certificate error. So we sill attempt to determine whether the		// certificate error is		// present by looking for the login button.		createPages();			// Will have to do this every time we open a new window or pop-up,		// because the locators are generated on the fly in WebDriver		mainWindow.setLocator(driver.getWindowHandle());		// Save the URL used to launch Salesforce, as sometimes the user wants		// to use it as a base for		// navigating to another URL, perhaps one that refers to an object ID		windowMaximize();	}	/**	 * Logs in as the Major Accounts user (default is	 * SCATConstants.DEFAULT_SCAT_USER). (NOTE that it is not yet clear what	 * constitutes an SCAT user, a partner user, an admin user, etc.)	 * 	 * @return The SCAT user name	 * @see #setSCATUser()	 */	final String loginAsSCATUser() {		return loginAsSCATUser(false);	}	/**	 * Logs in as the automation user, optionally launching scat (default user	 * is SCATConstants.AUTO_USERNAME).	 * 	 * @param launch	 *            the setting that determines whether to launch scat before	 *            logging in	 * @return The automation user name	 */	final String loginAsSCATUser(boolean launch) {		String currentUser = login(SCATConstants.AUTO_USERNAME,				SCATConstants.AUTO_PASSWORD, launch, SCATConstants.BASE_URL);		setCurrentUser(currentUser);		return currentUser;	}	/**	 * Logs in to the application.	 * 	 * @param userName	 *            the user name to use when logging in	 * @param password	 *            the password to use when logging in	 * @param launch	 *            whether to launch SCAT first	 * @param password	 *            the URL to be used in case of launching	 * @return The current logged-in user	 * @see #launchSCAT()	 */	protected String login(String userName, String password, boolean launch,			String url) {		if (launch) {			launchSCAT(url);		}		mainWindow.select();		loginPage.populateField("userName", userName);		loginPage.populateField("password", password);		loginPage.clickToSubmit("loginButton");		handleServerMaintenanceNotification();		// Deal with possible pop-ups, such as Reminders		Util.sleep(50);		if (loginPage.closeAllPopUps(mainWindow.getLocator())) {			disableReminders();		}		mainWindow.select();		currentUser = userName;		return currentUser;	}	/**	 * Logs out the SCAT user. (NOTE that it is not yet clear what	 * constitutes an SCAT user, a partner user, an admin user, etc.)	 * 	 * @return The current user after the SCAT user has logged out	 * @see #setSCATUser()	 */	final String logoutAsSCATUser() {		if (getCurrentUser().isEmpty()) {			Util.printInfo("While attempting to log out the SCAT user, found that an SCAT user was not logged in");		} else {			String currentUserSave = getCurrentUser();			mainWindow.select();			homePage.click("logoutLink");			Util.printInfo("Logged out the SCAT user '" + currentUserSave					+ "' (now logged in as '" + getCurrentUser() + "')");		}		return getCurrentUser();	}	/**	 * Selects the default SCAT app from app chooser.	 */	@Override	protected final void chooseApp() {	}    protected final void setEnvironmentVariables() {/*    	switch (getEnvironment().trim().toUpperCase()) {			case "DEV":	{				if (!DDConstants.BASE_URL_DEV.isEmpty()) {					setBaseURL(DDConstants.BASE_URL_DEV);				}								setBasePartnerURL(DDConstants.BASE_PARTNER_URL_DEV);								setAutoUserName(DDConstants.AUTO_USERNAME_DEV);				setAutoPassword(DDConstants.AUTO_PASSWORD_DEV);								setPartnerUserName(DDConstants.PARTNER_USERNAME_DEV);				setPartnerPassword(DDConstants.PARTNER_PASSWORD_DEV);								break;			}			case "STG":			default:	{				if (!DDConstants.BASE_URL_STG.isEmpty()) {					setBaseURL(DDConstants.BASE_URL_STG);				}								setBasePartnerURL(DDConstants.BASE_PARTNER_URL_STG);								setAutoUserName(DDConstants.AUTO_USERNAME_STG);				setAutoPassword(DDConstants.AUTO_PASSWORD_STG);								setPartnerUserName(DDConstants.PARTNER_USERNAME_STG);				setPartnerPassword(DDConstants.PARTNER_PASSWORD_STG);			}     	}*/        }    }