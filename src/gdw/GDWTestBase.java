package gdw;import common.EISTestBase;/** * Representation of features and functionality specific to the GDW application. *  * @author Jeffrey Blaze * @version 1.0.0 */public class GDWTestBase extends EISTestBase {	private static final String APP_NAME		= "Global Data Warehouse";	private static final String APP_BASE_DIR	= "gdw";    //TODO  We need to figure out what is an auto user, do they use users on the setup page,    //  do they log in as an auto user and then as a partner user, etc.	private String gdwUser = "";		//Define only GDW-specific windows.  SFDC-scope windows (such as mainWindow) are static	//  objects in the EISTestBase class		//Define GDW-specific Page objects that have no associated test properties. The pages	//  defined here are those that:	//    will never be referenced in a test properties file, AND	//    contain GDW-specific GUI elements	//Note that if a test DOES need to specify test properties for one of these pages	//  (e.g., search terms), it can create its own local version of the page, and pass	//  the pagePropertiesFilenameKey argument	/**	 * Default constructor.  It calls the superclass constructor, passing the application's name and directory in the framework's source code hierarchy.	 */	GDWTestBase() {		//TODO  Change to get APP_BASE_DIR from properties? (currently passed in as JVM arg)	    super(APP_NAME, APP_BASE_DIR);	    setup();    }	/**	 * Gets the GDW user name. (NOTE that it is not yet clear what constitutes a GDW user,	 * a partner user, an admin user, etc.)	 * @return The GDW user name	 */    final String getGDWUser() {		return gdwUser;	}	@Override	public String toString() {		return getAppName() + " ["				+ "super=             " + super.toString() 				+ ", gdwUser=     " + gdwUser				+ "]";	}    	/**	 * Configures high-level GDW-specific objects.	 * @see #doSetup()	 */    @Override	protected final void setup() {    	super.setup();    	doSetup();    }    /**	 * Configures high-level GDW-specific objects&#58;<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates GDW-specific Page objects<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates GDW-specific Window objects	 * @see #createAppWindows()	 * @see #createAppPages()	 */    private final void doSetup() {    	setEnvironmentVariables();    	    	createAppWindows();    	    	createAppPages();    	//MUST be called after super.setup!!!    	//NOTE that GDWUser is the equivalent of a user that is found in the setup screen.    	//    The user that logs in to the app is known as the auto user.  Until we figure out    	//    whether that model applies, don't call this.    	//setGDWUser();    }    	/**	 * Instantiates GDW-specific Window objects.	 */    @Override	protected final void createAppWindows() {    	//Instantiate only GDW-specific windows.  SFDC-scope windows (such as mainWindow) are static    	//  objects in the EISTestBase class    }	/**	 * Instantiates GDW-specific Page objects.	 */	private final void createAppPages() {		//Instantiate Page objects that have no associated test properties		//Note that if a test DOES need to specify test properties for one of these pages		//  (e.g., search terms), it can create its own local version of the page, and pass		//  the pagePropertiesFilenameKey argument, OR create it here, by calling createPage		//  instead of createStaticPage		//Can also instantiate regular (i.e., with associated test properties) GDW-specific		//  Page objects here, but typically it is best for the test or utility methods to do that;		//  if we do it here we may end up creating Page objects that never get used.    }    	    /**	 * Logs in as the automation user, optionally launching Salesforce (default user is GDWConstants.AUTO_USERNAME).	 * @param launch the setting that determines whether to launch Salesforce before logging in	 * @return The automation user name	 */    @Override    protected final String loginAsAutoUser(boolean launch) {    	//login(GDWConstants.AUTO_USERNAME, GDWConstants.AUTO_PASSWORD, launch);    	super.login(getAutoUserName(), getAutoPassword(), launch);    	     	chooseApp();		    	return getCurrentUser();    }    	/**	 * Logs in as the automation user, without launching Salesforce.	 * @return The automation user name	 */    final String loginAsAutoUser() {    	return loginAsAutoUser(false);    }	/**	 * Selects the default GDW app from the SFDC app chooser.	 */    @Override    protected final void chooseApp() {    	chooseApp(GDWConstants.DEFAULT_GDW_APP);    }    protected final void setEnvironmentVariables() {    	switch (getEnvironment().trim().toUpperCase()) {			case "DEV":	{				if (!GDWConstants.BASE_URL_DEV.isEmpty()) {					setBaseURL(GDWConstants.BASE_URL_DEV);				}								setAutoUserName(GDWConstants.AUTO_USERNAME_DEV);				setAutoPassword(GDWConstants.AUTO_PASSWORD_DEV);								break;			}			case "STG":			default:	{				if (!GDWConstants.BASE_URL_STG.isEmpty()) {					setBaseURL(GDWConstants.BASE_URL_STG);				}								setAutoUserName(GDWConstants.AUTO_USERNAME_STG);				setAutoPassword(GDWConstants.AUTO_PASSWORD_STG);			}     	}    }}