package lm;import lm.LMConstants;import lm.LMConstants.CreateFrom;import common.EISTestBase;import common.Page_;import common.TestProperties;import common.Util;/** * Representation of features and functionality specific to the Lead Management application. *  * @author Jeffrey Blaze * @version 1.0.0 */public class LMTestBase extends EISTestBase {	private static final String APP_NAME		= "Lead Management";	private static final String APP_BASE_DIR	= "lm";    //TODO  We need to figure out what is an auto user, do they use users on the setup page,    //  do they log in as an auto user and then as a partner user, etc.	private String lmUser = "";		//Define only LM-specific windows.  SFDC-scope windows (such as mainWindow) are static	//  objects in the EISTestBase class		//Define LM-specific Page objects that have no associated test properties. The pages	//  defined here are those that:	//    will never be referenced in a test properties file, AND	//    contain LM-specific GUI elements	//Note that if a test DOES need to specify test properties for one of these pages	//  (e.g., search terms), it can create its own local version of the page, and pass	//  the pagePropertiesFilenameKey argument	/**	 * Default constructor.  It calls the superclass constructor, passing the application's name and directory in the framework's source code hierarchy.	 */	LMTestBase(String launchDriver) {		//TODO  Change to get APP_BASE_DIR from properties? (currently passed in as JVM arg)		 super(APP_NAME, APP_BASE_DIR,launchDriver);	    setup();    }	LMTestBase() {		//TODO  Change to get APP_BASE_DIR from properties? (currently passed in as JVM arg)		super(APP_NAME, APP_BASE_DIR);	    setup();    }	/**	 * Gets the Lead Management user name. (NOTE that it is not yet clear what constitutes an LM user,	 * a partner user, an admin user, etc.)	 * @return The Lead Management user name	 */    final String getLMUser() {		return lmUser;	}	@Override	public String toString() {		return getAppName() + " ["				+ "super=             " + super.toString() 				+ ", lmUser=      " + lmUser				+ "]";	}    	/**	 * Configures high-level LM-specific objects.	 * @see #doSetup()	 */    @Override	protected final void setup() {    	super.setup();    	doSetup();    }    /**	 * Configures high-level LM-specific objects&#58;<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates LM-specific Page objects<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates LM-specific Window objects	 * @see #createAppWindows()	 * @see #createAppPages()	 */    private final void doSetup() {    	setEnvironmentVariables();    	    	createAppWindows();    	    	createAppPages();    	//MUST be called after super.setup!!!    	//NOTE that LMUser is the equivalent of a user that is found in the setup screen.    	//    The user that logs in to the app is known as the auto user.  Until we figure out    	//    whether that model applies, don't call this.    	//setLMUser();    }    	/**	 * Instantiates LM-specific Window objects.	 */    @Override	protected final void createAppWindows() {    	//Instantiate only LM-specific windows.  SFDC-scope windows (such as mainWindow) are static    	//  objects in the EISTestBase class    }	/**	 * Instantiates LM-specific Page objects.	 */	private final void createAppPages() {		//Instantiate Page objects that have no associated test properties		//Note that if a test DOES need to specify test properties for one of these pages		//  (e.g., search terms), it can create its own local version of the page, and pass		//  the pagePropertiesFilenameKey argument, OR create it here, by calling createPage		//  instead of createStaticPage		//Can also instantiate regular (i.e., with associated test properties) LM-specific		//  Page objects here, but typically it is best for the test or utility methods to do that;		//  if we do it here we may end up creating Page objects that never get used.    }	final Lead utilCreateLead(CreateFrom createFrom, TestProperties utilProperties) {    	Lead lead = utilCreateLeadObject(createFrom, utilProperties);    	lead.create(createFrom);    	       	return lead;    }		final Lead utilCreateLead(CreateFrom createFrom, String utilPropertiesFilenameKey) {    	TestProperties utilProperties = new TestProperties(getTestPropertiesFilename(utilPropertiesFilenameKey), getTestDataDir(), getTestManifest());       	return utilCreateLead(createFrom, utilProperties);    }		final Lead utilCreateLead(CreateFrom createFrom) {		return utilCreateLead(createFrom, testProperties);      		}			final Lead utilCreateLead() {       	return utilCreateLead(CreateFrom.SFDC, testProperties);    }	/**	 * Instantiates a Lead object, using data in the specified TestProperties object.  Does not execute the workflow	 * to create an SFDC Lead.	 * @param utilProperties a TestProperties object containing data necessary to create a Lead object	 * @return A Lead object	 *//*	final Lead utilCreateLeadObject(TestProperties utilProperties) {		Page_ createLeadRTPage	= createCommonPageInstance(utilProperties, "PAGE_COMMON_RECORD_TYPE_PROPERTIES_FILE");		Page_ createLeadPage	= createPage(utilProperties, "PAGE_CREATE_LEAD_PROPERTIES_FILE");      	Page_ viewLeadPage		= createPage(utilProperties, "PAGE_VIEW_LEAD_PROPERTIES_FILE");       	Lead lead = new Lead(createLeadRTPage,createLeadPage, viewLeadPage);     	return lead;    }*/	final Lead utilCreateLeadObject(CreateFrom createFrom, TestProperties utilProperties) {		Lead lead = null;				Page_ portalLandingPage 	= createCommonPage("PAGE_PORTAL_LANDING_PAGE_PROPERTIES_FILE");		Page_ viewLeadInPortalPage	= createPage(utilProperties, "PAGE_VIEW_LEAD_IN_PORTAL_PROPERTIES_FILE");		if (createFrom.equals(CreateFrom.SFDC)) {			Page_ createLeadRTPage	= createCommonPageInstance(utilProperties, "PAGE_COMMON_RECORD_TYPE_PROPERTIES_FILE");			Page_ createLeadPage	= createPage(utilProperties, "PAGE_CREATE_LEAD_PROPERTIES_FILE");	      	Page_ viewLeadPage		= createPage(utilProperties, "PAGE_VIEW_LEAD_PROPERTIES_FILE");	      				lead = new Lead(createLeadRTPage, createLeadPage, viewLeadPage, viewLeadInPortalPage, portalLandingPage);      	} 		else 			if (createFrom.equals(CreateFrom.BATCH_UPLOAD) || createFrom.equals(CreateFrom.PLOCATOR)) {				Page_ createLeadPage	= createPage(utilProperties, "PAGE_CREATE_LEAD_PROPERTIES_FILE");		      	Page_ viewLeadPage		= createPage(utilProperties, "PAGE_VIEW_LEAD_PROPERTIES_FILE");		      					lead = new Lead(createLeadPage, viewLeadPage, viewLeadInPortalPage, portalLandingPage);	      	} 		else {      		Page_ createLeadPage	= createPage(utilProperties, "PAGE_CREATE_LEAD_IN_PORTAL_PROPERTIES_FILE");            lead = new Lead(createLeadPage, viewLeadInPortalPage, portalLandingPage);      	}      	return lead;    }		/**	 * Instantiates a Lead object, using data in the specified TestProperties object.  Does not execute the workflow	 * to create an SFDC Lead.	 * @param utilPropertiesFilenameKey the key used for looking up the test properties file in the test manifest	 * @return A Lead object	 *//*    final Lead utilCreateLeadObject(String utilPropertiesFilenameKey) {    	TestProperties utilProperties = new TestProperties(getTestPropertiesFilename(utilPropertiesFilenameKey), getTestDataDir(), getTestManifest());		return utilCreateLeadObject(utilProperties);    }*/    	/**	 * Instantiates a Lead object, using data in the default TestProperties object.  Does not execute the workflow	 * to create an SFDC Lead.	 * @return A Lead object	 *//*    final Lead utilCreateLeadObject() {		return utilCreateLeadObject(testProperties);    }*/        final Lead utilCreateLeadObject(CreateFrom createFrom, String utilPropertiesFilenameKey) {    	TestProperties utilProperties = new TestProperties(getTestPropertiesFilename(utilPropertiesFilenameKey), getTestDataDir(), getTestManifest());    	return utilCreateLeadObject(createFrom, utilProperties);    }        /**	 * Logs in as the automation user, optionally launching Salesforce (default user is LMConstants.AUTO_USERNAME).	 * @param launch the setting that determines whether to launch Salesforce before logging in	 * @return The automation user name	 */    @Override    protected final String loginAsAutoUser(boolean launch) {    	//login(LMConstants.AUTO_USERNAME, LMConstants.AUTO_PASSWORD, launch);    	super.login(getAutoUserName(), getAutoPassword(), launch);    	     	chooseApp();		    	return getCurrentUser();    }    	/**	 * Logs in as the automation user, without launching Salesforce.	 * @return The automation user name	 */    final String loginAsAutoUser() {    	return loginAsAutoUser(false);    }    protected void loginAsLMPartnerUser(String userName, String password, boolean launch) {		Page_ portalLandingPage = createCommonPage("PAGE_PORTAL_LANDING_PAGE_PROPERTIES_FILE");		if (launch) {    		launchSalesforce();    	}    	    	mainWindow.select();    	    	loginPage.populateField("username", userName);    	loginPage.populateField("password", password);     	loginPage.click("loginButton");     	portalLandingPage.waitForFieldPresent("privacyPolicy");     	     	handleServerMaintenanceNotification();    	     	//Deal with possible pop-ups, such as Reminders     	Util.sleep(2000);     	if (loginPage.closeAllPopUps(mainWindow.getLocator())) {        	disableReminders();     	}    	mainWindow.select();    	    	Util.printInfo("Logged in as the partner user '" + userName + "'");    }    protected void loginAsLMPartnerUser(String userName, String password) {    	loginAsLMPartnerUser(userName, password, false);    }       protected void loginAsLMPartnerUser(boolean launch) {    	loginAsLMPartnerUser(getPartnerUserName(), getPartnerPassword(), launch);    }        protected void loginAsLMPartnerUser() {    	loginAsLMPartnerUser(getPartnerUserName(), getPartnerPassword(), false);    }   	/**	 * Logs out the ePartner user.	 * @see #setEpartnerUser()	 */    final void logoutAsLMPartnerUser() {		Page_ portalLandingPage = createCommonPage("PAGE_PORTAL_LANDING_PAGE_PROPERTIES_FILE");				portalLandingPage.click("logout");    }	/**	 * Selects the default Lead Management app from the SFDC app chooser.	 */    @Override    protected final void chooseApp() {    	chooseApp(LMConstants.DEFAULT_LM_APP);    }        protected CreateFrom getInterfaceType(String createFromConstantName) {    	String createFromString = "";		CreateFrom createFrom = null;				if (!createFromConstantName.trim().equalsIgnoreCase(LMConstants.LM_CREATE_FROM_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.CreateFrom enumerated type is incorrect; it is '" + createFromConstantName + "' but should be '" + LMConstants.LM_CREATE_FROM_ENUM_CONSTANT_NAME + "'");		}				createFromString = testProperties.getConstant(createFromConstantName);				try {			createFrom = CreateFrom.valueOf(createFromString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + createFromConstantName + "' constant ('" + createFromString + "') is not a member of the SSConstants.CreateFrom enumerated type; valid values are: " + Util.valuesOfEnum(CreateFrom.class));		}				return createFrom;    }       protected final void setEnvironmentVariables() {    	switch (getEnvironment().trim().toUpperCase()) {			case "DEV":	{				if (!LMConstants.BASE_URL_DEV.isEmpty()) {					setBaseURL(LMConstants.BASE_URL_DEV);				}								setBasePartnerURL(LMConstants.BASE_PARTNER_URL_DEV);								setAutoUserName(LMConstants.AUTO_USERNAME_DEV);				setAutoPassword(LMConstants.AUTO_PASSWORD_DEV);								setPartnerUserName(LMConstants.PARTNER_USERNAME_DEV);				setPartnerPassword(LMConstants.PARTNER_PASSWORD_DEV);								break;			}			case "STG":			default:	{				if (!LMConstants.BASE_URL_STG.isEmpty()) {					setBaseURL(LMConstants.BASE_URL_STG);				}								setBasePartnerURL(LMConstants.BASE_PARTNER_URL_STG);								setAutoUserName(LMConstants.AUTO_USERNAME_STG);				setAutoPassword(LMConstants.AUTO_PASSWORD_STG);								setPartnerUserName(LMConstants.PARTNER_USERNAME_STG);				setPartnerPassword(LMConstants.PARTNER_PASSWORD_STG);			}     	}    }}