package customerportal;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.concurrent.TimeUnit;import org.apache.commons.lang.RandomStringUtils;import org.openqa.selenium.By;import org.openqa.selenium.Capabilities;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.Keys;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.interactions.HasInputDevices;import org.openqa.selenium.interactions.Mouse;import org.openqa.selenium.internal.Locatable;import org.openqa.selenium.remote.CapabilityType;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import org.openqa.selenium.support.events.EventFiringWebDriver;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.FluentWait;import org.openqa.selenium.support.ui.WebDriverWait;import org.w3c.dom.Document;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import common.Case.CaseType;import common.Case.CreateFrom;import common.DOMXmlParser;import common.EISConstants;import common.EISTestBase;import common.Page_;import common.SoapUIExampleTest;import common.TestProperties;import common.Util;import common.WebDriverListerners;import common.exception.MetadataException;/** * Representation of features and functionality specific to the CustomerPortal * application. *  * @author Nithya Somasundaram * @version 1.0.0 */public class CustomerPortalTestBase extends EISTestBase{	private static final String APP_NAME = "customerportal";	private static final String APP_BASE_DIR = "customerportal";	private static final String APP_BROWSER = System.getProperty("appBrowser");	public static Page_ loginPage = null;	public static Page_ homePage = null;	public static Page_ emailPage = null;	public static Page_ productUpdatePage=null;	public static String GetXpath ="document.getElementByXPath = function(sValue){ var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); if (a.snapshotLength > 0) { return a.snapshotItem(0); } };document.getElementsByXPath = function(sValue){ var aResult = new Array();var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);for ( var i = 0 ; i < a.snapshotLength ; i++ ){aResult.push(a.snapshotItem(i));} return aResult;};";	// TODO We need to figure out what is an auto user, do they use users on the	// setup page,	// do they log in as an auto user and then as a partner user, etc.	private String cepUser = "";	// Define only CustomerPortal-specific windows. SFDC-scope windows (such as	// mainWindow) are static	// objects in the EISTestBase class	// Define CustomerPortal-specific Page objects that have no associated test	// properties. The pages	// defined here are those that:	// will never be referenced in a test properties file, AND	// contain CustomerPortal-specific GUI elements	// Note that if a test DOES need to specify test properties for one of these	// pages	// (e.g., search terms), it can create its own local version of the page,	// and pass	// the pagePropertiesFilenameKey argument	CustomerPortalTestBase(String launchDriver) {		// TODO Change to get APP_BASE_DIR from properties? (currently passed in		// as JVM arg)		super(APP_NAME, APP_BASE_DIR, launchDriver);		setup();	}	public CustomerPortalTestBase(boolean launchDriver){			}		/**	 * Default constructor. It calls the superclass constructor, passing the	 * application's name and directory in the framework's source code	 * hierarchy.	 * 	 * @throws IOException	 */	public CustomerPortalTestBase() throws IOException {		// TODO Change to get APP_BASE_DIR from properties? (currently passed in		// as JVM arg)		super(APP_NAME, APP_BASE_DIR);		//		setup();	}	public void ReLaunchtheDriver(String appBrowser) {		if (appBrowser.equals("firefox")) {			driver = new FirefoxDriver();//    		driver = new EventFiringWebDriver(event);//    		eventListener = new WebDriverListerners();//    		driver.register(eventListener);		    		//wait is required to navigate successfully due to selenium defect    		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);		}		else if(appBrowser.equals("chrome")){				System.setProperty("webdriver.chrome.driver", EISConstants.TEST_BASE_PATH + "chromedriver.exe");    		driver = new ChromeDriver();//    	    driver = new EventFiringWebDriver(event);//    		eventListener = new WebDriverListerners();//    		driver.register(eventListener);		}		else if(appBrowser.equals("ie")){				System.setProperty("webdriver.ie.driver", EISConstants.TEST_BASE_PATH + "IEDriverServer.exe");    		DesiredCapabilities capabilities = new DesiredCapabilities();    		capabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);     		        	driver = new InternetExplorerDriver(capabilities);//        	driver = new EventFiringWebDriver(event);//    		eventListener = new WebDriverListerners();//    		driver.register(eventListener);		}	}	public CustomerPortalTestBase(String browser, String appBrowser) {		// TODO Auto-generated constructor stub		super(APP_NAME, APP_BASE_DIR, browser, APP_BROWSER);		setup();	}	public CustomerPortalTestBase(String browser, String appBrowser,String para) {		// TODO Auto-generated constructor stub		super(APP_NAME, APP_BASE_DIR, browser, appBrowser);		//		setup();	}	public CustomerPortalTestBase(String browser, String appBrowser,boolean setPreferences, boolean modifyBrowserProfile,String[] prefValues ) {		// TODO Auto-generated constructor stub		super(APP_NAME, APP_BASE_DIR, browser, APP_BROWSER,setPreferences,modifyBrowserProfile,prefValues);		setup();	}	public void changesNotSavedPageOnCancel(boolean saveChanges) {		homePage.click("cancelEditAccessButton");		boolean feildExists = homePage.checkFieldExistence("dontSaveButtonInEditAccess");		if(feildExists && !saveChanges){			Util.printInfo("field exists and don't save");			homePage.click("dontSaveButtonInEditAccess");		}		else if(feildExists && saveChanges){			Util.printInfo("field exists and save");			homePage.click("saveInChangesNotSavedInEditAccess");		}	}	public void addNewUser(String emailIdGiven) {		boolean flag = false;		List<WebElement> usersTable = driver.findElements(By.xpath(".//*[@id='results']/li"));		Util.printInfo("emailIdGiven : "+emailIdGiven);		for(int i = 1;i<usersTable.size();i++){			String emailId = driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//section[2]//a[@class='emailAddress']")).getAttribute("title");			Util.printInfo("emailIdGiven : "+emailIdGiven);			Util.printInfo("emailId : "+emailId);			if(emailIdGiven.trim().equalsIgnoreCase(emailId.trim())){				flag = true;				break;			}		}		Util.printInfo("Adding a User");				homePage.clickAndWait("addUser", "email");		homePage.populate();		//		homePage.click("addUserSaveAndContinueButton");		driver.findElement(By.xpath("//*[contains(@class,'and-continue')]")).click();		//		saveContbutton.click();		Util.sleep(2000);		Util.printInfo("update button present : "+flag);		if(flag){			//			homePage.click("dontUpdateAddUser");			driver.findElement(By.xpath(".//div[@id='add-wrapper']//div[contains(@class,'dont-update')]")).click();		}		Util.sleep(4000);	}	public void addNewUser1(String emailIdGiven) {		boolean flag = false;		List<WebElement> usersTable = driver.findElements(By.xpath(".//*[@id='results']/li"));		Util.printInfo("emailIdGiven : "+emailIdGiven);		for(int i = 1;i<usersTable.size();i++){			String emailId = driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//section[2]//a[@class='emailAddress']")).getAttribute("title");			Util.printInfo("emailIdGiven : "+emailIdGiven);			Util.printInfo("emailId : "+emailId);			if(emailIdGiven.trim().equalsIgnoreCase(emailId.trim())){				flag = true;				break;			}		}		Util.printInfo("Adding a User");				homePage.clickAndWait("addUser", "email");		driver.findElement(By.xpath(".//*[@id='email']")).sendKeys(emailIdGiven);		homePage.populate();		//		homePage.click("addUserSaveAndContinueButton");		driver.findElement(By.xpath("//*[contains(@class,'and-continue')]")).click();		//		saveContbutton.click();		Util.sleep(2000);		Util.printInfo("update button present : "+flag);		if(flag){			//			homePage.click("dontUpdateAddUser");			driver.findElement(By.xpath(".//div[@id='add-wrapper']//div[contains(@class,'dont-update')]")).click();		}		Util.sleep(4000);	}	public void addUser(String emailIdGiven,String FirstName) {		boolean flag = false;		List<WebElement> usersTable = driver.findElements(By.xpath(".//*[@id='results']/li"));		Util.printInfo("emailIdGiven : "+emailIdGiven);		for(int i = 1;i<usersTable.size();i++){			String emailId = driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//section[2]//a[@class='emailAddress']")).getAttribute("title");			Util.printInfo("emailIdGiven : "+emailIdGiven);			Util.printInfo("emailId : "+emailId);			if(emailIdGiven.trim().equalsIgnoreCase(emailId.trim())){				flag = true;				break;			}		}		Util.printInfo("Adding a User");				homePage.clickAndWait("addUser", "email");		WebDriverWait waitForEle=new WebDriverWait(driver, 50);		waitForEle.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(".//*[@id='email']"))));		driver.findElement(By.xpath(".//*[@id='email']")).sendKeys(emailIdGiven);		driver.findElement(By.xpath(".//*[@id='first-name']")).sendKeys(FirstName);		driver.findElement(By.xpath(".//*[@id='last-name']")).sendKeys("Name");		//		homePage.click("addUserSaveAndContinueButton");		driver.findElement(By.xpath("//*[contains(@class,'and-continue')]")).click();		Util.sleep(40000);		if(homePage.isFieldVisible("BulkUsersEditAccess")){			Util.printInfo("Edit Access page loaded successfully ");		}else{			EISTestBase.fail("Edit access page not loaded successfully, so please change CM user or else please recheck again ");		}		if(homePage.isFieldVisible("SingleUserErrorMessage")){			EISTestBase.fail("There is an error occured while adding single user");		}		//		saveContbutton.click();		Util.sleep(2000);		Util.printInfo("update button present : "+flag);		if(flag){			//			homePage.click("dontUpdateAddUser");			driver.findElement(By.xpath("//div[contains(text(),'Update') AND contains(@class,'namu-btn blue update locale')]")).click();		}				//Util.sleep(100000);		/*if(homePage.isFieldVisible("NewUserEditAccessPage")){			Util.printMessage("Edit Access page is Loaded");		}else{			EISTestBase.fail("Edit access page not loaded for newly added user, please check the error ");		}		Util.sleep(4000);*/	}	public void enterText(String text){		try{		WebDriverWait wb=new WebDriverWait(driver,40000);		wb.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(@class,'popover upcycle')]//div//input")));		WebElement input = driver.findElement(By.xpath("//div[contains(@class,'popover upcycle')]//div//input"));		input.sendKeys(text); // the value we want to set to input		Util.sleep(300);		input.sendKeys(Keys.RETURN);		Util.sleep(2000);		}catch(Exception e){			//dont print this . it confuses end user.			// should have better logging mechanism may be Log4j TO DO			/*e.printStackTrace();e.getCause(); e.getMessage();*/		}	}	public String getCurrentDateandTime(){		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-hh-mm");		Date date = new Date();		return (dateFormat.format(date));	}	public int getUniqueId() {  		int value = (int)(Math.random() * 88);		return value;	}  	public static String getRandomString(int length) throws Exception {		StringBuffer buffer = new StringBuffer();		String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";		int charactersLength = characters.length();		for (int i = 0; i < length; i++) {			double index = Math.random() * charactersLength;			buffer.append(characters.charAt((int) index));		}		return buffer.toString();	}	public void verifyandClickProductInstallBtnPandS(String ContractNumber){		String InstallNow = homePage				.createFieldWithParsedFieldLocatorsTokens("InstallNow",						ContractNumber);		homePage.verifyFieldExists(InstallNow);		homePage.click(InstallNow);	}	public String getversion(){		String Version=driver.findElement(By.xpath(".//*[@id='install-now-modal']//section//div/form//div/span")).getText();		return Version;	}	public String getPlatform(){		String Platform=driver.findElement(By.xpath(".//*[contains(@id,'install')]//section//div/form/div[2]/div/button")).getText();		return Platform;	}	public String getLanguage(){		String Language=driver.findElement(By.xpath(".//*[contains(@id,'install')]//section//div/form//div[3]/div/button")).getText();		return Language;			}	public void verifInstallBtnModalDailog(){		homePage.verifyFieldExists("VerifyingInstallDownloadNowBrowserDownloadbtns");		 	}	public void verifyandClickProductDownloadNowBtnPandS(String ContractNumber){		String DownloadNow = homePage				.createFieldWithParsedFieldLocatorsTokens("DownloadNow",						ContractNumber);		homePage.verifyFieldExists(DownloadNow);		homePage.click(DownloadNow);	}	public void verifyandClickProductBrowserDownloadBtnPandS(String ContractNumber){		String BrowserDownload = homePage				.createFieldWithParsedFieldLocatorsTokens("BrowserDownload",						ContractNumber);		homePage.verifyFieldExists(BrowserDownload);		homePage.click(BrowserDownload);	}	public void RemoveUser(String UserName){		String UserRemove=homePage.createFieldWithParsedFieldLocatorsTokens("RemoveUser",UserName );		Util.sleep(4000);		homePage.click(UserRemove);		String RemoveLink=homePage.createFieldWithParsedFieldLocatorsTokens("RemoveLink", UserName);		Util.sleep(4000);		homePage.click(RemoveLink);		homePage.waitForFieldAbsent("RemoveLink");		Util.printInfo("User Removed Successfully. User: "+ UserName);	}		public void RemoveUserBySearch(String EmailId,String UserName){				homePage.populateField("UserSearch", EmailId);		Util.sleep(4000);		String Enduser1=homePage.createFieldWithParsedFieldLocatorsTokens("ClickUser",UserName);		Util.sleep(4000);		if(homePage.isFieldVisible(Enduser1)){		String UserRemove=homePage.createFieldWithParsedFieldLocatorsTokens("RemoveUser",UserName );		homePage.click(UserRemove);		String RemoveLink=homePage.createFieldWithParsedFieldLocatorsTokens("RemoveLink", UserName);		homePage.click(RemoveLink);		homePage.waitForFieldAbsent("RemoveLink");		Util.printInfo("User Removed Successfully. User: "+ UserName);		}else{			Util.printInfo("No user exists with the name :: " +UserName);		}	}	public void addNewUserWithInstance(String emailIdGiven,String instanceName) {		boolean flag = false;		List<WebElement> usersTable = driver.findElements(By.xpath(".//*[@id='results']/li"));		Util.printInfo("emailIdGiven : "+emailIdGiven);		for(int i = 1;i<usersTable.size();i++){			String emailId = driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//section[2]//a[@class='emailAddress']")).getAttribute("title");			Util.printInfo("emailIdGiven : "+emailIdGiven);			Util.printInfo("emailId : "+emailId);			if(emailIdGiven.trim().equalsIgnoreCase(emailId.trim())){				flag = true;				break;			}		}		Util.printInfo("Adding a User");		homePage.clickAndWait("addUser", "email");		homePage.populateInstance(instanceName);		//		homePage.click("addUserSaveAndContinueButton");		driver.findElement(By.xpath("//*[contains(@class,'and-continue')]")).click();		//		saveContbutton.click();		Util.sleep(2000);		Util.printInfo("update button present : "+flag);		if(flag){			//			homePage.click("dontUpdateAddUser");			driver.findElement(By.xpath(".//div[@id='add-wrapper']//div[contains(@class,'dont-update')]")).click();		}		Util.sleep(4000);	}	protected boolean compareNoOfUsers(WebDriver driver, String text) {		Util.printInfo("Inside method : compareNoOfUsersInPSWithMU " );				int noOfUsers = getNumberOfUsers(driver);		Util.printInfo("No. of users in users Page  : "+noOfUsers);				return text.equalsIgnoreCase(String.valueOf(noOfUsers));		}	protected void assignAllProducts() {		if(driver.findElements(By.xpath(".//*[@id='products']/div[1]/article")).size()>1){			Capabilities capabilities = ((RemoteWebDriver) driver).getCapabilities();			String browserName = capabilities.getBrowserName();			if(!browserName.equalsIgnoreCase("safari")) {				homePage.click("assignAllProducts");			}			else{				jsToolTip("assignAllProducts");			}			Util.sleep(5000);		}		else{			checkChecKBox("firstProductAssignInput", "productAssignCheckBoxLabel");		}	}	public void LoginCustomerPortal() throws Exception	{		if(getEnvironment().equalsIgnoreCase("DEV")){			loginAsMyAutodeskPortalUser(testProperties.getConstant("USER_NAME_DEV") , testProperties.getConstant("PASSWORD_DEV"));		}		else if(getEnvironment().equalsIgnoreCase("STG")){			loginAsMyAutodeskPortalUser(testProperties.getConstant("USER_NAME_STG1") , testProperties.getConstant("PASSWORD_STG1"));		}	}	protected void assignAllBenefits() {		if(driver.findElements(By.xpath(".//*[@id='benefits']/div[1]/article")).size()>1){			homePage.click("assignAllBenefits");		}		else{			Util.sleep(5000);			driver.findElement(By.xpath("//*[contains(@id,'contract')]/div[1]/button")).click();			Util.sleep(5000);			if(!homePage.getAttribute("assigncheckboxforProductInput", "class").equalsIgnoreCase("disabled"))				Util.sleep(5000);			checkChecKBox("assigncheckboxforProductInput", "assigncheckboxforProductLabel");			Util.sleep(5000);			if(!homePage.getAttribute("assigncheckboxforProduct1Input", "class").equalsIgnoreCase("disabled"))				Util.sleep(5000);			checkChecKBox("assigncheckboxforProduct1Input", "assigncheckboxforProduct1Label");			Util.sleep(5000);			/*WebElement drawerDetails = driver.findElement(By.xpath(".//*[@id='benefits']//button[contains(@class,'btn details-toggle locale')]"));					List<WebElement> benefits = drawerDetails.findElements(By.cssSelector("input:not(:checked)[type='checkbox']"));					for(WebElement benefit :benefits){						benefit.click();					}*/		}	}	protected void unAssignAllProducts() {		if(driver.findElements(By.xpath(".//*[@id='products']/div[1]/article")).size()>1){			homePage.click("assignAllProducts");			homePage.click("assignAllProducts");		}		else{			unCheckChecKBox("firstProductAssignInput", "productAssignCheckBoxLabel");		}	}	protected void unAssignAllBenefits() {		if(driver.findElements(By.xpath(".//*[@id='benefits']/div[1]/article")).size()>1){			homePage.click("assignAllBenefits");			Util.sleep(2000);			homePage.click("assignAllBenefits");		}		else{			/*WebElement drawerDetails = driver.findElement(By.xpath(".//*[@id='benefits']//button[contains(@class,'btn details-toggle locale')]"));					List<WebElement> benefits = drawerDetails.findElements(By.cssSelector("input:checked[type='checkbox']"));					for(WebElement benefit :benefits){						benefit.click();					}*/			driver.findElement(By.xpath("//*[contains(@id,'contract')]/div[1]/button")).click();			checkChecKBox("assigncheckboxforProductInput", "assigncheckboxforProductLabel");			checkChecKBox("assigncheckboxforProduct1Input", "assigncheckboxforProduct1Label");		}	}	protected void checkChecKBox(String inputLocator, String labelLocator) {		if(!homePage.isChecked(inputLocator)){			Capabilities capabilities = ((RemoteWebDriver) driver).getCapabilities();			String browserName = capabilities.getBrowserName();			if(!browserName.equalsIgnoreCase("safari")) {				Util.sleep(5000);				Util.printInfo("The check box is unchecked");				Util.printInfo("Clicking on checkbox..");				Util.sleep(2000);				homePage.click(labelLocator);				//	 		homePage.click("endUserAutoCADRevitLTSuitRenderingServiceCheckBox");				Util.sleep(2000);				Util.printInfo("The check box is checked now..");				}else{				Util.sleep(5000);				Util.printInfo("The check box is unchecked");				Util.printInfo("Clicking on checkbox..");				Util.sleep(2000);				jsToolTip(labelLocator);				Util.sleep(2000);				Util.printInfo("The check box is checked now..");			}		}		else {			Util.printInfo("The check box is checked");				Util.sleep(2000);		}	}	/*protected void unCheckChecKBox(String inputLocator, String labelLocator) {		if(homePage.isChecked(inputLocator)){			Util.sleep(2000);			Util.printInfo("The check box is checked");			Util.printInfo("Clicking on checkbox..");			Util.sleep(2000);			homePage.click(labelLocator);			//	 		homePage.click("endUserAutoCADRevitLTSuitRenderingServiceCheckBox");			Util.sleep(2000);			Util.printInfo("The check box is UnChecked now..");			Util.sleep(2000);		}		else {			Util.printInfo("The check box is Unchecked");				Util.sleep(2000);		}	}*/	protected void unCheckChecKBox(String inputLocator, String labelLocator) {		if(homePage.isChecked(inputLocator)){			Util.sleep(2000);			Util.printInfo("The check box is checked");			Capabilities capabilities = ((RemoteWebDriver) driver).getCapabilities();			String browserName = capabilities.getBrowserName();			if(!browserName.equalsIgnoreCase("safari")) {				Util.printInfo("Clicking on checkbox..");				Util.sleep(2000);				homePage.click(labelLocator);				//	 		homePage.click("endUserAutoCADRevitLTSuitRenderingServiceCheckBox");				Util.sleep(2000);				Util.printInfo("The check box is UnChecked now..");				Util.sleep(2000);			}			else{				Util.printInfo("Clicking on checkbox..");				Util.sleep(2000);				jsToolTip(labelLocator);				Util.sleep(2000);				Util.printInfo("The check box is UnChecked now..");				Util.sleep(2000);			}		}		else {			Util.printInfo("The check box is Unchecked");				Util.sleep(2000);		}	}	protected boolean verifyDisAbledCheckbox(String fieldName, String attributeName){		boolean status=true;		String getStatus = homePage.getAttribute("AssignAllBenifitsForCM", "class");		if(getStatus.equalsIgnoreCase("edit-action disabled")){			Util.printInfo("The check box is disabled");		}		else{			status = false;			EISTestBase.fail("Check Box should be disabled but it is not");		}		return status;	}	protected HashMap<String, Integer> getNumberOfUsersAssigned(WebDriver driver) {		HashMap<String,Integer> contractMap = new HashMap<String,Integer>();		int totalUsers = driver.findElements(By.xpath(".//*[@id='user-list']//li[@class='user clearfix']")).size();		Util.printInfo("totalUsers : "+totalUsers);		for(int i =1;i<=totalUsers;i++){			String contractsInnerAtt = driver.findElement(By.xpath(".//*[@id='user-list']//li["+i+"][@class='user clearfix']//*[contains(@class,'contracts')]")).getAttribute("innerHTML").trim();			Util.printInfo("contractsInnerAtt : "+contractsInnerAtt);			if(!contractsInnerAtt.isEmpty() && !contractsInnerAtt.equals("") && contractsInnerAtt!=null){				String contractName = driver.findElement(By.xpath(".//*[@id='user-list']//li["+i+"][@class='user clearfix']//*[contains(@class,'contract-label')]")).getAttribute("innerHTML").trim();				Util.printInfo("contractName from user page : "+contractName);				int cSize = driver.findElements(By.xpath(".//*[@id='user-list']//li["+i+"][@class='user clearfix']//*[contains(@class,'contract-label')]/parent::div//li")).size();				if(!contractName.isEmpty())					for(int j=1;j<=cSize;j++){						if(!contractName.equalsIgnoreCase("Contract Manager")){							String contract = driver.findElement(By.xpath(".//*[@id='user-list']//li["+i+"]//*[contains(@class,'contract-label')]/parent::div//li["+j+"]")).getAttribute("innerHTML");							contract= contract.substring(contract.lastIndexOf(">")+1,contract.length()).trim();							Util.printInfo("contract from user page : "+contract);							int count = 1;							if(contractMap.containsKey(contract)){								count = contractMap.get(contract)+1;								contractMap.put(contract, count);							}							else{								contractMap.put(contract, 1);							}						}					}			}		}		return contractMap;	}	public UserDetailsDTO getUserDetails(String constant) {		UserDetailsDTO userDetail = null;		Map<String,String> contractAndType = new HashMap<>();		homePage.click("reporting");		Util.sleep(2000);		homePage.click("usageReport");		Util.sleep(2000);		int contracts = driver.findElements(By.xpath(".//*[@id='contract-usage']/*[@class='viewport']/article")).size();		for(int i =1;i<=contracts;i++){			String contract = driver.findElement(By.xpath(".//*[@id='contract-usage']/*[@class='viewport']/article["+i+"]//*[@class='number']/span")).getText().trim();			String type = driver.findElement(By.xpath(".//*[@id='contract-usage']/*[@class='viewport']/article["+i+"]//*[@class='plan']/label")).getText().trim();			contractAndType.put(contract, type);		}		homePage.clickAndWait("users","selectAllInUP");		Util.sleep(5000);		int users = driver.findElements(By.xpath(".//*[@id='results']/li")).size();		for(int i=1;i<=users;i++){			String contractsInnerAtt = driver.findElement(By.xpath(".//*[@id='user-list']//li["+i+"][@class='user clearfix']//*[contains(@class,'contracts')]")).getAttribute("innerHTML").trim();			Util.printInfo("contractsInnerAtt : "+contractsInnerAtt);			String email = driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//*[@class='emailAddress']")).getAttribute("title").trim();			if(!contractsInnerAtt.isEmpty() && !contractsInnerAtt.equals("") && contractsInnerAtt!=null && email.equalsIgnoreCase(constant)){				userDetail = new UserDetailsDTO();				userDetail.setUserName(driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//*[@class='col first']/span")).getAttribute("title").trim());				userDetail.setEmailAddrs(driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//*[@class='emailAddress']")).getAttribute("title").trim());				Map<String,String> contractMap = new HashMap<>();				int cSize = driver.findElements(By.xpath(".//*[@id='user-list']//li["+i+"][@class='user clearfix']//*[contains(@class,'contract-label')]/parent::div//li")).size();				for(int j=1;j<=cSize;j++){					String contract = driver.findElement(By.xpath(".//*[@id='user-list']//li["+i+"]//*[contains(@class,'contract-label')]/parent::div//li["+j+"]")).getAttribute("innerHTML");					contract= contract.substring(contract.lastIndexOf(">")+1,contract.length()).trim();					Util.printInfo("contract from user page : "+contract);					if(!contractMap.containsKey(contract)){						contractMap.put(contract, contractAndType.get(contract));					}				}				userDetail.setContractWithType(contractMap);			}		}		// TODO Auto-generated method stub		return userDetail;	}	public List<UserDetailsDTO> getUserDetails() {		List<UserDetailsDTO> userDetailsList = new ArrayList<>();		UserDetailsDTO userDetail = null;		Map<String,String> contractAndType = new HashMap<>();		homePage.click("reporting");		Util.sleep(2000);		homePage.click("usageReport");		homePage.refresh();		Util.sleep(2000);		int contracts = driver.findElements(By.xpath(".//*[@id='contract-usage']/*[@class='viewport']/article")).size();		for(int i =1;i<=contracts;i++){			String contract = driver.findElement(By.xpath("//*[@id='contract-usage']/*[@class='viewport']/article["+i+"]//*[@class='number']/span[@class='value']")).getText().trim();			String type = driver.findElement(By.xpath("//*[@id='contract-usage']/*[@class='viewport']/article["+i+"]//div[@class='contract-summary']//div[@class='plan']/span")).getText().trim();			contractAndType.put(contract, type);		}		Util.sleep(40000);		homePage.clickAndWait("users","selectAllInUP");		Util.sleep(5000);		int users = driver.findElements(By.xpath(".//*[@id='results']/li")).size();		for(int i=1;i<=users;i++){			String contractsInnerAtt = driver.findElement(By.xpath(".//*[@id='user-list']//li["+i+"][@class='user clearfix']//*[contains(@class,'contracts')]")).getAttribute("innerHTML").trim();			Util.printInfo("contractsInnerAtt : "+contractsInnerAtt);			if(!contractsInnerAtt.isEmpty() && !contractsInnerAtt.equals("") && contractsInnerAtt!=null){				userDetail = new UserDetailsDTO();				userDetail.setUserName(driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//*[@class='col first']/span")).getAttribute("title").trim());				userDetail.setEmailAddrs(driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]//*[@class='emailAddress']")).getAttribute("title").trim());				Map<String,String> contractMap = new HashMap<>();				int cSize = driver.findElements(By.xpath(".//*[@id='user-list']//li["+i+"][@class='user clearfix']//*[contains(@class,'contract-label')]/parent::div//li")).size();				for(int j=1;j<=cSize;j++){					String contract = driver.findElement(By.xpath(".//*[@id='user-list']//li["+i+"]//*[contains(@class,'contract-label')]/parent::div//li["+j+"]")).getAttribute("innerHTML");					contract= contract.substring(contract.lastIndexOf(">")+1,contract.length()).trim();					Util.printInfo("contract from user page : "+contract);					if(!contractMap.containsKey(contract)){						contractMap.put(contract, contractAndType.get(contract));					}				}				userDetail.setContractWithType(contractMap);			}			userDetailsList.add(userDetail);		}		// TODO Auto-generated method stub		return userDetailsList;	}	protected int getNumberOfUsers(WebDriver driver) {		homePage.click("users");		int noOfUsers =  driver.findElements(By.xpath(".//*[@id='results']/li")).size();		int count = 0;		for(int i = 1;i<=noOfUsers;i++){			Util.printInfo("Inside for loop..");			Util.printInfo("value of i : "+ i);			String text = driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]/section[1]//small[contains(text(),'Products & Services')]/following-sibling::span")).getText();			Util.printInfo("Value of text"+ text);			if(Integer.parseInt(text.trim())>0){				count++;			}		}		Util.printInfo("Value of count ( Users with Products and service values > 0 ) : "+count);		homePage.click("productsAndServices");		Util.printInfo("No. of users in users Page : "+noOfUsers);		return count;	}	protected int getNumberOfNamedUsers(WebDriver driver) {		homePage.click("users");		int noOfUsers =  driver.findElements(By.xpath(".//*[@id='results']/li")).size();		int count = 0;		for(int i = 1;i<=noOfUsers;i++){			String text = driver.findElement(By.xpath(".//*[@id='results']/li["+i+"]/section[1]//small[contains(text(),'Products & Services')]/following-sibling::span")).getText();			if(Integer.parseInt(text.trim())>0){				count++;			}		}		homePage.click("productsAndServices");		Util.printInfo("No. of users in users Page : "+noOfUsers);		return count;	}	protected void launchMyAutodeskPortal(String url) {		// Assumes a browser window is already open		try{		open(url);		/*if (!loginPage.isFieldPresent("loginButton")) {			Util.printDebug("Handling possible web certificate error...");			int exitCode = commonPage.clickLinkInIE(EISConstants.TEST_BASE_PATH					+ EISConstants.CLICK_LINK_IN_IE_PROCESS, url,					CustomerPortalConstants.CONTINUE_TO_WEBSITE_LINK_TEXT);			if (exitCode != EISConstants.PROCESS_EXIT_CODE_SUCCESS) {				Util.printWarning("Error when clicking link on web certificate error page after launching Salesforce: "						+ exitCode);			}			Util.printDebug("Handled possible web certificate error");		}*/		// Will have to do this every time we open a new window or pop-up,		// because the locators are generated on the fly in WebDriver		mainWindow.setLocator(driver.getWindowHandle());		// Save the URL used to launch Salesforce, as sometimes the user wants		// to use it as a base for		// navigating to another URL, perhaps one that refers to an object ID		windowMaximize();		// Will have to do this every time we open a new window or pop-up,		// because the locators are generated on the fly in WebDriver		mainWindow.setLocator(driver.getWindowHandle());		// Save the URL used to launch Salesforce, as sometimes the user wants		// to use it as a base for		// navigating to another URL, perhaps one that refers to an object ID		setBaseURL(url);		windowMaximize();		String appName = getAppName();		String currentURL = getCurrentURL();		Util.printInfo("Launched " + appName + " at '" + currentURL + "'");	}catch(NullPointerException  exp){		Util.printInfo("Exception caught while navigating to CP ");		exp.getCause();		exp.printStackTrace();	}	}	public void logoutMyAutodeskPortal() {		Capabilities capabilities = ((RemoteWebDriver) driver).getCapabilities();		String browserName = capabilities.getBrowserName();		if(!browserName.equalsIgnoreCase("safari") && !browserName.equalsIgnoreCase("ie")) {			homePage.click("logout");		}		else{			try { 				driver.manage().deleteAllCookies();				/*String mouseOverScript = "var click_ev = document.createEvent(\"MouseEvents\"); click_ev.initEvent(\"click\", true, true ); document.getElementById(\"logout\").dispatchEvent(click_ev);";*/				String mouseOverScript= "var ele=document.getElementById(\"logout\");var evt= document.createEvent(\"HTMLEvents\");evt.initEvent(\"click\",true,true);ele.dispatchEvent(evt);";				JavascriptExecutor js = (JavascriptExecutor) driver;				js.executeScript(mouseOverScript); 				driver.manage().deleteAllCookies();				Util.sleep(5000);			} catch (Exception e){				e.printStackTrace();			}		}	}	public void SafariCertificate() throws IOException, InterruptedException{		Process process = null;		//			process=Runtime.getRuntime().exec(System.getProperty("user.dir")+"\\build\\OverrideCertificate");		String path = new java.io.File(".").getCanonicalPath();		if (!path.contains("build")){			path=path+"\\build";		}		process=Runtime.getRuntime().exec(path+"\\OverrideCertificate");		process.waitFor();		Util.sleep(2000);	}	public void LazyScroll(){		Capabilities capabilities = ((RemoteWebDriver) driver).getCapabilities();		String browserName = capabilities.getBrowserName();		if(!browserName.equalsIgnoreCase("safari")) {			Actions actions = new Actions(driver);			actions.keyDown(Keys.CONTROL).sendKeys(Keys.END).perform();		}		else{			try { String ScrollBar = "var iheight=document.documentElement.clientHeight; var yscroll=iheight * 5; window.scrollBy(0,yscroll);";			JavascriptExecutor js = (JavascriptExecutor) driver;			js.executeScript(ScrollBar); 			Util.sleep(25000);			} catch (Exception e){				e.printStackTrace();			}		}	}	public static String toTitleCase(String s)	{		String result = "";		String[] words = s.split(" ");		for (int i = 0; i < words.length; i++) 		{			result += words[i].replace(words[i].charAt(0)+"", Character.toUpperCase(words[i].charAt(0))+"") + " ";		}		return result;	}	public void CheckboxCheck(String Severity){		String CheckBox1=homePage.createFieldWithParsedFieldLocatorsTokens("SeverityHigh", Severity);		boolean CheckBoxStatus=homePage.isChecked(CheckBox1);		if(CheckBoxStatus){			Util.printInfo("Severity "+Severity+" checkbox is checked :: ");			Util.printInfo("Unchecking Severity "+Severity+" checkbox :: ");			String CheckBox=homePage.createFieldWithParsedFieldLocatorsTokens("SeverityHigh", Severity);			Util.sleep(20000);			homePage.click(CheckBox);		}else{			Util.printInfo("clicking on Severity "+Severity+" checkbox :: ");			//			String CheckBox=homePage.createFieldWithParsedFieldLocatorsTokens("SeverityHigh", Severity);			Util.sleep(2000);			homePage.populateInstance("CHECK_SEVERITY_HIGH");			Util.printInfo("clicked on Severity "+Severity+" checkbox :: ");		}	}	/**	 * Gets the CustomerPortal user name. (NOTE that it is not yet clear what	 * constitutes an CustomerPortal user, a partner user, an admin user, etc.)	 * 	 * @return The CustomerPortal user name	 */	final String getCEPUser() {		return cepUser;	}	@Override	public String toString() {		return getAppName() + " [" + "super=             " + super.toString()				+ ", cepUser=     " + cepUser + "]";	}	/**	 * Configures high-level CustomerPortal-specific objects.	 * 	 * @see #doSetup()	 */	@Override	protected final void setup() {		super.setup();		doSetup();	}	/**	 * Configures high-level CustomerPortal-specific objects&#58;<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates CustomerPortal-specific Page objects<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates CustomerPortal-specific Window	 * objects	 * 	 * @see #createAppWindows()	 * @see #createAppPages()	 */	private final void doSetup() {		setEnvironmentVariables();		createAppWindows();		createAppPages();		// MUST be called after super.setup!!!		// NOTE that CEPUser is the equivalent of a user that is found in the		// setup screen.		// The user that logs in to the app is known as the auto user. Until we		// figure out		// whether that model applies, don't call this.		// setCEPUser();	}	/**	 * Instantiates CustomerPortal-specific Window objects.	 */	@Override	protected final void createAppWindows() {		// Instantiate only CustomerPortal-specific windows. SFDC-scope windows		// (such as mainWindow) are static		// objects in the EISTestBase class	}	/**	 * Instantiates CustomerPortal-specific Page objects.	 */	private final void createAppPages() {		// Instantiate Page objects that have no associated test properties		// Note that if a test DOES need to specify test properties for one of		// these pages		// (e.g., search terms), it can create its own local version of the		// page, and pass		// the pagePropertiesFilenameKey argument, OR create it here, by calling		// createPage		// instead of createStaticPage		// Can also instantiate regular (i.e., with associated test properties)		// CustomerPortal-specific		// Page objects here, but typically it is best for the test or utility		// methods to do that;		// if we do it here we may end up creating Page objects that never get		// used.		loginPage = createPage(testProperties, "PAGE_LOGIN_PROPERTIES_FILE",				600);		homePage = createPage(testProperties, "PAGE_HOME_PROPERTIES_FILE", 600);		emailPage = createPage(testProperties, "PAGE_EMAIL_PROPERTIES_FILE",				600);		productUpdatePage=createPage(testProperties, "PAGE_PRODUCT_UPDATES_FILE", 600);	}	final CustomerPortal utilCreateMyAutodeskPortal(			TestProperties utilProperties) throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalObject(utilProperties);		return customerPortal;	}	final CustomerPortal utilCreateMyAutodeskPortalWithEmailVerification(			TestProperties utilProperties) throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithEmailVerficationObject(utilProperties);		return customerPortal;	}	final CustomerPortal utilCreateMyAutodeskPortal() throws Exception {		return utilCreateMyAutodeskPortal(testProperties);	}	final CustomerPortal utilCreateMyAutodeskPortalWithEmailVerification()			throws Exception {		return utilCreateMyAutodeskPortalWithEmailVerification(testProperties);	}	final CustomerPortal utilCreateMyAutodeskPortalObject(			TestProperties utilProperties) {		CustomerPortal customerPortal = null;		// Use longer pageRedrawDelay setting for slow pages		Page_ login = createPage(utilProperties, "PAGE_LOGIN_PROPERTIES_FILE",				600);		Page_ home = createPage(utilProperties, "PAGE_HOME_PROPERTIES_FILE");		customerPortal = new CustomerPortal(login, home);		return customerPortal;	}	final CustomerPortal utilCreateMyAutodeskPortalWithEmailVerficationObject(			TestProperties utilProperties) {		CustomerPortal customerPortal = null;		// Use longer pageRedrawDelay setting for slow pages		Page_ login = createPage(utilProperties, "PAGE_LOGIN_PROPERTIES_FILE",				600);		Page_ home = createPage(utilProperties, "PAGE_HOME_PROPERTIES_FILE");		Page_ email = createPage(utilProperties, "PAGE_EMAIL_PROPERTIES_FILE");		customerPortal = new CustomerPortal(login, home, email);		return customerPortal;	}	/**	 * @Description create Customer Portal object with Home and Product Updates	 */	public final CustomerPortal utilCreateMyAutodeskPortalWithProductUpdateAndEmailObject(TestProperties utilProperties) {		CustomerPortal custPortal=null;		Page_ login = createPage(utilProperties, "PAGE_LOGIN_PROPERTIES_FILE",				600);		Page_ home = createPage(utilProperties, "PAGE_HOME_PROPERTIES_FILE");		Page_ productUpdate=createPage(utilProperties, "PAGE_PRODUCT_UPDATES_FILE");		Page_ email= createPage(utilProperties, "PAGE_EMAIL_PROPERTIES_FILE");		custPortal = new CustomerPortal(login, home,email,productUpdate);		return custPortal;	}	/**	 * Logs in as the automation user, optionally launching Salesforce (default	 * user is CustomerPortalConstants.AUTO_USERNAME).	 * 	 * @param launch	 *            the setting that determines whether to launch Salesforce	 *            before logging in	 * @return The automation user name	 */	/**	 * Logs in as the CustomerPortal user	 * 	 * @return void	 */			public void loginAsMyAutodeskPortalUser(String userName, String passWord)			throws Exception {		if(getEnvironment().trim().contains("STG")){			open(CustomerPortalConstants.BASE_URL_STG);		}		else if(getEnvironment().trim().contains("DEV")){			System.out.println("UserName in Cp URL:"+CustomerPortalConstants.BASE_URL_DEV);			open(CustomerPortalConstants.BASE_URL_DEV);		}else{			open(CustomerPortalConstants.BASE_URL_PRD);		}		System.out.println("UserName in Cp UN:"+userName+" Password: " +passWord);		CustomerPortal customerPortal = utilCreateMyAutodeskPortal();		Page_ loginPage = customerPortal.getLoginPage();		Page_ homePage = customerPortal.getHomePage();		// loginPage.clickAndWaitForPopUpToOpen("signInButton");		// WebElement frame = driver.findElement(By.id("authFrame"));		// driver.switchTo().frame(frame);		//wait for the field to display		homePage.refresh();		Util.sleep(2000);		driver.manage().deleteAllCookies();		//Util.sleep(2000);		/*loginPage.waitForFieldPresent("userName", 60000);	//wait for 60 sec  		 */		loginPage.populateField("userName", userName);		 loginPage.populateField("password", passWord);		 Util.sleep(20000);			 loginPage.click("signInPortalButton");		 Util.sleep(30000);	 			 		 		 		 driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);	//wait for 1.5 min if not break the test . Otherwsie the script waits for long time		 		 		 Properties OS_Timeout = System.getProperties();		 		 if(OS_Timeout.toString().contains("Mac OS X")){		 // and sometime might go in a loop for indefinite time. So it s not a good practice to do this. So throw exception and come out		 WebDriverWait wb = new WebDriverWait (driver, 180);		 /*WebDriverWait wb = new WebDriverWait (driver, 50000);		//Please dont add 60000 sec , the WebDriverWait timeout is in sec not ms . we need to exit the script if we are not able to login with n 60 sec*/		/* WebDriverWait wb = new WebDriverWait(driver, 50,2);*/				 wb.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='nav-primary']/div/ul/li[1]/a")));				 }else{			 homePage.waitForFieldPresent("productsAndServices", 80000);	//wait for 60 sec			 if(driver.findElement(By.xpath("//h2[contains(text(),'All Products')]")).isDisplayed()){				 Util.printInfo("Logged into Customer Portal successfully.");			 }else {				 throw new Exception("**** Unable to login to Customer Portal : Environment :"+getEnvironment()+" please increase time out");			 }			 //reset to 5			 		 }		 		 		 				 driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);		 //		 //		//		if (loginPage.isFieldPresent("acceptButton")) {		 //		/*There is a lapse of 5 sec in displaying hte accept btn in DEV/STG*/		 //		//wait for the page to load completely		 //		homePage.checkIfElementExistsInPage("genericLoadingIcon", 10);		 //		if (loginPage.checkIfElementExistsInPage("acceptButton", 1)){		 //			loginPage.click("acceptButton");		 //			Util.sleep(5000);		 //		}				 Util.printInfo("Logged into Customer Portal with the User Name / password "+ userName + "/" + passWord);		 //		Util.sleep(5000);	}			public void loginAsMyAutodeskPortalUserToEmulate(String firstname,String lastname,String userName, String passWord,String GUID)			throws Exception {		if(getEnvironment().trim().contains("STG")){			String EmulatedUrl=CustomerPortalConstants.BASE_EMULATED_URL_STG;			String NewEmulatedURL=EmulatedUrl.replace("firstname=?", "firstname="+firstname).replace("lastname=?", "lastname="+lastname).replace("$", GUID);			open(NewEmulatedURL);		}		else if(getEnvironment().trim().contains("DEV")){			String EmulatedUrl=CustomerPortalConstants.BASE_EMULATED_URL_DEV;			String NewEmulatedURLDEV=EmulatedUrl.replace("firstname=?", "firstname="+firstname).replace("lastname=?", "lastname="+lastname).replace("$", GUID);			open(NewEmulatedURLDEV);		}				System.out.println("UserName in Cp UN:"+userName+" Password: " +passWord);		CustomerPortal customerPortal = utilCreateMyAutodeskPortal();		Page_ loginPage = customerPortal.getLoginPage();		Page_ homePage = customerPortal.getHomePage();		// loginPage.clickAndWaitForPopUpToOpen("signInButton");		// WebElement frame = driver.findElement(By.id("authFrame"));		// driver.switchTo().frame(frame);		//wait for the field to display		homePage.refresh();		Util.sleep(2000);		driver.manage().deleteAllCookies();		//Util.sleep(2000);		/*loginPage.waitForFieldPresent("userName", 60000);	//wait for 60 sec  		 */		loginPage.populateField("userName", userName);		 loginPage.populateField("password", passWord);		 Util.sleep(2000);		 loginPage.click("signInPortalButton");		 Util.sleep(40000);	//wait for the page to load then run the explicit wait call otherwise the test s going to hang for long time		 driver.manage().timeouts().implicitlyWait(90, TimeUnit.SECONDS);	//wait for 1.5 min if not break the test . Otherwsie the script waits for long time 		 // and sometime might go in a loop for indefinite time. So it s not a good practice to do this. So throw exception and come out		 /*WebDriverWait wb = new WebDriverWait (driver, 60000);*/		 WebDriverWait wb = new WebDriverWait (driver, 300);		//Please dont add 60000 sec , the WebDriverWait timeout is in sec not ms . we need to exit the script if we are not able to login with n 60 sec		 wb.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='nav-primary']/div/ul/li[1]/a")));		 if(driver.findElement(By.xpath("//div/h2[contains(text(),'All Products')]")).isDisplayed()){			 Util.printInfo("Logged into Customer Portal successfully.");		 }else {			 throw new Exception("**** Unable to login to Customer Portal : Environment :"+getEnvironment()+" please increase time out");		 }		 //reset to 5		 driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);		 //		 //		//		if (loginPage.isFieldPresent("acceptButton")) {		 //		/*There is a lapse of 5 sec in displaying hte accept btn in DEV/STG*/		 //		//wait for the page to load completely		 //		homePage.checkIfElementExistsInPage("genericLoadingIcon", 10);		 //		if (loginPage.checkIfElementExistsInPage("acceptButton", 1)){		 //			loginPage.click("acceptButton");		 //			Util.sleep(5000);		 //		}				 Util.printInfo("Logged into Customer Portal with the User Name / password "+ userName + "/" + passWord);		 //		Util.sleep(5000);	}	public int LazyLoading(int i){		List<WebElement> ListOfUsersAfterSearch=null;		int size=0;		Util.sleep(8000);		/*Actions actions = new Actions(driver);			actions.keyDown(Keys.CONTROL).sendKeys(Keys.END).perform();*/		//((JavascriptExecutor)driver).executeScript("window.scrollBy(0,6000)");		String ScrollBar = "var iheight=document.documentElement.clientHeight; var yscroll=iheight * 5; window.scrollBy(0,yscroll);";		JavascriptExecutor js = (JavascriptExecutor) driver;		js.executeScript(ScrollBar); 		Util.sleep(15000);		//			ListOfUsersAfterSearch=homePage.getMultipleWebElementsfromField("ListOfUsersUsersSearch");		ListOfUsersAfterSearch=driver.findElements(By.xpath(".//*[@id='results']/li"));		System.out.println("Serach Results >>>>>>>>>>>>>>>>>>>"+ListOfUsersAfterSearch.size());		if(homePage.isFieldVisible("selectAllInUP")){			EISTestBase.fail("Select All check box is displayed for users more than 50.. ");		}else{			assertFalseWithFlags("Select All check box is not displayed for users more than 50..", homePage.isFieldVisible("selectAllInUP"));		}		return ListOfUsersAfterSearch.size();	}	public WebElement ReturnWebelement(String AppendString){		return driver.findElement(By.xpath("//article[contains(@id,'"+AppendString+"')]//div/p/span[contains(text(),'Versions')]"));	}	public WebElement ReturnWebElementToClick(String AppendString){		//return driver.findElement(By.xpath("//article[contains(@id,'"+AppendString+"')]//div/p/span[contains(text(),'Versions')]//ancestor::div[contains(@class,'left-col')]/following-sibling::div[contains(@class,'middle-col')]//div/a/div[contains(@class,'manageUsers')]"));		WebElement web=driver.findElement(By.xpath(".//*[@id='"+AppendString+"']/div[2]/div[2]/div/div/div[1]/a[2]/div"));		return web;	}	public WebElement ReturnWebelement(){		//return driver.findElement(By.xpath("//div[@class='add-user']/a/span[contains(text(),'Add Users')]"));		return driver.findElement(By.xpath(".//*[contains(@id,'user-permissions-list')]/div[2]/div//li[1]/div[4]/div/span[2]"));	}	/*public void WebDriverWait(){		WebDriverWait wait=new WebDriverWait(driver,200);		wait.until(ExpectedConditions.visibilityOfElementLocated(""))	}*/	public void LaunchSCAT(String userName, String passWord)			throws Exception {		if(getEnvironment().trim().contains("STG")){			open(CustomerPortalConstants.SCAT_STG_URL);		}		/*CustomerPortal customerPortal = utilCreateMyAutodeskPortal();		Page_ loginPage = customerPortal.getLoginPage();		Page_ homePage = customerPortal.getHomePage();		// loginPage.clickAndWaitForPopUpToOpen("signInButton");		// WebElement frame = driver.findElement(By.id("authFrame"));		// driver.switchTo().frame(frame);		 */		driver.findElement(By.name("uid")).sendKeys(userName);		driver.findElement(By.name("pw")).sendKeys(passWord);		Util.sleep(4000);		if(driver.findElement(By.name("login")).isEnabled()){			driver.findElement(By.name("login")).click();			Util.sleep(4000);		}else{			EISTestBase.fail("SCAT login page is not available :: ");		}		Util.printInfo("Logged into SCAT with the User Name / password "+ userName + "/" + passWord);		Util.sleep(5000);	}	public void loginAsMyAutodeskPortalUserAndChangePassword(String userName,String passWord) throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortal();		Page_ loginPage = customerPortal.getLoginPage();		Page_ homePage = customerPortal.getHomePage();		// loginPage.clickAndWaitForPopUpToOpen("signInButton");		// WebElement frame = driver.findElement(By.id("authFrame"));		// driver.switchTo().frame(frame);		loginPage.populateField("userName", userName);		loginPage.populateField("password", passWord);		loginPage.click("signInPortalButton");		Util.sleep(15000);		loginPage.waitForFieldPresent("newPassword");		loginPage.populateField("newPassword", "Password1");		loginPage.populateField("confirmPassword", "Password1");		loginPage.clickAndWait("passwordResetButton", "confirmationContinue");		loginPage.click("confirmationContinue");		Util.sleep(5000);		if (loginPage.isFieldPresent("acceptButton")) {			loginPage.click("acceptButton");			Util.sleep(5000);		}		homePage.waitForFieldPresent("header");	}	public boolean loginAsNewUserAndCheckPassword(String userName,String passWord) throws Exception {		boolean needToChangePassword = false;		CustomerPortal customerPortal = utilCreateMyAutodeskPortal();		Page_ loginPage = customerPortal.getLoginPage();		Page_ homePage = customerPortal.getHomePage();		// loginPage.clickAndWaitForPopUpToOpen("signInButton");		// WebElement frame = driver.findElement(By.id("authFrame"));		// driver.switchTo().frame(frame);		loginPage.populateField("userName", userName);		loginPage.populateField("password", passWord);		loginPage.click("signInPortalButton");		Util.sleep(60000);		if (loginPage.isFieldPresent("acceptButton")) {			loginPage.click("acceptButton");			Util.sleep(5000);		}		if (loginPage.isFieldPresent("passwordDoNotMatch")) {			Util.printInfo("The password : Password1 is not the correct password for the user with whoom we are trying to login.");			Util.printInfo("---------------------------- Checking the sstmailbox for the welcome kit----------------------------");			needToChangePassword = true;		}		else if(homePage.isFieldPresent("header")){			Util.printInfo("Logged in to Customer portal with : " +userName + " and password : " +passWord);			needToChangePassword = false;		}		return needToChangePassword;	}	public void loginToSSTMail(String userName, String passWord)			throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithEmailVerification();		Page_ loginPage = customerPortal.getLoginPage();		Page_ emailPage = customerPortal.getEmailPage();		// loginPage.clickAndWaitForPopUpToOpen("signInButton");		// WebElement frame = driver.findElement(By.id("authFrame"));		// driver.switchTo().frame(frame);		if (loginPage.isFieldPresent("userNameEdit")) {			loginPage.populateField("userNameEdit", userName);			loginPage.populateField("passwordEdit", passWord);			loginPage.click("loginButton");			Util.sleep(15000);			emailPage.waitForFieldPresent("searchEdit");		}		if (loginPage.isFieldPresent("userNameSelect")) {			loginPage.populateField("userNameSelect", userName);			loginPage.populateField("passwordEdit", passWord);			loginPage.click("loginButton");			Util.sleep(15000);			emailPage.waitForFieldPresent("searchEdit");		}	}	public String searchForCMWelcomeKit(String cmEmail) throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithEmailVerification();		Page_ loginPage = customerPortal.getLoginPage();		Page_ emailPage = customerPortal.getEmailPage();		final int interval = 3000;		int timeout = CustomerPortalConstants.EMAIL_WAIT_TIMEOUT;		boolean received = false;		long startTime = System.currentTimeMillis();		long endTime = startTime + timeout;		String CMPassword = null;		Util.printInfo("Waiting for email to appear...");		while (System.currentTimeMillis() < endTime) {			emailPage.populateField("searchEdit", cmEmail);			Util.sleep(1000);			emailPage.click("goButton");			Util.sleep(15000);			if (emailPage.isFieldPresent("emailMessage")) {				received = true;				Util.printInfo("received the email");				Util.printInfo("Email has been received");				Util.printInfo("Drilldown on the email to get the password for the CM to login into Customer Portal");				emailPage.clickAndWait("emailMessage", "passwordInEmail");				CMPassword = emailPage.getValueFromGUI("passwordInEmail");				break;			} else {				Util.sleep(interval);			}		}		if (!received) {			Util.printInfo("Did not receive the email even after waiting for"+ (timeout / 1000) + " seconds");			Util.printInfo("--------------Trying to reset the password from customer portal ----------------");			CMPassword = "Not yet set";		}		return CMPassword;	}	public boolean searchForPasswordResetEmailAndResetPassword(String cmEmail , String cmPassword) throws Exception {		String passwordResetURL;		boolean passwordReset = false;		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithEmailVerification();		Page_ loginPage = customerPortal.getLoginPage();		Page_ emailPage = customerPortal.getEmailPage();		final int interval = 3000;		int timeout = CustomerPortalConstants.EMAIL_WAIT_TIMEOUT;		boolean received = false;		long startTime = System.currentTimeMillis();		long endTime = startTime + timeout;		String CMPassword = null;		Util.printInfo("Waiting for email to appear...");		while (System.currentTimeMillis() < endTime) {			emailPage.populateField("searchEdit", cmEmail);			Util.sleep(2000);			emailPage.click("goButton");			Util.sleep(15000);			if (emailPage.isFieldPresent("emailMessageForPasswordReset")) {				received = true;				Util.printInfo("received the email");				Util.printInfo("Email for Password reset has been received");				Util.printInfo("Drilldown on the email to get the Link to reset the Password for Customer Portal");				emailPage.clickAndWait("emailMessageForPasswordReset", "resetPasswordLink");				Util.sleep(10000);				passwordResetURL = emailPage.getAttribute("resetPasswordLink", "href");				open(passwordResetURL);				Util.sleep(5000);				loginPage.populateField("newPassword", cmPassword);				loginPage.populateField("confirmPassword", cmPassword);				loginPage.clickAndWait("saveResetPassword", "passwordChangeConfirmation");				Util.sleep(5000);				Util.printInfo("Changed the password to : " + cmPassword);				passwordReset = true;				break;			} else {				Util.sleep(interval);			}		}		if (!received) {			Util.printInfo("Did not receive the email for resetting password even after waiting for"+ (timeout / 1000) + " seconds");			EISTestBase.fail("Did not receive the email for resetting password even after waiting for"+ (timeout / 1000) + " seconds. " + " Hence cannot proceed further");			passwordReset = false;		}		return passwordReset;	}	public boolean resetPasswordfromCustomerPortal(String userName) throws Exception {		boolean passwordReset=false;		CustomerPortal customerPortal = utilCreateMyAutodeskPortal();		Page_ loginPage = customerPortal.getLoginPage();		Page_ homePage = customerPortal.getHomePage();		loginPage.populateField("userName", userName);		loginPage.click("forgotPasswordLink");		Util.sleep(3000);		loginPage.populateField("userName", userName);		loginPage.click("continueButton");		Util.sleep(5000);		if (loginPage.isFieldPresent("passwordResetConfirmation")) {			Util.printInfo("Password has been reset and sent to sst mail box.");			Util.printInfo("Will Check the sst mail and reset the password to Password1");			passwordReset=true;		}		if (loginPage.isFieldPresent("passwordResetFailure")) {			Util.printInfo("The user name : " + userName +" has thrown an error message : " + "The Autodesk ID or e-mail address is not associated with an Autodesk Account");			passwordReset=false;			EISTestBase.fail("Not able to Reset the password");		}		return passwordReset;	}	public void logoutOfSSTMail() throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithEmailVerification();		Page_ loginPage = customerPortal.getLoginPage();		Page_ emailPage = customerPortal.getEmailPage();		emailPage.click("logOut");		loginPage.waitForFieldPresent("passwordEdit");	}	/**	 * Selects the default CustomerPortal app from the SFDC app chooser.	 */	@Override	protected final void chooseApp() {		// chooseApp(CustomerPortalConstants.DEFAULT_CEP_APP);	}	protected void custPortallogin(String userName, String password,			boolean launch) {		Page_ portalLandingPage = createCommonPage("PAGE_PORTAL_LANDING_PAGE_PROPERTIES_FILE");		if (launch) {			launchSalesforce();		}		mainWindow.select();		loginPage.populateField("username", userName);		loginPage.populateField("password", password);		loginPage.click("loginButton");		portalLandingPage.waitForFieldPresent("privacyPolicy");		handleServerMaintenanceNotification();		// Deal with possible pop-ups, such as Reminders		Util.sleep(2000);		if (loginPage.closeAllPopUps(mainWindow.getLocator())) {			disableReminders();		}		mainWindow.select();		Util.printInfo("Logged in as the partner user '" + userName + "'");	}	protected void custPortallogin(String userName, String password) {		custPortallogin(userName, password, false);	}	protected void custPortallogin(boolean launch) {		custPortallogin(getPartnerUserName(), getPartnerPassword(), launch);	}	protected void custPortallogin() {		custPortallogin(getPartnerUserName(), getPartnerPassword(), false);	}	protected final void setEnvironmentVariables() {		String jobName = testProperties.getConstant("JENKINS_JOB_NAME");		switch (getEnvironment().trim().toUpperCase()) {		case "DEV": {			if (!CustomerPortalConstants.BASE_URL_DEV.isEmpty()) {				setBaseURL(CustomerPortalConstants.BASE_URL_DEV);			}			setAutoUserName(CustomerPortalConstants.AUTO_USERNAME_DEV);			setAutoPassword(CustomerPortalConstants.AUTO_PASSWORD_DEV);			break;		}		case "STG":		default: {			if (!CustomerPortalConstants.BASE_URL_STG.isEmpty()) {				setBaseURL(CustomerPortalConstants.BASE_URL_STG);			}			/*			 * ArrayList<String> parameterizedJobs =			 * EISTestBase.getParameterizedJobs();			 * Util.printInfo("parameterizedJobs----"+parameterizedJobs.get(0));			 * Util.printInfo("job name----"+jobName);			 * if(parameterizedJobs.contains(jobName)){			 * 			 * Util.printInfo("Inside parameterization----"); ReadExcel excel =			 * new ReadExcel(); List loginDetails; try { loginDetails =			 * excel.readExcel(); setAutoUserName((String) loginDetails.get(0));			 * setAutoPassword((String) loginDetails.get(1)); } catch			 * (IOException e) { // TODO Auto-generated catch block			 * e.printStackTrace(); }			 * 			 * }else{ Util.printInfo("Inside else of parameterization----");			 * setAutoUserName(CustomerPortalConstants.AUTO_USERNAME_STG);			 * setAutoPassword(CustomerPortalConstants.AUTO_PASSWORD_STG); }			 */			setAutoUserName(CustomerPortalConstants.AUTO_USERNAME_STG);			setAutoPassword(CustomerPortalConstants.AUTO_PASSWORD_STG);		}		}	}	protected CreateFrom getInterfaceType(String createFromConstantName) {		String createFromString = "";		CreateFrom createFrom = null;		if (!createFromConstantName.trim().equalsIgnoreCase(				CustomerPortalConstants.CEP_CREATE_FROM_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.CreateFrom enumerated type is incorrect; it is '"					+ createFromConstantName					+ "' but should be '"					+ CustomerPortalConstants.CEP_CREATE_FROM_ENUM_CONSTANT_NAME					+ "'");		}		createFromString = testProperties.getConstant(createFromConstantName);		try {			createFrom = CreateFrom.valueOf(createFromString.trim()					.toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '"					+ createFromConstantName					+ "' constant ('"					+ createFromString					+ "') is not a member of the CustomerPortalConstants.CreateFrom enumerated type; valid values are: "					+ Util.valuesOfEnum(CreateFrom.class));		}		return createFrom;	}	protected CaseType getCaseType(String caseTypeConstantName) {		String caseTypeString = "";		CaseType caseType = null;		if (!caseTypeConstantName.trim().equalsIgnoreCase(				CustomerPortalConstants.CEP_CASE_TYPE_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.CaseType enumerated type is incorrect; it is '"					+ caseTypeConstantName					+ "' but should be '"					+ CustomerPortalConstants.CEP_CASE_TYPE_ENUM_CONSTANT_NAME					+ "'");		}		caseTypeString = testProperties.getConstant(caseTypeConstantName);		try {			caseType = CaseType.valueOf(caseTypeString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '"					+ caseTypeConstantName					+ "' constant ('"					+ caseTypeString					+ "') is not a member of the SSConstants.CaseType enumerated type; valid values are: "					+ Util.valuesOfEnum(CaseType.class));		}		return caseType;	}	public void findElementByXpath(String xpath) {		EISTestBase.findElementByXpathAndClick(xpath);		Util.sleep(10000);	}	/**	 * @Description Verifies if the logged user is a CM or SCoordinator	 * @return boolean	 */	public boolean checkIfLoggedUserIsCMOrSC()  {		if (homePage.isFieldPresent("users")){			return true;		}					return false;	}	public boolean verifyIfTheProductUpdatesPageIsAsExpected() {		//check if the Select All check box exists		//wait for 60 sec to appear		productUpdatePage.waitForFieldPresent("selectAllUpdatesCheckbox", 3000);		if(productUpdatePage.verifyFieldExists("selectAllUpdatesCheckbox") &&				productUpdatePage.verifyFieldExists("selectAlltextField")&&				productUpdatePage.verifyFieldExists("downloadSelectedBtn")&&				productUpdatePage.verifyFieldExists("downloadselectDropDownBtn") &&				productUpdatePage.verifyFieldExists("sortByReadOnlyText")&&				productUpdatePage.verifyFieldExists("filterField")&&				productUpdatePage.verifyFieldExists("sortByBtnDropdown")&&				productUpdatePage.verifyFieldExists("articlesUpdatesCheckbox")&&				productUpdatePage.verifyFieldExists("articlesUpdatesDrawerBtn")		    				){			return true;		}		return false;			}	public  boolean checkIfDatesAreInOrder(String[] lstDates,String dateFormatType) {				Date[] myDates= new Date[lstDates.length];		//Replace '-' with '/' for all the entries in date array		for(int i=0;i<lstDates.length;i++){			lstDates[i]=lstDates[i].replace("-", "/");		}		SimpleDateFormat dateFormat= new SimpleDateFormat(dateFormatType);		//get the dates into the array		try {			for(int i=0;i<lstDates.length;i++){				myDates[i]=dateFormat.parse(lstDates[i]);							}		} 		catch (ParseException e) {			System.out.println(e.getMessage());			Util.printInfo(e.getMessage());		}		//Now do parsing and check if the dates are in order		for(int j=0;j<myDates.length-1;j++){			// if the date at first pos is greater than second pos			if (myDates[j].compareTo(myDates[j+1])<0){				return false;			}		}		return true;	}	public void checkProductUpdateSortByFeatures(String sortByOption,String articleUpdatesGroupHeadingList) throws MetadataException {		//select Product		String[] actFilterHeadings=null;		ArrayList<String> expFiltersheading=null;		HashMap<String, Integer>countUpdates= new HashMap<>();		HashMap<String, Integer> actualGroupHeadersWithUpdatesNos= new HashMap<>();		/*		productUpdatePage.click("sortByDropdownBtn");		Util.sleep(2000);		productUpdatePage.parseFieldLocatorsTokens("selectSortbyValueInDropdown", sortByOption);		Util.printInfo("Verifying that Sortby changes upon selection");		productUpdatePage.hoverOver("selectSortbyValueInDropdown");		productUpdatePage.clickUsingLowLevelActions("selectSortbyValueInDropdown");		Util.sleep(2000);		String currentlySorted=homePage.getValueFromGUI("sortBy");		assertEquals(currentlySorted, sortByOption);*/		selectSortbyInProductUpdates(sortByOption);		//Validate the no of updates specific to the sort by value		Util.printInfo("Verify blue arrow displays for the selected Sort by options: "+sortByOption+" in Product Updates");		productUpdatePage.verifyFieldExists("filterGroupblueArrow");		EISTestBase.setVerifyCaseSensitive(false);		//		homePage.verify();	//verify that it has Autocad Products		//verify the group heading and no of updates should be matching		actFilterHeadings=productUpdatePage.getMultipleTextValuesfromField("filterGroupHeading");		Util.printInfo("Verifying the Product filter headings is grouped by the Product Name and group headings changes based on specified sortBy option : "+sortByOption);		String expFilterHeading=testProperties.getConstant(articleUpdatesGroupHeadingList);		expFiltersheading=new ArrayList<>(Arrays.asList(expFilterHeading.split(",")));		assertEqualsWithFlags(new ArrayList<>(Arrays.asList(actFilterHeadings)), expFiltersheading, true);		//Verify groupheading and meta data wrapper field displaying in the article matches like if group heading is		//AutoCAD ensure that Released text is Autocad and applies same for other options.		//For date is a special case  need to give as releaseDate and NOTE: ignore Date as the group heading s not showing correctly		if (!sortByOption.equalsIgnoreCase("date")){						productUpdatePage.parseFieldLocatorsTokens("productNameInUpdatesBox",sortByOption.toLowerCase());				String[] dataInArticleUpdates=productUpdatePage.getMultipleTextValuesfromField("productNameInUpdatesBox");			Util.printInfo("Verifying the filter group headings matches with the Product update text content in summary for the specific sortBy option : "+sortByOption);			String[] getSortbyGroupHeaders=productUpdatePage.getMultipleTextValuesfromField("filterGroupHeading");			//	assertEqualsWithFlags(new ArrayList<>(Arrays.asList(dataInArticleUpdates)), new ArrayList<>(Arrays.asList(getSortbyGroupHeaders)));		}		Util.printInfo("Verifying the Sort by filter headings is grouped with the right number of Product updates for specific sortBy option : "+sortByOption);		//For Date sort by option the keyword is different		if (sortByOption.equalsIgnoreCase("date")){			productUpdatePage.parseFieldLocatorsTokens("productUpdateSortByValues",testProperties.getConstant("SORTBYOPTIONDATETOKEN"));					}else{						productUpdatePage.parseFieldLocatorsTokens("productUpdateSortByValues",sortByOption);		}		String[] getSortbyGroupHeaders=productUpdatePage.getMultipleTextValuesfromField("productUpdateSortByValues");		//put them in hash map to count, how many hot fixes, service packs etc.. available for the user		String newFieldLocator=null;		for( int i =0;i<getSortbyGroupHeaders.length;i++){			boolean sortByOptionIsDate=false;			//for Date new logic to determine if the date is less than a weeek or 			String dateType=null;			if (sortByOption.equalsIgnoreCase("date")){								dateType=getDateType(getSortbyGroupHeaders[i], "MM/dd/yyyy");				Integer iCount=countUpdates.get(dateType);				countUpdates.put(dateType, (iCount==null?1:iCount+1));	//increment, dont use unary operators here				newFieldLocator=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("sortByGroupHeadername", dateType);				sortByOptionIsDate=true;			}else{								if (getSortbyGroupHeaders[i].equals("Service Pack")){					//then replace that with					getSortbyGroupHeaders[i]="Service pack";				}				Integer iCount=countUpdates.get(getSortbyGroupHeaders[i]);				countUpdates.put(getSortbyGroupHeaders[i], (iCount==null?1:iCount+1));	//increment, dont use unary operators here				//get the actual product updates found for specific filter. grab the number shown right after Product sub heading				//For certain locators there is case sensitive issue exists, hence doing the following way to make more dynamic				newFieldLocator=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("sortByGroupHeadername", getSortbyGroupHeaders[i]);			}			//			String noOfUpdates=productUpdatePage.getValueFromGUI("sortByGroupHeadername");			String noOfUpdates=productUpdatePage.getValueFromGUI(newFieldLocator);			noOfUpdates=noOfUpdates.replaceAll("\\(","").replaceAll("\\)","").trim();			Integer actUpdateVal=Integer.valueOf(noOfUpdates);			if(sortByOptionIsDate){								actualGroupHeadersWithUpdatesNos.put(dateType, actUpdateVal);			}else{				actualGroupHeadersWithUpdatesNos.put(getSortbyGroupHeaders[i], actUpdateVal);			}		}		assertEqualsWithFlags(countUpdates,actualGroupHeadersWithUpdatesNos);		//Verify if the Group can be collapsed or expanded by clicking on blue arrow		productUpdatePage.click("filterGroupblueArrow");		Util.printInfo("Verifying the groups can be collapsed by clicking on blue arrow button which is on the side of group headings for the SortBy option: "+sortByOption);		productUpdatePage.verifyFieldExistence("filterGroupblueArrowCollapsed",true);		//Verify whether Product updates are not shown when the group is collapsed		Util.printInfo("Verifying that the Product updates are not shown when group heading is collapsed for the specific sortBy option: "+sortByOption);		productUpdatePage.verifyFieldExistence("productUpdatesNoDisplay",true);		Util.printInfo("Verifying the groups can be expanded by clicking on blue arrow button again for the specific sortBy option: "+sortByOption);		productUpdatePage.click("filterGroupblueArrowCollapsed");		productUpdatePage.verifyFieldExistence("filterGroupblueArrow",true);		//Verify whether product updates has short and long description		//Here if there are more than one group updates in the page click on one of them under each group to check it has short and long description		int iNoOfProductUpdateGroups=getNoOfProductUpdatesWrapperGroup();		if (iNoOfProductUpdateGroups>1){			for(int i=0;i<iNoOfProductUpdateGroups;i++){								Util.printInfo("Verify that each Product update for the specific Sort by option: "+sortByOption+"  has short description in other group: "+(i+1));				//Now create a new field				String newFieldShrtDescr=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("shortDescrption", String.valueOf(i+1));				productUpdatePage.verifyFieldVisible(newFieldShrtDescr);				String newFieldLoc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("articleUpdatesDrawerBtnInOtherGroups", String.valueOf(i+1));				productUpdatePage.click(newFieldLoc);								Util.printInfo("Verify that each Product update for the specific Sort by option "+sortByOption+"  has long description in other group: "+(i+1));					String newFieldLongDescr=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("longDescription", String.valueOf(i+1));				productUpdatePage.verifyFieldExistence(newFieldLongDescr,true);				productUpdatePage.click(newFieldLoc);	//click on one of the article drawer btn to collapse the same			}		}else{			Util.printInfo("Verify that each Product update for the specific Sort by option: "+sortByOption+"  has short description");			productUpdatePage.parseFieldLocatorsTokens("shortDescrption", "1");			productUpdatePage.verifyFieldVisible("shortDescrption");			productUpdatePage.click("articlesUpdatesDrawerBtn");			Util.printInfo("Verify that each Product update for the specific Sort by option "+sortByOption+"  has long description");			productUpdatePage.parseFieldLocatorsTokens("longDescription", "1");			productUpdatePage.verifyFieldExistence("longDescription",true);			productUpdatePage.click("articlesUpdatesDrawerBtn");	//click on one of the article drawer btn	 to collapse the group		}		productUpdatePage.click("drawerOfProduct");		//Verify the groupings of the Updates are correct based on sorty by options		Util.printInfo("Verify that  meta data group wrapper fields are visible for the Updates of specific SortBy option: "+sortByOption);		//ignore duplicates		String[] actGroupedValues=productUpdatePage.getMultipleTextValuesfromField("groupWrapperFieldsVisible",true);				//productUpdatePage.verifyFieldVisible("groupWrapperFieldsNotVisible");				String getSortbyOption="GROUP"+sortByOption+"FILTERSVISIBLE";				String filterTypeConst=testProperties.getConstant(getSortbyOption);		String[] expGroupedValues=filterTypeConst.split(",");		assertEqualsWithFlags(new ArrayList<>(Arrays.asList(expGroupedValues)), new ArrayList<>(Arrays.asList(actGroupedValues)));		Util.printInfo("Verify that the meta data group wrapper fields are not visible for the product updates of specific SortBy option: "+sortByOption);		String[] actGroupedValuesNotVisible=productUpdatePage.getMultipleTextValuesfromField("groupWrapperFieldsNotVisible",true);					String notVisiblefilterTypeConst=testProperties.getConstant("GROUP"+sortByOption+"FILTERSNOTVISIBLE");		String[] expGroupedValuesNotVisible=notVisiblefilterTypeConst.split(",");		assertEqualsWithFlags(new ArrayList<>(Arrays.asList(expGroupedValuesNotVisible)), new ArrayList<>(Arrays.asList(actGroupedValuesNotVisible)),true);	}	public String getDateType(String dateValue,String dateFormat) {		try{			dateValue=dateValue.replaceAll("-", "/").trim();			SimpleDateFormat formt= new SimpleDateFormat(dateFormat);			Date date= new Date();			date= formt.parse(dateValue);			Calendar currentCalendar = Calendar.getInstance();			  			int currentWeek = currentCalendar.get(Calendar.WEEK_OF_YEAR);			  			int currentMonth= currentCalendar.get(Calendar.MONTH);					  			Calendar targetCalendar = Calendar.getInstance();			targetCalendar.setTime(date);			int targetWeek = targetCalendar.get(Calendar.WEEK_OF_YEAR);			  			int targetmonth= targetCalendar.get(Calendar.MONTH);		  			if (targetWeek<currentWeek && currentMonth==targetmonth){				return "Last week";			}			else if(targetWeek==currentWeek){				return "Recent";			}			else if(targetmonth<currentMonth && currentMonth-targetmonth==1){				return "Last month";				  			}			else{				return "Older";			}		}		catch (Exception e) {			Util.printError("Date parsing went wrong. Please check the given dates");		}		return "";	}	/**	 * @Description: This is used to login and launch the Product updates	 * @throws Exception	 */	public void GoToProductUpdatesPage() throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithProductUpdateAndEmailObject(testProperties);		loginPage = customerPortal.getLoginPage();		homePage = customerPortal.getHomePage();		productUpdatePage=customerPortal.getProductUpdatePage();		mainWindow.select();		Util.sleep(10000);		Util.printInfo("Clicking on Product & Services Tab");		homePage.click("productsAndServices");		Util.sleep(2000);		Util.printInfo("Clicking on Product Updates link");		Util.sleep(5000);		homePage.checkIfElementExistsInPage("genericLoadingIcon", 40);		homePage.click("productUpdates");		Util.sleep(15000);		//wait for 15 sec				//Check if product updates are available		//wait for a min		try {			//handle alerts if you get it			if (productUpdatePage.isAlertPresent()){				productUpdatePage.acceptAlert();			}			productUpdatePage.checkIfElementExistsInPage("articlesUpdatesCheckbox", 60);		} catch (Exception e) {	}		if (!productUpdatePage.isFieldVisible("articlesUpdatesCheckbox")){			Util.printError("No PRODUCT UPDATES ARE SHOWN IN THE PRODUCT UPDATES PAGE. HENCE FAILING THE TEST");			throw new RuntimeException("No product updates found in Product updates page. Hence exiting the test");		}	}	public void GoToPage(String MainpageName, String subPage) throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithProductUpdateAndEmailObject(testProperties);		loginPage = customerPortal.getLoginPage();		homePage = customerPortal.getHomePage();		productUpdatePage=customerPortal.getProductUpdatePage();		mainWindow.select();		Util.sleep(5000);		switch (MainpageName){		case "reporting":{			Util.printInfo("Clicking on Reporting Tab");			homePage.click("reportingPage");			Util.sleep(2000);			if(subPage.contains("byusers")){				Util.printInfo("Clicking on By Users link");				Util.sleep(5000);				homePage.checkIfElementExistsInPage("LoadingIcon", 10);				homePage.click("byUsersPage");				Util.sleep(4000);				homePage.checkIfElementExistsInPage("sharedSortLink", 60);				if (!homePage.isFieldVisible("sharedSortLink")){					Util.printError("Table with contracts are not displayed in By Users Page. By Users page not loaded.HENCE FAILING THE TEST");					throw new RuntimeException("Table with contracts are not displayed in By Users Page. By Users page not loaded.HENCE FAILING THE TEST");				}else{					Util.printInfo("By Users page is loaded sucessfully.");				}			}		}		case "users":{			Util.printInfo("Clicking on Users Tab");			homePage.click("usersPage");			Util.sleep(2000);			if(subPage.contains("manageusers")){				Util.printInfo("Clicking on Manage Users link");				Util.sleep(5000);				homePage.checkIfElementExistsInPage("LoadingIcon", 10);				homePage.click("manageUsersPage");				Util.sleep(4000);				homePage.checkIfElementExistsInPage("addUserButton", 60);				if (!homePage.isFieldVisible("addUserButton")){					Util.printError("Manage Users page is not loaded sucessfully.HENCE FAILING THE TEST");					throw new RuntimeException("Manage Users page is not loaded sucessfully.HENCE FAILING THE TEST");				}else{					Util.printInfo("Manage Users page is loaded sucessfully.");				}			}		}		}		//Check if product updates are available		//wait for a min	}	public void acceptTheAgreementPopUp(){		if (productUpdatePage.isFieldVisible("acceptTermsInDevicePage")){			productUpdatePage.click("acceptTermsInDevicePage");		}	}	public void addDeviceUnderAccessControl(){		if(!productUpdatePage.isFieldPresent("clickTheArrow")){			productUpdatePage.click("addButtonOfAccessControl");			Util.sleep(3000);			assertTrue("Selected Devices Table is Present ",productUpdatePage.verifyFieldExists("selectDevicesTable"));			productUpdatePage.check("selectDevices");			productUpdatePage.click("saveAddedDevices");		}	}	public void declineTheAgreement(){		productUpdatePage.click("deliverySettingsOnManageDevices");		Util.sleep(2000);		assertTrue("Delivery settings popup is showing up ",productUpdatePage.verifyFieldExists("DeliverySettingsPopUp"));		assertTrue("Privacy Information text is present on the delivery settings popup ",productUpdatePage.verifyFieldExists("privacyInformation"));		assertTrue("Personally Identifiable Information Agreement Link is present on the delivery settings popup ",productUpdatePage.verifyFieldExists("personalIdentificationAgreementLink"));		Util.sleep(1000);		productUpdatePage.click("personalIdentificationAgreementLink");		Util.sleep(1000);		productUpdatePage.click("declineTerms");		String ExpectedDesc=productUpdatePage.getValueFromGUI("declineDescription");		if (!EISTestBase.getAppBrowser().equalsIgnoreCase("ie")){			assertEquals(ExpectedDesc, testProperties.getConstant("DECLINE_AGREEMENT"));			}		productUpdatePage.click("closeAndGoToProfile");	}	/**	 * @Description This is used to get the how many no of product updates groups are found in the Product updates page	 * @return	 * @throws Exception	 */		public int getNoOfProductUpdatesWrapperGroup() throws MetadataException {		int iProductUpdateGroup=0;	// Default value		iProductUpdateGroup=productUpdatePage.getMultipleTextValuesfromField("NoOfUpdatesGroupWrapper").length;		return iProductUpdateGroup;	}	/**	 * @Description gets the no of available rows in Device table	 * @return	 * @throws MetadataException	 */	public int getNoOfVisibleRowsInDeviceTable() throws MetadataException{		int iDeviceRows=0;		//any filter applied in Device table the device name column should be there hence try get the no of rows available when filter is applied		String deviceColumnData=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("devicesColumnsData", "compName");		iDeviceRows=productUpdatePage.getMultipleWebElementsfromField(deviceColumnData).size();		return iDeviceRows;	}	public void mouseHover(WebElement element) throws MetadataException{		/*Actions actions = new Actions(driver);				actions.moveToElement(element).perform();					actions.perform();		Util.sleep(2000);*/		Locatable hoverTheItem= (Locatable)element;		Mouse mouse= ((HasInputDevices) driver).getMouse();		mouse.mouseMove(hoverTheItem.getCoordinates());				Util.sleep(2000);	}	/**	 * @Description Get the eligibility Restrictions attribute, if it got null then it is free update otherwise if it s NONE|CONTRACT|NOT_CONTRACT 	 * then it subscription updates	 *NOTE: Instead of array [0] the 	 * @return	 */	public void isFreeUpdatesAvailableInProductUpdates(String userEmailID,String typeOfAccount) {		Util.sleep(2000);		//The script get the eligibility restrictions , if it got 0 then it s free and pull the id for the same		//assert on the field existence to see if free prod updates are available		String jscript="var myArrays=new Array();Autodesk.app.collection.updates.each(function(update){\r" + 				"  if (update.get('eligibilityRestrictions').length==0){" +				"myArrays.push(update.get('id'));};\r" + 				"});\r return myArrays;";		Object obj= ((JavascriptExecutor)driver).executeScript(jscript);	//Fire this jscript to get the if there are any free updates		//Convert that to List		List<String> lstUpdates=(List<String>) obj;		//if the str contains the ID of the product update replace that with freeProductUpdate xpath and check if the field exists		Util.printInfo("****************************************************************************************************************");		Util.printInfo("Verify that the for "+typeOfAccount+" user Type with email id: "+userEmailID+ " contains free updates");		for(String prodID: lstUpdates){			String newFieldLoc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("freeProductUpdates", prodID);			Util.printInfo("Verifying that Free Product updates with ID:" +prodID+"  exists in the Product Update page");			productUpdatePage.verifyFieldExists(newFieldLoc);			}		Util.printInfo("****************************************************************************************************************");	}	/**	 * Description: Verifies that the Group headers font weight is bold 	 * @return	 * @throws MetadataException	 */	public boolean isFilterPanelGroupHeadersFontTextisBold() throws MetadataException {		List<WebElement> lsElements=productUpdatePage.getMultipleWebElementsfromField("filterGroupHeaders");		//now verify if the font weight is bold		boolean foundFontbold=false;		if (lsElements.size()>0){			for(WebElement wEle: lsElements){				foundFontbold=false;				String fontStyle=wEle.getCssValue("font-weight");				if (fontStyle.equalsIgnoreCase("bold") || (Integer.valueOf(fontStyle)>=700)){					foundFontbold=true;				}			}				}else{			Util.printWarning("No Filter group headings are present in the Filter panel");		}		return foundFontbold;	}	/**	 * @throws Exception 	 * @Description Verifies the Filter Panel is as expected	 */	public void verifyFilterGroupHeadersAndItsAssociatedCheckboxesFeaturesInFilterPanel() throws Exception {		//get the values from jquery if scroll bar exists it s hard to scroll down and pull the values of filter grps.		// hence inject jquery to get filter grp names			ArrayList<String> filterGroupElements=null;		List<WebElement> lsElements=productUpdatePage.getMultipleWebElementsfromField("filterGroupHeaders");		boolean foundEmptyVal=false;		for(WebElement myFilterGrp: lsElements){			if (myFilterGrp.getText().isEmpty()){				foundEmptyVal=true;			}		}		//the above lsElements unable to fetch all the elements at one shot so inject jquery		/*if(foundEmptyVal){*/		//make a default call		String jQueryScriptFilterGrp="var textEle='';;$('div[class=\"overview\"] span[role=\"label\"]').each(function(){ textEle+=','+$(this).text(); }); return textEle;";		Object obj=((JavascriptExecutor)(driver)).executeScript(jQueryScriptFilterGrp);		String filtrGrp=obj.toString().substring(1,obj.toString().length());	//remove the first ','		String[] filtGrpVal=filtrGrp.split(",");		filterGroupElements=new ArrayList<>(Arrays.asList(filtGrpVal));		/*}*/		//move scroll bar up to reset 		scrollFilterScrollBar("0px");	//do not use '0'  as it collapses the date group		//if more link displayed then click on more in filter panel and check other checkboxes		//do the following only once				if (productUpdatePage.isFieldVisible("moreBtnLinkInFilterPanelOverView")){			List<WebElement> moreBtnsInFiltepanellst=productUpdatePage.getMultipleWebElementsfromField("moreBtnLinkInFilterPanelOverView");			if (moreBtnsInFiltepanellst!=null){				String jqueryScript="$('div[class=\"overview\"] button[class=\"btn btn-link more more\"]').each(function(){ $(this).click();});";				((JavascriptExecutor)(driver)).executeScript(jqueryScript);								}				}		productUpdatePage.isFieldPresent("filterPanelOverView");		int filterScrollHeight=Integer.valueOf(productUpdatePage.getDOMAttributeOfWebElement(productUpdatePage.getCurrentWebElement(), "clientHeight"));		int newScrollhght=10;//an offset		//now click on each of the filter grp btn and see if it works as expected 		for(int i=0;i<lsElements.size();i++){			String grpName=null;			/*if (foundEmptyVal){*/			/*grpName=filterGroupElements.get(i).trim();	// as the no. of check boxes grew the filter grp names are not pulled correctly hence extrac them via jquery 			 */			/*}else{				*/			//				grpName=lsElements.get(i).getText().trim();			grpName=filterGroupElements.get(i).trim();			/*}*/			//half of scrollheight as the viewport container height is limited to 200 px and without doing half the scroll bar goes further down			//which masks the elements to visible.			newScrollhght+=(filterScrollHeight/lsElements.size());			/*not required to scroll for the first one*/			if (i>0){				scrollFilterScrollBar(String.valueOf((newScrollhght)/lsElements.size())+"px");	//if the client height of filter scroll bar is 300 and no of elements is 5 then scroll part by part like 300/5			}			//*********************************************************************************************************			Util.printInfo("Verifying that the Filter Panel contains a toggle button to the side of Filter group header: "+grpName);			String newGrpBtnFieldLoc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterGroupheaderBtns", String.valueOf(i+1));			assertTrue("The button to the side Filter group : "+grpName+" is found", productUpdatePage.verifyFieldExists(newGrpBtnFieldLoc));			Util.printInfo("Verifying that the Filter Panel contains checkboxes for specific filter group : "+grpName+" and will be unchecked by default");			String newGrpCheckboxFieldLoc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterGrpCheckboxes", grpName);			List<WebElement> grpCheckboxes=productUpdatePage.getMultipleWebElementsfromField(newGrpCheckboxFieldLoc);			for(int k=0;k<grpCheckboxes.size();k++){				//scrollIntoView of each webelement				Util.sleep(1000);	//need to wait here								productUpdatePage.scrollIntoViewOfMetadataElement(grpCheckboxes.get(k));				Util.sleep(1000);	//need to wait here				assertTrue("The checkbox: "+(k+1)+" is found under the group :"+grpName+ " is unchecked",(grpCheckboxes.get(k).isDisplayed() && !grpCheckboxes.get(k).isSelected()));			}						//*********************************************************************************************************			//			String newGrpButnFieldLoc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterGroupheaderBtns", String.valueOf(i));			Util.printInfo("Verify that the filter group header appears as collapsed when click on the button to side of Group header: "+grpName);			productUpdatePage.click(newGrpBtnFieldLoc); //now it is collapsed			List<String> lsLocators=productUpdatePage.getFieldLocators(newGrpBtnFieldLoc);			//go up the to next parent and check if it works as expected.			//need only the very first one here as we are creating the above locator on the fly.			String newParentloc=lsLocators.get(0).concat("/..");	//one level up in the html page			//grab teh parent class when the group buttn collapses the class contains collapse key			productUpdatePage.addNewFieldToExistingfieldMetadataList("newParentFieldLoc_"+grpName,  "TEXT##"+newParentloc);			boolean foundCollapse=productUpdatePage.getAttribute("newParentFieldLoc_"+grpName, "class").contains("collapsed");			assertTrue("The Group header button appeared as collapsed for : "+grpName,foundCollapse);			Util.printInfo("verify that the Checkboxes under the Group: "+grpName+" are not visible when group header is collapsed");			//check all those checkboxes under specific group are not visible.			String newCheckboxFieldloc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterGrpCheckboxes", grpName);			//this newCheckboxFieldLoc gives you the list of checkboxes under specific group			List<WebElement> lsGrpCheckbox=productUpdatePage.getMultipleWebElementsfromField(newCheckboxFieldloc);						for(int j=0;j<lsGrpCheckbox.size();j++){								//scrollIntoView of each webelement				Util.sleep(1000);	//need to wait here				productUpdatePage.scrollIntoViewOfMetadataElement(lsGrpCheckbox.get(j));				assertTrue("The checkbox : "+(j+1)+" is under the group :"+grpName+ " is not visible when collapsed",(!lsGrpCheckbox.get(j).isDisplayed()));					}						//Expand it again at the end of the loop			if (foundCollapse){				productUpdatePage.click(newGrpBtnFieldLoc); //now it is expanded			}			}		}	/**	 * @Description Mention the direction of the scroll bar either up or down	 * @param scrollPosition	 * @throws Exception	 */	public void scrollFilterScrollBar(String heightToMove) throws Exception {		scrollFilterScrollBar(heightToMove,true);	}	public void scrollFilterScrollBar(String heightToMove,boolean clickfilterScrollBar) throws Exception {		String jScriptToScroll="";		//Scroll using jscript is not rquired		/*jScriptToScroll="var ele=document.getElementsByClassName('thumb');\r" + 				"if(ele){\r" + 				"    ele[1].style.top='"+heightToMove+"';\r" + 				"}";					((JavascriptExecutor)driver).executeScript(jScriptToScroll);*/		Util.sleep(1000);		try {		 			Actions act= new Actions(driver);					heightToMove=heightToMove.replace("px", "");			if (productUpdatePage.isFieldVisible("filterScrollBar")){								/*productUpdatePage.isFieldPresent("filterScrollBar");// just to set the current web element				 */				act.dragAndDropBy(productUpdatePage.getCurrentWebElement(), 0, Integer.valueOf(heightToMove)).build().perform();				 Util.sleep(1000);			}			if(clickfilterScrollBar){				//click on scroll bar to update the status				productUpdatePage.clickUsingLowLevelActions("filterScrollBar");	//to click on the thumb to refresh			}			Util.sleep(700);		}catch (Exception e) {			//			e.printStackTrace();			Util.printError("Unable to move the filter scroll bar");			/*objDetailedReport.writeDetailedLog(objDetailedReport.Status.FAIL.toString(),"Test failed" ,e.getMessage());*/			//			throw new RuntimeException(e.getMessage());		}	}	public void selectSortbyInProductUpdates(String sortbyOption) throws MetadataException {		homePage.checkIfElementExistsInPage("genericLoadingIcon", 10);		productUpdatePage.click("sortByDropdownBtn");		Util.sleep(2000);		String newSortbyValueloc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("selectSortbyValueInDropdown", sortbyOption);		Util.printInfo("Verifying that Sortby changes upon selection");		productUpdatePage.hoverOver(newSortbyValueloc);		productUpdatePage.clickUsingLowLevelActions(newSortbyValueloc);		/*productUpdatePage.isFieldPresent("selectSortbyValueInDropdown");						//		productUpdatePage.click("selectSortbyValueInDropdown");		 */		Util.sleep(2000);		 String currentlySorted=productUpdatePage.getValueFromGUI("sortBy");				 assertEquals(currentlySorted, sortbyOption);	} 	/**	 * @Description this is used to pull the no of results for in Device filter panel	 * @return	 */	public int getNoOfFilterResultsDisplayedInDeviceFilterPanel() {		return getNoOfFilterResultsDisplayedInFilterPanel("deviceFilterPanelResults");	}	private int getNoOfFilterResultsDisplayedInFilterPanel(String fieldLocator){		int iResults=-1;		try{			if (productUpdatePage.isFieldPresent(fieldLocator)){				productUpdatePage.scrollIntoViewOfMetadataElement(productUpdatePage.getCurrentWebElement());			}			if (productUpdatePage.isFieldVisible(fieldLocator)){				String filterResults=productUpdatePage.getTextFromLink(fieldLocator);				//for no results it wil be shown empty so 				if (filterResults.isEmpty() || filterResults==""){					iResults=0;				}else{					//parse this and truncate the unwanted chars, pull only the number					//the string should be (4 results) so get the first 2 chars 					//					filterResults=filterResults.substring(0,2).replaceAll("\\(","").trim();					filterResults=filterResults.substring(0,3).replaceAll("\\(","").trim();					iResults=Integer.valueOf(filterResults);				}			}		}catch (Exception e) {			Util.printInfo("Unable to fetch the no. of filter updates in Filter Panel. Please check the metadata element property");		}		return iResults;	}	/**	 * @Description This is used to pull the filter results in Prod updates filer panel 	 * @return	 */	public int getNoOfFilterResultsDisplayedInFilterPanel() {		return getNoOfFilterResultsDisplayedInFilterPanel("filterProdUpdatesResults");	}	public int getNoOfProductUpdatesDisplayedInPage() {		int iProdUpdates=0;		try {			String[]  arrPrdUpdatesNumber=productUpdatePage.getMultipleTextValuesfromField("productGroupupdatesNumber");			for(int i=0;i<arrPrdUpdatesNumber.length;i++){				arrPrdUpdatesNumber[i]=arrPrdUpdatesNumber[i].replaceAll("\\(", "").replaceAll("\\)","").trim();				iProdUpdates+=Integer.valueOf(arrPrdUpdatesNumber[i]);			}		} catch (Exception e) {			Util.printInfo("Unable to fetch the no. of Product updates in Product updates Page. Please check the metadata element property");		}		return iProdUpdates;	}	/**	 * @Description This used to verify the if the exp list contains the items in Actual list. This is return to ignore case sensitive issues	 * @param expList	 * @param actList	 * @return	 */	public boolean checkIfExpListContainsTheActualItems(List<String> expList,List<String> actList) {		int itemsMatched=0; 		//ignore keywords like Autodesk as suffix		String expKeyWord="Autodesk";		for(String expStr: expList){					expStr=expStr.replaceAll(expKeyWord, "").trim();			for(String actStr:actList){				actStr=actStr.replaceAll(expKeyWord, "").trim();				if(expStr.equalsIgnoreCase(actStr)){										itemsMatched++;  //THis number should match with the no of items in actList				}			}		}		if(itemsMatched==actList.size()){			return true;		}		return false;	}	public void verifyClearFiltersFunctionalityForAllFilterGroups(String[] filterOptions ) throws Exception{		ArrayList<String> lsactgrpFacetOptions= null;		ArrayList<String> lsexpGrpFacetoptions=null;		ArrayList<String> lsActGrpHeaders= null;		ArrayList<String> lsactProdUpdFacetOptNames=null;		ArrayList<String> lstFilterPillBtns=null;		String filterSelectedGrpName=null;		String appliedFilterslabel=testProperties.getConstant("APPLIEDFILTERSTEXT");		//get the no.of check boxes this is used to scroll the vscroll bar in the filter panel		homePage.checkIfElementExistsInPage("genericLoadingIcon", 20);		Util.printInfo("Verifying that clicking on Filters button the filter panel to get the no of checkboxes");		productUpdatePage.click("filterField");		List<WebElement> allFilterCheckboxes=productUpdatePage.getMultipleWebElementsfromField("allFilterCheckboxes");		int noofChecboxes=allFilterCheckboxes.size();		int newScrollhght=25;//an offset			for (int k=0;k<filterOptions.length;k++){			Util.printInfo("**************************************************************************************");			Util.printInfo("Verifying the filters functionality for :+ " +filterOptions[k]+" filter group");			filterSelectedGrpName=filterOptions[k];			String sortByOption=filterSelectedGrpName;							//		select Sort by field as Date			Util.printInfo("Select the Sort by Option as '"+filterOptions[k]+"'");					selectSortbyInProductUpdates(sortByOption);			Util.printInfo("Verifying that clicking on Filters button the filter panel shows up");			productUpdatePage.click("filterField");			//first get the no.of updates are showing up for specific sort by option					int iNoOfUpdates= getNoOfProductUpdatesWrapperGroup();			//				scrollFilterScrollBar("0px");	//scroll to beginning..							productUpdatePage.isFieldPresent("filterPanelOverView");			int filterScrollHeight=Integer.valueOf(productUpdatePage.getDOMAttributeOfWebElement(productUpdatePage.getCurrentWebElement(), "clientHeight"));			String scrollbarHeight=productUpdatePage.getCssPropertyValue("filterScrollBar", "height");			scrollbarHeight=scrollbarHeight.replace("px", "").trim();							int heightofScrollbar=new Double(scrollbarHeight).intValue();			//get the thumb scroll bar height if the newScrollhght is greater than thumb scroll bar height then scroll down			newScrollhght+=(filterScrollHeight/noofChecboxes);	//assuming there are 5 types of filters			if (newScrollhght>heightofScrollbar){					//move the filter based on the diff between				int moveScrollheight=newScrollhght-heightofScrollbar;				scrollFilterScrollBar(String.valueOf(moveScrollheight));	//if the client height of filter scroll bar is 300 and no of elements is 5 then scroll part by part like 300/5									}			assertTrue("The Filter Panel is displayed when clicked on Filter button",productUpdatePage.verifyFieldExists("filterPanelHeader"));			//get the no of updates and check if the no of checkboxes matches under the specific group			Util.printInfo("Verifying that the total no. of checkboxes displayed under Filter group: "+filterSelectedGrpName+" in Filter Panel matches with Product updates shown for Sort by option: "+sortByOption);			String newFilterGrouploc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterGrpCheckboxes", sortByOption);			List<WebElement> noOfCheckboxesInFilterPanel=productUpdatePage.getMultipleWebElementsfromField(newFilterGrouploc);			assertTrue("The number of checkboxes displayed under the Filter group: "+filterSelectedGrpName+" in Filter Panel matches with product updates shown for Sort by option: "+sortByOption, (noOfCheckboxesInFilterPanel.size()==iNoOfUpdates));			//get the facet -option name in the filter panel matches with Product updates groups			Util.printInfo("Verify that the Filter facet option names for specific filter Group: "+ filterSelectedGrpName+" should be as expected");			String filterCheckbxFacetoptNames=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filtercheckboxfacetOptionNames", filterSelectedGrpName);			lsactgrpFacetOptions=new ArrayList<>(Arrays.asList(productUpdatePage.getMultipleTextValuesfromField(filterCheckbxFacetoptNames)));			//get the expected DATEFILTERGROUPFACETOPTIONNAMES			lsexpGrpFacetoptions=new ArrayList<>(Arrays.asList(testProperties.getConstant(filterSelectedGrpName.toUpperCase()+"FILTERGROUPFACETOPTIONNAMES").split(",")));			//pull from the filter options so that list of prods verification shldnt be tagged to any user account			assertEqualsWithFlags(lsactgrpFacetOptions,lsexpGrpFacetoptions,true);			Util.printInfo("Verify that the list of Product updates specific to Sort by option :"+sortByOption+" should match with available filters for Filter group: "+filterSelectedGrpName);			String[] lsGroupHeaders=productUpdatePage.getMultipleTextValuesfromField("filterGroupHeading");			ArrayList<String> lstactualProductUpdategrpHeadings= new ArrayList<>(Arrays.asList(lsGroupHeaders));			EISTestBase.setVerifyCaseSensitive(false);			///# only for products in updates page , there is mismatch for the filter grps heading and prod group in updates page, as an extra tag 'autocad' is added to filter grp heading but not to prod update grps			//NOTE: for only the products there was mismatch in in case of product names but it is good in STG hence added getEnvironment cond logic here to pull only from 			if (sortByOption.equalsIgnoreCase("product") && getEnvironment().equalsIgnoreCase("DEV")){				/*ArrayList<String> lsexpProdUpdategrpHeading=new ArrayList<>(Arrays.asList(testProperties.getConstant("PRODUCTGROUPNAMES").split(",")));*/									ArrayList<String> lsexpProdUpdategrpHeading=new ArrayList<>(Arrays.asList(testProperties.getConstant("DEVPRODUCTGROUPNAMES").split(",")));				assertEqualsWithFlags(lsexpProdUpdategrpHeading,lstactualProductUpdategrpHeadings);			}else{				assertEqualsWithFlags(lsactgrpFacetOptions,lstactualProductUpdategrpHeadings,true);			}			//now verify when checked the results should be filtered			ArrayList<String> filterFaceOptionsNames=new ArrayList<>();					boolean filterApplied=false;			String facetOptionName="";			for(int i=0;i<lsactgrpFacetOptions.size();i++){				filterApplied=false;				String facetOptName=lsactgrpFacetOptions.get(i);;				if(i>0){					facetOptionName=facetOptionName+","+facetOptName;				}else{								facetOptionName=facetOptName;				}				filterFaceOptionsNames.add(facetOptName);	//put into the list				String newFilterChckbox= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterChckboxWithFaceName", filterSelectedGrpName,facetOptName);				//check only filtered results are only showing up				/* if (sortByOption.equalsIgnoreCase("product")){					 scrollFilterScrollBar("140px");					 	//dont do scrollintoview the ui gets distorted				 }*/				productUpdatePage.check(newFilterChckbox);				Util.printInfo("Verify that only filtered Product updates are displayed for specific filtered check box:"+facetOptionName);				int iFilteredNoOfUpdates = getNoOfProductUpdatesWrapperGroup();				String[] prodUpdateGrpName=productUpdatePage.getMultipleTextValuesfromField("filterGroupHeading");				ArrayList<String> lsProdUpdateGrpheadings= new ArrayList<>(Arrays.asList(prodUpdateGrpName));				assertTrueWithFlags("Product Updates", facetOptionName+": Filter Checkbox", "fitered Product updates should be displayed correctly based on the selected Filter options",						(prodUpdateGrpName.length==iFilteredNoOfUpdates)						&& 				  						checkIfExpListContainsTheActualItems(lsProdUpdateGrpheadings,filterFaceOptionsNames));				//check if the applied filters no of results should match with Filter panel and product updates group number				Util.printInfo("Verify that the no of filter results in Filter panel matches with the number of product updates displayed"); 				int igetNoOfFilterResults=getNoOfFilterResultsDisplayedInFilterPanel();				int iactNoOfProdUpdates=getNoOfProductUpdatesDisplayedInPage();				assertEquals(iactNoOfProdUpdates, igetNoOfFilterResults);				//check Applied Filters label is showing up				Util.printInfo("Verify that Applied filters pill header displayed for the selected Filter group: "+filterSelectedGrpName);				productUpdatePage.isFieldPresent("appliedFiltersLabel");				productUpdatePage.scrollIntoViewOfMetadataElement(productUpdatePage.getCurrentWebElement());				String appFiltersLabel=productUpdatePage.getTextFromLink("appliedFiltersLabel");				appFiltersLabel=appFiltersLabel.substring(0,appFiltersLabel.length()-1); //remove ":"				assertTrue("The Applied filter pill header is displayed for Filter group: "+filterSelectedGrpName,appFiltersLabel.equalsIgnoreCase(appliedFilterslabel));				//now verify if the applied filters pill is showing up				Util.printInfo("Verify that, for the Filter group: "+filterSelectedGrpName + ", applied filter pill item for the checked filter checkbox is displayed on Applited filters row in Product updates page");				String[] actprodUpdateFacetoptionsNames=productUpdatePage.getMultipleTextValuesfromField("appliedFiltersFacetOptNames");				lsactProdUpdFacetOptNames=new ArrayList<>(Arrays.asList(actprodUpdateFacetoptionsNames));				assertEqualsWithFlags(lstactualProductUpdategrpHeadings, filterFaceOptionsNames,true);				filterApplied=true;			}			//start unchecking all the pills i.e applied filters and see the gui update according to that.'			if(filterApplied){				facetOptionName="";							for(int i=0;i<filterFaceOptionsNames.size();i++){					String facetOptName=filterFaceOptionsNames.get(i);					if(i>0){						facetOptionName=facetOptionName+","+facetOptName;					}else{											facetOptionName=facetOptName;					}					Util.printInfo("Verify that The check box :"+facetOptionName+" in the Filter Panel should be unchecked when the user clicks on "+facetOptionName+" pill close button in Applied filters row");					String filterPillLoc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("allAppFiltersFacetOptsCloseBtn", facetOptName);								productUpdatePage.click(filterPillLoc);//click on close btn of the pill on applied filter row								String newFilterChckbox= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterChckboxWithFaceName", filterSelectedGrpName,facetOptName);					assertFalse("The check box(s) :"+facetOptionName+ " in the Filter Panel should be unchecked when the user clicks on "+facetOptionName+" pill close button(s) in Applied filters row",							productUpdatePage.isChecked(newFilterChckbox));					//check the results gets updated accordingly.					Util.printInfo("Verify that when unchecked the filters in the filter panel, the no of Filter results in Filter panel matches with the number of product updates displayed");					//when unchecked all of them no results will be shown					int igetNoOfFilterResults=getNoOfFilterResultsDisplayedInFilterPanel();					if (igetNoOfFilterResults>0){											int iactNoOfProdUpdates=getNoOfProductUpdatesDisplayedInPage();						assertEquals(iactNoOfProdUpdates, igetNoOfFilterResults);					}				}				//now verify if clearAll works as expected				facetOptionName="";				for(int i=0;i<filterFaceOptionsNames.size();i++){			 						String facetOptName=filterFaceOptionsNames.get(i);					if(i>0){						facetOptionName=facetOptionName+","+facetOptName;					}else{											facetOptionName=facetOptName;					}					String newFilterChckbox= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterChckboxWithFaceName", filterSelectedGrpName,facetOptName);					//Check all the check boxes now under the group and check if clear all works as expected					//as the view distored in IE so bad, so scrollinot view					if (getAppBrowser().equalsIgnoreCase("ie")){						productUpdatePage.isFieldPresent(newFilterChckbox);						productUpdatePage.scrollIntoViewOfMetadataElement(productUpdatePage.getCurrentWebElement());					}					productUpdatePage.check(newFilterChckbox);				}				//This clears all the selections done before and verify none of the pills shld display and checkboxes shld be unchecked				//****************CLEAR ALL functionality************************************************				productUpdatePage.click("filterPanelClearAllBtn");					Util.printInfo("Verify that the applied filter pill items are not showing up on Applited filters row in Product updates page when clicked on Clear All link for Filter group: "+filterSelectedGrpName);				assertFalse("The applied filter pills should not displayed",productUpdatePage.isFieldPresent("appliedFiltersFacetOptNames"));				Util.printInfo("Verify that the Filter panel results are not displayed when clicked on Clear All link for Filter group: "+filterSelectedGrpName);				int igetNoOfFilterResults=getNoOfFilterResultsDisplayedInFilterPanel();				assertFalse("The Filter Panel results should not displayed",(igetNoOfFilterResults>0)?true:false);				//iterate again through the loop and check if filter checkboxes are unchecked when clear all is clicked				facetOptionName="";				for(int i=0;i<filterFaceOptionsNames.size();i++){					String facetOptName=filterFaceOptionsNames.get(i);;;					facetOptionName=filterFaceOptionsNames.get(i);						Util.printInfo("Verify that The check box :"+facetOptionName+" in the Filter Panel should be unchecked when the user clicks on 'Clear All' link for the filter Group :"+filterSelectedGrpName);					String newFilterChckbox= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("filterChckboxWithFaceName", filterSelectedGrpName,facetOptName);					assertFalse("The check box(s) :"+facetOptionName+ " in the Filter Panel should be unchecked when the user clicks on 'Clear All' link for the filter Group :"+filterSelectedGrpName,							productUpdatePage.isChecked(newFilterChckbox));				}			}			else{				Util.printError("Something went wrong while applying the Filters for Filter group: " +filterSelectedGrpName);				throw new RuntimeException("Something went wrong while applying the Filters for Filter group: " +filterSelectedGrpName);							}			//Verify the More or Less functionality in Filters Panel  do this for the last one			if (k==filterOptions.length-1){				//drag the filter scroll bar up to the beginning				scrollFilterScrollBar("-110px");				//NOTE: do this only for the last item in filterOPtions list							//IF the Client Width is more than 422px then the row expands and the other added to the next row				List<WebElement> myCheckboxes=productUpdatePage.getMultipleWebElementsfromField("allFilterCheckboxes");								for(int cb=0;cb<myCheckboxes.size();cb++){					//scroll each element and check it					productUpdatePage.scrollIntoViewOfMetadataElement(myCheckboxes.get(cb));					myCheckboxes.get(cb).click();	//keep checking check boxes								}				productUpdatePage.click("filterField");				Util.sleep(1000);								productUpdatePage.isFieldPresent("appliedFiltersPresentationArea");				productUpdatePage.scrollIntoViewOfMetadataElement(productUpdatePage.getCurrentWebElement());				String btnMoreLinkLoc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("btnMoreLessLinkOnFiltersRow","More");									//As the filter pill width would vary so remove some offset in px i.e verify if clienWidth > 300px				if (productUpdatePage.isFieldVisible(btnMoreLinkLoc)){					Util.printInfo("The Applied Filters presentation area contains More or Less button links");					assertTrueWithFlags("The button More link should be seen on Applied Filters row", productUpdatePage.isFieldPresent(btnMoreLinkLoc));					//now find out how many filters are showing up in the first row of Applied filters					int visibleElements=productUpdatePage.getMultipleWebElementsfromField("visibleAppFilters").size();					//So the no of elements which are not seen in the first row is visibleElements-checkboxes.size					Util.printInfo("Verify No of Filters resulting number to the side of More link button");					int expInvisibleElements=myCheckboxes.size()-visibleElements;					String moreBtnLinkText=productUpdatePage.getValueFromGUI(btnMoreLinkLoc);					int actInvisibleEle=0;					if (moreBtnLinkText.length()>1){						actInvisibleEle=Integer.valueOf(moreBtnLinkText.substring(0,1));	//the very first char is the number					}					assertTrue("The No of Filters resulting number on More link button ", actInvisibleEle==expInvisibleElements);										//Also check the remaining filters are not visible					//the filters which are hidden the style attribute is 'list-item'					Util.printInfo("Verify that the hidden filters on Applied filters row are not seen");					String hiddenLoc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("hiddenAppliedFilters","list-item");					assertFalseWithFlags("The hidden Filters should not be seen on Applied Filters row",productUpdatePage.isFieldVisible(hiddenLoc));					Util.printInfo("Clicking on button More link");					//Now click on more btn link see that less btn link is found					productUpdatePage.click(btnMoreLinkLoc);					Util.printInfo("Verify that the Less button link is displayed");					String btnLessLinkloc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("btnMoreLessLinkOnFiltersRow","Less");					assertTrueWithFlags("The button Less link should be seen on Applied Filters row", productUpdatePage.isFieldPresent(btnLessLinkloc));					//the hidden applied filters shld be seen now					Util.printInfo("Verify that the hidden filters on Applied filters row should be visible");					assertTrueWithFlags("The hidden Filters should be seen on Applied Filters row",productUpdatePage.isFieldVisible(hiddenLoc));					Util.printInfo("Clicking on Clear all button link on Applied filters row");					//Click on Clear all link see that all the filters gone					productUpdatePage.click("appliedFilterClearAllLink");						Util.printInfo("Verify that the Applied filters row should not visible");					assertFalseWithFlags("The Applied Filters row should not be seen",productUpdatePage.isFieldVisible("appliedFiltersLabel"));				}else{					Util.printInfo("The Applied Filters presentation area does not have More and Less button links ");					assertFalseWithFlags("The button More link should not be seen on Applied Filters row", productUpdatePage.isFieldVisible(btnMoreLinkLoc));				}			}			//not required for the last one			if (k!=filterOptions.length-1){				logoutMyAutodeskPortal();				LoginAndGoProductUpdatesPage();			}		}	}	public void genericLoginForRover() throws Exception{		String USERNAME="";		String PASSWORD="";		if (System.getProperty("UserName_jenkins")!=null && System.getProperty("Password_jenkins")!=null){						System.out.println("Found creds from jenkins");			System.out.println("************************************************************************************");			System.out.println("Data From Jenkins" );			System.out.println("UserName:"+System.getProperty("UserName_jenkins"));			System.out.println("Password:"+System.getProperty("Password_jenkins") );			System.out.println("************************************************************************************");			loginAsMyAutodeskPortalUser(System.getProperty("UserName_jenkins"),System.getProperty("Password_jenkins"));		}else{			if (getEnvironment().equalsIgnoreCase("dev")) {				USERNAME = testProperties.getConstant("USERNAME");								PASSWORD = testProperties.getConstant("PASSWORD");			} else if (getEnvironment().equalsIgnoreCase("stg")) {				USERNAME = testProperties.getConstant("USERNAME");				PASSWORD = testProperties.getConstant("PASSWORD");			}			//for iterations the login page might not appear and it redirects directly prod updates page			loginAsMyAutodeskPortalUser(USERNAME ,PASSWORD);			}	}	public void genericLoginForRover(String userName,String passWord) throws Exception{		loginAsMyAutodeskPortalUser(userName ,passWord);		}	public void LoginAndGoProductUpdatesPage() throws Exception {		genericLoginForRover();		GoToProductUpdatesPage();			}	public void LoginAndGoProductUpdatesPage(String userName,String passWord) throws Exception {		genericLoginForRover(userName,passWord);		GoToProductUpdatesPage();			}	/**	 * @Description: This is used to go to Login and go to the Manage Devices tab	 * @throws Exception	 */	public void LoginAndGoToManageDevicesPage() throws Exception {		genericLoginForRover();		goToManageDevicePage();	}	public void goToManageDevicePage() throws Exception {		CustomerPortal customerPortal = utilCreateMyAutodeskPortalWithProductUpdateAndEmailObject(testProperties);		loginPage = customerPortal.getLoginPage();		homePage = customerPortal.getHomePage();		productUpdatePage=customerPortal.getProductUpdatePage();		mainWindow.select();		homePage.checkIfElementExistsInPage("genericLoadingIcon", 40);		Util.sleep(5000);		Util.printInfo("Clicking on Devices Tab");		Util.sleep(10000);		homePage.checkIfElementExistsInPage("genericLoadingIcon", 40);		if (!productUpdatePage.isFieldPresent("manageDevicesTab")){			EISTestBase.fail("No Devices tab is found, Hence exiting the test");		}				productUpdatePage.waitForFieldVisible("manageDevicesTab","50");		productUpdatePage.click("manageDevicesTab");		Util.sleep(4000);				if(productUpdatePage.isFieldVisible("acceptTermsInDevicePage")){						productUpdatePage.click("acceptTermsInDevicePage");		}		homePage.checkIfElementExistsInPage("genericLoadingIcon", 30);		//See that Managed Devices page is properly launched		if (productUpdatePage.checkIfElementExistsInPage("manageDevicesText", 50)){			Util.printInfo("The Manage Devices page is launched properly");		}else{			Util.printError("No MANAGE DEVICES ARE SHOWN IN THE MANAGE DEVICES PAGE. HENCE FAILING THE TEST");			throw new RuntimeException("No Manage devices are found in the Devices page. Hence exiting the test");		}	}	public void LoginAndGoToManageDevicesPage(String userName, String passWord) throws Exception {		genericLoginForRover(userName,passWord);		goToManageDevicePage();	}	public boolean waitForThePageToLoad() {		/*Better to wait for 60 sec this is not required to parameterize*/		boolean pageLoaded=false;		try {			WebDriverWait myWait= new WebDriverWait(driver, 60,1000);						//WHy this field is: this field is pretty much available for all types of accounts.if this is loaded properly then entire page woul dhave rendered correctly			List<String> fieldLoc=homePage.getFieldLocators("productsAndServices");			for(String myLoc: fieldLoc){				//Always go with the list of elements it much safer than just a webelement				List<WebElement> pageLoadedElements=myWait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.xpath(myLoc)));				if (pageLoadedElements.size()>0 && pageLoadedElements!=null){					pageLoaded=true;				}			}		} catch (Exception e) {			Util.printWarning("Unable to wait for the page to load");		}		return pageLoaded;	}	/**	 * @Description This is used to verify if the functionality of Access control settings	 * @throws Exception	 */	public void verifyAccessControlSettingsInProductUpdates() throws Exception {		List<WebElement> lsDrawerBtnElements=null;		String accessControlSettingOption=null;		//check for all the updates listed in the div		String dropDownText=testProperties.getConstant("ACCESSCONTROLDROPDOWNTEXT");		lsDrawerBtnElements=productUpdatePage.getMultipleWebElementsfromField("articlesUpdatesDrawerBtn");		//for each prod update check the access control button		int update=1;		for(WebElement myDrawerBtn: lsDrawerBtnElements){			//if the browser is chrom click using javascript			if (EISTestBase.getAppBrowser().equalsIgnoreCase("chrome")){								((JavascriptExecutor)(driver)).executeScript("arguments[0].click();",myDrawerBtn);			}else{				myDrawerBtn.click();			}			//wait for some time			Util.sleep(2000);			Util.printInfo("******************VERIFY THE ACCESS CONTROL BUTTON FEATURES FOR UPDATE :"+update+"**************");						Util.printInfo("Verify if the Access control button is displayed");			productUpdatePage.verifyFieldVisible("accessControlButton");			Util.printInfo("Clicking on the Access Control button");			productUpdatePage.click("accessControlButton");			//check if the access control has menu			Util.printInfo("Verify that the drop down is displayed when the user clicked on Access Control button");			Util.sleep(2000);			productUpdatePage.waitForFieldVisible("accessControlElements", 80000);			assertTrue("The drop down menu under Access control button should be visible when clicked on it", productUpdatePage.isFieldVisible("accessControlDropDownMenu"));			Util.sleep(8000);			Util.printInfo("Verify that the tool tip icon is displayed on Access Control button");			assertTrue("The tool tip icon is displayed on Access Control should be visible", productUpdatePage.isFieldVisible("accessControlToolTipIcon"));			Util.printInfo("Verify that the drop down Menu text content is as expected");			//verify the text on drop down menu			Util.sleep(2000);			productUpdatePage.waitForFieldVisible("accessControlElements", 40000);			String actualAccessControlDropdownMenutext=productUpdatePage.getValueFromGUI("accessControlElements");			actualAccessControlDropdownMenutext=actualAccessControlDropdownMenutext.replaceAll("\\n", "").replaceAll("\\r","").replace(":", "").replace(",,", ",");			//replace the numbers like only selected 			actualAccessControlDropdownMenutext=actualAccessControlDropdownMenutext.replaceAll("\\d+", "0");			if(actualAccessControlDropdownMenutext.startsWith(",")){								actualAccessControlDropdownMenutext=actualAccessControlDropdownMenutext.substring(1, actualAccessControlDropdownMenutext.length());			}			Util.sleep(3000);			System.out.println(actualAccessControlDropdownMenutext + "actual DD text ");			System.out.println(dropDownText+ ": Expected Text ");			assertTrue("The access control drop down menu text content should match with expected content", actualAccessControlDropdownMenutext.equalsIgnoreCase(dropDownText));			//mouse hover on the tool tip icon			productUpdatePage.hoverOver("accessControlToolTipIcon");			Util.printInfo("Verify that the tool tip content is as expected");			String expTooltipContent=testProperties.getConstant("ACCESSCONTROLTOOLTIPTEXT");			//remove the line feed and carriage line feeds			//pull the content using 			String actToolTipContent=productUpdatePage.getValueFromGUI("accessControlToolTipContent");			if (actToolTipContent.isEmpty()){				//try with jscript				Object obj=((JavascriptExecutor)(driver)).executeScript("return $('article[class$=\"expanded\"]').find('div[class=\"tooltip-content\"]').text();");				actToolTipContent=obj.toString().trim();			}			actToolTipContent=actToolTipContent.replace("\r", "");			actToolTipContent=actToolTipContent.replace("\n", "");			Util.sleep(2000);			assertTrueWithFlags("The tool tip content in access control menu should match with expected content",expTooltipContent.equalsIgnoreCase(actToolTipContent));			//Check whether Add link exists			Util.printInfo("Verify that 'Add' link button exists under the access control button");			assertTrueWithFlags("The Add button link exists under the Access control button",productUpdatePage.isFieldVisible("accessControlAddDev"));			String deviceOptions=testProperties.getConstant("ACCESSCONTROLDEVICEDYNAMICLOCATORS");			String[] devicesDynamicLocators= deviceOptions.split(",");			//NOTE: STATIC DELAYS ARE NEEDED			//Now check whether access control settings are retained.			for(int j=0;j<3;j++){				Util.printInfo("Verify that Access control setting : " +devicesDynamicLocators[j].toUpperCase()+ " can be set");				String allDeviceRadioBtn=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("accessControlRadioBtns", devicesDynamicLocators[j]);							productUpdatePage.click(allDeviceRadioBtn);					Util.sleep(1000);				productUpdatePage.scrollIntoViewOfMetadataElement(myDrawerBtn);				//Collapse the drawer btn				//if the browser is chrom click using javascript				if (EISTestBase.getAppBrowser().equalsIgnoreCase("chrome")){									((JavascriptExecutor)(driver)).executeScript("arguments[0].click();",myDrawerBtn);				}else{										myDrawerBtn.click();				}				Util.sleep(2000);				//now open the drawer btn check if the setting exists				//now expand				productUpdatePage.scrollIntoViewOfMetadataElement(myDrawerBtn);				//if the browser is chrom click using javascript				if (EISTestBase.getAppBrowser().equalsIgnoreCase("chrome")){									((JavascriptExecutor)(driver)).executeScript("arguments[0].click();",myDrawerBtn);				}else{									myDrawerBtn.click();				}								//click on Access control btn				Util.sleep(2000);				productUpdatePage.click("accessControlButton");				String radioBtnVerify=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("accessControlRadioBtnsVerify", devicesDynamicLocators[j]);				assertTrueWithFlags("The "+devicesDynamicLocators[j].toUpperCase()+" radio button should be selected when articel update drawer button is reopened", productUpdatePage.isChecked(radioBtnVerify));							}			//close the drawer button ie collapse the group			update++;			Util.sleep(2000);			productUpdatePage.scrollIntoViewOfMetadataElement(myDrawerBtn);			//if the browser is chrom click using javascript			if (EISTestBase.getAppBrowser().equalsIgnoreCase("chrome")){								((JavascriptExecutor)(driver)).executeScript("arguments[0].click();",myDrawerBtn);			}else{								myDrawerBtn.click();			}			Util.sleep(1000);				}	}	public void jsToolTip (String xFeild){		Util.sleep(10000);		List<String> temp = homePage.getFieldLocators(""+xFeild+"");		for(int i=0;i<temp.size();i++){			Util.sleep(2000);			String Xloc =temp.get(i).trim();			Util.sleep(5000);			System.out.println(Xloc);			//Execute javascript for Valid Xpath			try{  				String GetXpath1 ="document.getElementByXPath = function(sValue){ var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); if (a.snapshotLength > 0) { return a.snapshotItem(0); } };"; //document.getElementsByXPath = function(sValue){ var aResult = new Array();var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);for ( var i = 0 ; i < a.snapshotLength ; i++ ){aResult.push(a.snapshotItem(i));} return aResult;}; 				String jsClick = "var click_ev = document.createEvent(\"MouseEvents\"); click_ev.initEvent(\"click\", true, true); document.getElementByXPath(\""+Xloc+ "\").dispatchEvent(click_ev);"; 				JavascriptExecutor js = (JavascriptExecutor) driver; 				System.out.println(jsClick);				js.executeScript(GetXpath1); 				Thread.sleep(2000); 				js.executeScript(jsClick);				Thread.sleep(5000); 				break;			} catch (Exception e){ 				e.printStackTrace(); 				System.out.println("Xpath not found "+Xloc); 				if(i==temp.size()-1){					EISTestBase.fail("Valid Xath Not Found for WebElement : \"" +xFeild+ " \"from "+temp);				}			}		}	}	public void js_mouse_ToolTip (String xFeild){		Util.sleep(10000);		List<String> temp = homePage.getFieldLocators(""+xFeild+"");		for(int i=0;i<temp.size();i++){			Util.sleep(2000);			String Xloc =temp.get(i).trim();			Util.sleep(5000);			System.out.println(Xloc);			//Execute javascript for Valid Xpath			try{  				String GetXpath1 ="document.getElementByXPath = function(sValue){ var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); if (a.snapshotLength > 0) { return a.snapshotItem(0); } };"; //document.getElementsByXPath = function(sValue){ var aResult = new Array();var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);for ( var i = 0 ; i < a.snapshotLength ; i++ ){aResult.push(a.snapshotItem(i));} return aResult;}; 				String jsClick = "var elem = document.getElementByXPath(\""+Xloc+ "\");"+ "if( document.createEvent) {"+ "var evObj = document.createEvent('MouseEvents');"+ "evObj.initEvent( 'mouseover', true, false );"+"elem.dispatchEvent(evObj);"+ "} else if( document.createEventObject ) {"+ "elem.fireEvent('onmouseover');"+ "}"; 				JavascriptExecutor js = (JavascriptExecutor) driver; 				System.out.println(jsClick);				js.executeScript(GetXpath1); 				Thread.sleep(2000); 				js.executeScript(jsClick);				Thread.sleep(5000); 				break;			} catch (Exception e){ 				e.printStackTrace(); 				System.out.println("Xpath not found "+Xloc); 				if(i==temp.size()-1){					EISTestBase.fail("Valid Xath Not Found for WebElement : \"" +xFeild+ " \"from "+temp);				}			}		}	}	public void verifyTheBasicRenameDeviceOptionsWorksAsExpected() throws Exception {		String deviceDynamicLocators = testProperties.getConstant("LOCATORSDYNAMICTOKENS");		String[] deviceDynamicLocs=deviceDynamicLocators.split(",");		int indexToClick=0;		String deviceIDName=getSpecificTestDataBasedOnEnv("CM_WTH_DEVICEID");		//verify the basic UI front end				Util.printInfo("Verify that the Device rename pop up dialog is as expected for Devices, Description and Last user");		for(int i=0;i<deviceDynamicLocs.length;i++){			String optionName=null;			String tempDeviceName="AutoTest";			String deviceCompnameLoc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("devicesColumnsData",deviceDynamicLocs[i] );						List<WebElement> lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);			String liLocatorForJscript=null;			if (deviceDynamicLocs[i].equalsIgnoreCase("compName")){				optionName="Devices";				liLocatorForJscript="Enter new name";			}else if(deviceDynamicLocs[i].equalsIgnoreCase("compDescription")){				optionName="Description";				liLocatorForJscript="Enter new description";			}else{				optionName="adsLUser";				liLocatorForJscript="Enter new name";			}			Util.printInfo("=========================================================================");			Util.printInfo("Verify that the Device rename pop up dialog is as expected for "+optionName);			tempDeviceName=optionName+tempDeviceName;			//NOTE: Need to reset the all modifed names for the initial setup otherwise it is difficult to verify			for(int k=0;k<lstDevices.size();k++){								if (EISTestBase.getAppBrowser().equalsIgnoreCase("chrome")){									((JavascriptExecutor)(driver)).executeScript("arguments[0].click();",lstDevices.get(k));				}else{					lstDevices.get(k).click();				}				Util.sleep(300);				if (productUpdatePage.isFieldVisible("originalNameInDialog")&& productUpdatePage.isFieldVisible("revertInDeviceDialog")){					//revert it all of them					productUpdatePage.click("revertInDeviceDialog");					Util.sleep(300);	//needed to avoid race condition for Jscripts.					//reidentify the elements					lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);				}			}			//reidentify the elements			productUpdatePage.removeFieldToExistingfieldMetadataList(deviceCompnameLoc);				deviceCompnameLoc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("devicesColumnsData",deviceDynamicLocs[i] );			lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);				Util.sleep(2000);			int j=getDeviceIdRowInDeviceTable(deviceDynamicLocs[i], deviceIDName)-1; //as list is zero based									if (EISTestBase.getAppBrowser().equalsIgnoreCase("ie")){								((JavascriptExecutor)(driver)).executeScript("arguments[0].click();",lstDevices.get(j));			}else{				lstDevices.get(j).click();			}						Util.sleep(2000);			String origName=lstDevices.get(j).getText();			//if the original name exists i.e this cell has already altered by some one or during other runs then overwrite the origName with the one shown in device Dialog			if (productUpdatePage.isFieldVisible("originalNameInDialog")){				//then get that name				origName=productUpdatePage.getValueFromGUI("originalNameInDialog");			}			//check that the new name pop up is displayed			assertTrueWithFlags("The Rename device dialog UI pop up is as expected for "+optionName, (productUpdatePage.isFieldVisible("renameDeviceDialogPopup") &&					productUpdatePage.isFieldVisible("renameDeviceDialogtextPlaceholder")));			//rename something and check if the revert works 			Util.printInfo("Verify that the renaming the device works as expected for "+optionName);			Util.printInfo("Entering the new name for the Device for "+optionName);			Util.sleep(1000);			//click again to simulate the physical click			//Execute jquery to set the value	using regular sendkeys is not working					/*lstDevices.get(j).click();	//collpase the existing opened one					 */			indexToClick=j;			 /*String jqueryScript="$('td[class=\"editable\"][data-name=\""+deviceDynamicLocs[i]+"\"]').each(function(index){ if(index=="+indexToClick+"){ $(this).click();}});\r" + 					" $('input[placeholder=\""+liLocatorForJscript+"\"]').val(\""+tempDeviceName+"\");  $('input[placeholder=\""+liLocatorForJscript+"\"]').trigger(\"change\"); ";*/			 /*((JavascriptExecutor)(driver)).executeScript(jqueryScript);	//do this only for first row hence index is set 0;			  * 			  */			Util.sleep(700);			  // Enter the alias name			  productUpdatePage.isFieldVisible("renameDeviceDialogtextPlaceholder");	// click inside  and enter text			  ((JavascriptExecutor)(driver)).executeScript("arguments[0].focus();",productUpdatePage.getCurrentWebElement());			  productUpdatePage.sendKeysInTextFieldSlowly("renameDeviceDialogtextPlaceholder",tempDeviceName);			  try{				  Util.sleep(30000);			  productUpdatePage.getCurrentWebElement().sendKeys(Keys.RETURN);			  }			  catch(Exception e){				 // e.printStackTrace();e.getCause(); e.getMessage();			}			  //now check if the name is displayed							  //reidentify the Element to avoid element not found in Cache			  lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);			  //======================			  //NOTE: As the black overlay pop up still appears 			  //Hit Enter key here					  /*productUpdatePage.getCurrentWebElement().sendKeys(Keys.RETURN);*/			  /*lstDevices.get(j).sendKeys(Keys.ENTER);*/			  Util.sleep(300);					  //======================			  //After closing the pop up then the row goes down at the bottom then pull last row info			  int rowNo=getDeviceIdRowInDeviceTable(deviceDynamicLocs[i], deviceIDName)-1; 						  String newModifiedDevNameinTable=lstDevices.get(rowNo).getText().trim();			  assertTrueWithFlags("The new Name should match for "+optionName,newModifiedDevNameinTable.equalsIgnoreCase(tempDeviceName));			  Util.sleep(600);			  lstDevices.get(rowNo).click();	//click on it to expand it			  Util.sleep(1000);			  //now revert it and see if that works			  Util.printInfo("Verify that the Revert button in dialog exists and works as expected for "+optionName);			  assertTrue("The Revert button should be visible when the "+optionName+" is renamed",productUpdatePage.isFieldVisible("revertInDeviceDialog"));			  //verify if the original name is found in pop up			  String origNameinPopup=productUpdatePage.getValueFromGUI("originalNameInDialog");			  origNameinPopup=origNameinPopup.replace("\"", "").trim();			  assertTrueWithFlags("The Original name in pop up should match with original name of the "+optionName, origNameinPopup.equalsIgnoreCase(origName));			  productUpdatePage.click("revertInDeviceDialog");			  //again reidentify the webelements to avoid element not found in cache			  lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);			  //IT MOVES TOP SO LEAVE so get the row no again			  j=getDeviceIdRowInDeviceTable(deviceDynamicLocs[i], deviceIDName)-1;			  String origNameAfterClickonRevert=lstDevices.get(j).getText().trim();			  //remove the quotes			  String newOrigNameWithNoQuotes=origName.replace("\"", "").trim();			  assertTrueWithFlags("The original "+optionName+" name should be reverted when clicked on revert button",origNameAfterClickonRevert.equalsIgnoreCase(newOrigNameWithNoQuotes));			  // do a negative test and check if revert btn is not displayed			  Util.sleep(1000);			  lstDevices.get(j).click();			  Util.sleep(1000);			  assertFalse("The Revert button should be not visible when the "+optionName+" is renamed",productUpdatePage.isFieldVisible("revertInDeviceDialog"));			  //again reidentify the webelements to avoid element not found in cache			  lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);			  //again reidentify the webelements to avoid element not found in cache			  lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);			  Util.sleep(1000);			  lstDevices.get(j).click();	//again click to collapse		}	}	/**	 * @Description : Gets the Device id row info from Device table	 * @param dynamicLoc	 * @param deviceIdname	 * @return	 * @throws Exception	 */	public int getDeviceIdRowInDeviceTable(String dynamicLoc,String deviceIdname) throws Exception {		String getDeviceRows= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("getDeviceRowNo", dynamicLoc);		List<WebElement> lstDevicesRows= productUpdatePage.getMultipleWebElementsfromField(getDeviceRows);		//parse the list and grab the row number		boolean foundDeviceRow=false;		int rowNo=0;		for(WebElement myActDeviceId: lstDevicesRows){			rowNo++;			if (myActDeviceId.getAttribute("data-device-id").equalsIgnoreCase(deviceIdname)){				foundDeviceRow=true;				break;			}		}		if (!foundDeviceRow){			throw new RuntimeException("Unable to find the Device row with device id: "+deviceIdname+" in the Device table row, please check the Device id");		}		return rowNo;	}	public String getIndividualUpdatesPrefValueForSpecificUpdate() throws Exception {		String updateRadioBtnValue="";		List<WebElement> lstElements=productUpdatePage.getMultipleWebElementsfromField("allAccessControlRadioBtns");		for(WebElement myRadioBtn: lstElements){			if(myRadioBtn.isSelected()){				//if selectd then pull the name of the update value								updateRadioBtnValue=productUpdatePage.getValueFromGUI("getProductSelectedIndvSettingVal");							}		}						return updateRadioBtnValue;	}	public boolean isIndividualPrefSelectedForSpecificUpdate() throws Exception {				List<WebElement> lstElements= productUpdatePage.getMultipleWebElementsfromField("allAccessControlRadioBtns");		for(WebElement accessControlRadiobtn: lstElements){			if (accessControlRadiobtn.isSelected()){				return true;			}		}		return false;	}	public String getUniqueString(int lenght) {		return RandomStringUtils.randomAlphabetic(lenght);	}	public String getUniqueNumber(int lenght) {		return RandomStringUtils.randomNumeric(lenght);	}	public String getSpecificTestDataBasedOnEnv(String testDataProperty) {		String testDataPropValue=null;		if(getEnvironment().equalsIgnoreCase("DEV")){									testDataPropValue=testProperties.getConstant(testDataProperty+"_DEV");		}else{			testDataPropValue=testProperties.getConstant(testDataProperty+"_STG");					}				return testDataPropValue;	}	public String[] getUserCredentials(String userAcctType)  throws Exception{		String[] userCredentials = new String[2]; // always two username and passwd		if(getEnvironment().equalsIgnoreCase("DEV")){									userCredentials[0]=testProperties.getConstant(userAcctType+"_USERNAME_DEV");			userCredentials[1]=testProperties.getConstant(userAcctType+"_PASSWORD_DEV");				}else{			userCredentials[0]=testProperties.getConstant(userAcctType+"_USERNAME_STG");			userCredentials[1]=testProperties.getConstant(userAcctType+"_PASSWORD_STG");		}				return userCredentials;	}	public String[] getDevicesNamesCheckedUnderSelectModalDialog() {		String jQueryScript="var myArray=new Array();$('input[name=\"device\"]:checked ~ span').each(function(){ myArray.push($(this).text());});return myArray;";		ArrayList<String> lstDevices=(ArrayList<String>) ((JavascriptExecutor)(driver)).executeScript(jQueryScript);				String[] selectedDeviceLabels= new String[lstDevices.size()];		lstDevices.toArray(selectedDeviceLabels);		return selectedDeviceLabels;	}	public String getGUIDForUser(String emailID) throws IOException{		DOMXmlParser domParser = new DOMXmlParser();		SoapUIExampleTest soapCall = new SoapUIExampleTest();		StringBuffer fileData = new StringBuffer();		String request=null;		//String path = new java.io.File(".").getCanonicalPath();		String path=System.getProperty("user.dir");		char[] buf = new char[1024];		int numRead=0;		//if (!path.contains("build")){ path=path+"\\build";}		String requestFile = path + "\\GetUserByEmailRequest.xml";		File wsdlFile = new File(path+ "\\UserService.wsdl");			//Read request File		        		BufferedReader reader = new BufferedReader(new FileReader(requestFile));		while((numRead=reader.read(buf)) != -1){			String readData = String.valueOf(buf, 0, numRead);			fileData.append(readData);		}		reader.close();		request=fileData.toString();		//Replace Email tag with actual email ID		String ActualRequest = soapCall.ReplaceRequest(request,emailID);		Util.printInfo("REQUEST: " +ActualRequest);		String response=null;		if(getEnvironment().equalsIgnoreCase("STG")){			response = soapCall.getResponseForSoapRequest("webservice",				"GetUserByEmail", wsdlFile.getName(), ActualRequest,				"https://stageservices-usscl.autodesk.com/UserService",				getEnvironment());}else{			response = soapCall.getResponseForSoapRequest("webservice",				"GetUserByEmail", wsdlFile.getName(), ActualRequest,				"https://devservices.autodesk.com/dm/UserService",				getEnvironment());}				Document doc = domParser.getDocument(response);		String GUID = null;		NodeList Nodes = doc.getElementsByTagName("ns0:User");		Util.printInfo(Nodes.getLength() + " : Nodes.getlength()");		for (int s = 0; s < Nodes.getLength(); s++) {			Node GUIDNode = domParser.getSubNode("ns0:GUID", Nodes.item(s));			GUID = GUIDNode.getTextContent();			Util.printInfo(GUIDNode.getTextContent());		}		return GUID;	}	public void consumeCloudCredits(String guid, String contract) throws IOException{		DOMXmlParser domParser = new DOMXmlParser();		SoapUIExampleTest soapCall = new SoapUIExampleTest();		StringBuffer fileData = new StringBuffer();		String request=null;		String path = new java.io.File(".").getCanonicalPath();		String CurrentDate = soapCall.getCurrentDate();		char[] buf = new char[1024];		int numRead=0;		if (!path.contains("build")){ path=path+"\\build\\";}		String requestFile = path + "chargeEventRequest.xml";		//Read request File		        		BufferedReader reader = new BufferedReader(new FileReader(requestFile));		while((numRead=reader.read(buf)) != -1){			String readData = String.valueOf(buf, 0, numRead);			fileData.append(readData);		}		reader.close();		request=fileData.toString();      		request=testProperties.getConstant("REQUEST");		String actualRequest = request				.replace("<UID>?</UID>", "<UID>" + contract + "</UID>")				.replace("<GUID>?</GUID>", "<GUID>" + guid + "</GUID>")				.replace(						"<StartTime>?</StartTime>         <EndTime>?</EndTime> ",						"<StartTime>" + CurrentDate						+ "</StartTime>         <EndTime>"						+ CurrentDate + "</EndTime>");		File file1 = new File(System.getProperty("user.dir")				+ "\\build\\ConvergentCharging.wsdl");		String ChargeEventResponse = soapCall				.getSoapRequestForChargeEvent(						"ChargeEvent",						"ChargeEvent",						file1.getName(),						actualRequest,						"https://quattro-stg-vip.autodesk.com/quattroCloud/services/ConvergentCharging",						getEnvironment());		Document doc1 = domParser.getDocument(ChargeEventResponse);		String Status = null;		NodeList Nodes1 = doc1.getElementsByTagName("ns2:ChargeEventResponse");		for (int s = 0; s < Nodes1.getLength(); s++) {			Node StatusNode = domParser.getSubNode("ResponseStatus",					Nodes1.item(s));			Status = StatusNode.getTextContent();			assertEquals("OK", Status);		}		if (!Status.trim().equalsIgnoreCase("OK")) {			EISTestBase.fail("Error in Charge Event Response");		}	}	/**	 * @Description : Gets the modified device information of the entire row from a specific device id	 * @param deviceidName	 * @return ArrayList	 * @throws Exception	 */		public ArrayList<String> getEditedDevicesInfo(String deviceidName) throws Exception {		String deviceDynamicLocators=testProperties.getConstant("LOCATORSDYNAMICTOKENS");				String[] deviceDynamicLocs=deviceDynamicLocators.split(",");		String theDeviceIdValue= getSpecificTestDataBasedOnEnv(deviceidName);		ArrayList<String> lsActDeviceInfo	=  new ArrayList<>();		try{			for(int j=0;j<deviceDynamicLocs.length;j++){							String getDeviceRowsInfo= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("deviceNameIdRow", theDeviceIdValue,deviceDynamicLocs[j]);				if (productUpdatePage.isFieldPresent(getDeviceRowsInfo)){					String deviceInfoActual=productUpdatePage.getValueFromGUI(getDeviceRowsInfo);					lsActDeviceInfo.add(deviceInfoActual);				}			}		}catch (Exception ex) {			Util.printWarning("The deviceId :"+deviceidName+" does not exist in the Device table for logged in user");			return null;		}		return lsActDeviceInfo;			}	/**	 * @Description: Supporting methods for changing alias devices info tests	 * @param roleType	 * @param lstDevicesaliasInfo	 * @return	 * @throws Exception	 */	public boolean verifyTheDeviceInfoSeenByCMOrSC(String roleType,ArrayList<String> lstDevicesaliasInfo) throws Exception {		String optionName=null;		boolean verifyData=false;		String deviceDynamicLocators=testProperties.getConstant("LOCATORSDYNAMICTOKENS");		String[] deviceDynamicLocs=deviceDynamicLocators.split(",");		//do this for all Devices, last user and Description and verify that the device info is same 		for(int i=0;i<deviceDynamicLocs.length;i++){			 verifyData=false;			String deviceCompnameLoc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("devicesColumnsData",deviceDynamicLocs[i] );						List<WebElement> lstDevices=productUpdatePage.getMultipleWebElementsfromField(deviceCompnameLoc);			if (deviceDynamicLocs[i].equalsIgnoreCase("compName")){				optionName="Devices";			}else if(deviceDynamicLocs[i].equalsIgnoreCase("compDescription")){				optionName="Description";			}else{				optionName="Last User";			}							//Verify only for the First Device row			for(int j=0;j<lstDevices.size();){				//do this only once								String verifyDeviceInfolabel=lstDevices.get(i).getText();				Util.printInfo("Verify that the Device information for the field :"+optionName+"is as expected when User: "+roleType+" logs in");					verifyData=lstDevicesaliasInfo.contains(verifyDeviceInfolabel);				assertTrue("The Device info field: "+optionName+" should be visible when the user : "+roleType+" logs in",verifyData );								break;	//do this for first row							}		}		return verifyData;	}	/**	 * @Description Get the list of update names in the prod updates via jscript. Sometime the getText of webelement truncating the spaces in between text val.	 * @return	 * @throws Exception	 */	public ArrayList<String> getListOfProductsInUpdatesPageViaJscript() throws Exception{		String jScript="var myArray= Array();$('div[class=\"update-desc\"] > span[class=\"name\"]').each(function(){ myArray.push($(this).text());}); return myArray;";		JavascriptExecutor js= (JavascriptExecutor)driver;		Object objVal=js.executeScript(jScript);		ArrayList<String> updateListLabels= (ArrayList<String>) objVal;		return updateListLabels;	}		/**	 * @Description to delete the devices under Access control menu :Only selected	 * @throws Exception	 */	public void deleteDevicesUnderAccessControlMenu() throws Exception {		String jqueryScript="$('fieldset[class=\"dropdown open\"]>>div[class=\"viewport\"]>>ul>li>a').each(function(){ $(this).click();});";				List<WebElement> myDeviceList=productUpdatePage.getMultipleWebElementsfromField("removeDevice");		for(int i=0;i<myDeviceList.size();i++){			mouseHover(myDeviceList.get(i));			//keep runnign the jquery to delete			((JavascriptExecutor)(driver)).executeScript(jqueryScript);			Util.sleep(300);			if (productUpdatePage.isFieldVisible("listOfAllDevicesUnderAccessControl")){									productUpdatePage.click("myDevicesArrowBtnInAccessControl");			}					}			}		public void openNewTab(String URL)	{		 String url = URL;		    String script = "var anchor=document.createElement('a');anchor.target='_blank';anchor.href='%s';anchor.innerHTML='.';document.body.appendChild(anchor);return anchor";		    Object element = ((JavascriptExecutor)driver).executeScript(String.format(script, url));		    if (element instanceof WebElement) {		        WebElement anchor = (WebElement) element; 		        anchor.click();		        ((JavascriptExecutor)driver).executeScript("var a=arguments[0];a.parentNode.removeChild(a);", anchor);		    } else {		        throw new RuntimeException("Unable to open tab: " + url);		    }   	}		public String getGrantToken(){				JavascriptExecutor js;		String grantToken = null;		js = (JavascriptExecutor) driver;				String usergrantTokenData = (String) js.executeScript(String.format("return window.sessionStorage.getItem('%s');", "userdata:grantToken"));				String usergrantTokenDatalen=usergrantTokenData.substring(1, usergrantTokenData.length()-1);		return usergrantTokenDatalen;	}		public String getUserSessionID(){				JavascriptExecutor js;		String userSessionID = null;		js = (JavascriptExecutor) driver;				String userCurrentData = (String) js.executeScript(String.format("return window.sessionStorage.getItem('%s');", "userdata:current"));		String[] temp=userCurrentData.split("\"Id\":\"");		if (temp[1]!=null){			String[] sessionID=temp[1].split("\",\"");			userSessionID=sessionID[0];		}else{			EISTestBase.failTest("Session ID not found for the user. Actual currnt data got: "+ userCurrentData);		}				return userSessionID;	}		public void CreateJSONFile(String UIResponse){				String content = UIResponse;		System.out.println("****************** Before writting to File ******** "+System.getProperty("user.dir"));		FileWriter fw = null;		Util.sleep(4000);		System.out.println("******************Jenkins root path ******** "+System.getProperty("user.dir"));		File file = new File(System.getProperty("user.dir")+"\\JsonResp.json");		// if file doesnt exists, then create it		if (!file.exists()) {			try {				file.createNewFile();			} catch (IOException e) {								e.printStackTrace();			}		}		try {			fw = new FileWriter(file.getAbsoluteFile());		} catch (IOException e) {						e.printStackTrace();		}		BufferedWriter bw = new BufferedWriter(fw);		try {			bw.write(content);			bw.flush();		} catch (IOException e) {			e.printStackTrace();		}		try {			bw.close();		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * @Description this is used for Prod_Version access control stuff	 * @param globalVal	 * @param addDevicesFromGlobalSetting	 * @param devicesInfo	 * @throws Exception	 */	public String[] setGlobalSettingValue(String globalVal, boolean addDevicesFromGlobalSetting,String... devicesInfo) throws Exception {		String[] devicesSelectedInSelecDevDialog=null;		Util.printInfo("Clicking on Global settings icon and set the setting to :'"+globalVal);				if(globalVal.contains("Only Selected")){			globalVal="only-selected";		}else if (globalVal.contains("All Devices"))		{			globalVal="all-devices";		}else{			globalVal="no-devices";		}		productUpdatePage.isFieldPresent("deliverySettingsOnManageDevices");		productUpdatePage.scrollIntoViewOfMetadataElement(productUpdatePage.getCurrentWebElement());		productUpdatePage.click("deliverySettingsOnManageDevices");		Util.sleep(3000); //wait for the pop up to appear		String selectBtnloc= null;		if(addDevicesFromGlobalSetting){			devicesSelectedInSelecDevDialog=null;			//click on add btn and add devices			productUpdatePage.click("addDevices"); //click on prod update in Delivery Settings dialog box			Util.sleep(2000);			// now add devices			for(int i=0;i<devicesInfo.length;i++){				//select the devices				String selectDeviceCheckboxloc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("selectADeviceCheckbox", devicesInfo[i]);				productUpdatePage.isFieldPresent(selectDeviceCheckboxloc);				productUpdatePage.scrollIntoViewOfMetadataElement(productUpdatePage.getCurrentWebElement());				Util.sleep(600);				productUpdatePage.check(selectDeviceCheckboxloc);	//select the device							}			String selectBtnlocInDialog= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("buttonInSelectDeviceDialog", "select");			devicesSelectedInSelecDevDialog=getDevicesNamesCheckedUnderSelectModalDialog();			productUpdatePage.click(selectBtnlocInDialog);			//get the list of selected device name			Util.sleep(1000);	//need to wait here								}else{						//Set the global setting					String radioBtninDeliverySetngLoc=productUpdatePage.createFieldWithParsedFieldLocatorsTokens("deliverySettingsRadioBtns", globalVal);			Util.printInfo("Set the Global setting to '"+globalVal+"'");			productUpdatePage.click(radioBtninDeliverySetngLoc);			 selectBtnloc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("buttonInSelectDeviceDialog", "select");		}		//click on Select		selectBtnloc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("buttonInSelectDeviceDialog", "select");		Util.printInfo("Clicked on Select button");		Util.sleep(2000);	//need static sleep here		productUpdatePage.click(selectBtnloc);				Util.sleep(1000);		//DUE TO A GLITCH in UI the select btn is disabled in one of the cases so click on cancel and proceed just not to block the test		if (productUpdatePage.isFieldVisible(selectBtnloc)){			String cancelBtnloc= productUpdatePage.createFieldWithParsedFieldLocatorsTokens("buttonInSelectDeviceDialog", "cancel");			Util.printInfo("Clicked on Cancel button, as the Select button found as displayed");			Util.sleep(2000);	//need static sleep here			productUpdatePage.click(cancelBtnloc);		}		return devicesSelectedInSelecDevDialog;			}		public String getProductAccessControlPrefValueForSpecificUpdate() throws Exception {		String updateRadioBtnValue="";		String selectedLabel=null;		List<WebElement> lstElements=productUpdatePage.getMultipleWebElementsfromField("accessControlMenuByProdRadioBtns");		for(WebElement myRadioBtn: lstElements){			if(myRadioBtn.isSelected()){				//if selectd then pull the name of the update value								/*updateRadioBtnValue=productUpdatePage.getValueFromGUI("getProductSelectedIndvSettingVal");*/				//get the value of checked attr and construct label value				selectedLabel=myRadioBtn.getAttribute("value");				break;			}		}				if (selectedLabel.equalsIgnoreCase("all")) {			updateRadioBtnValue="All Devices"; 		}else if (selectedLabel.equalsIgnoreCase("none")) {			updateRadioBtnValue="No Devices"; 		}else {			updateRadioBtnValue="Only Selected";		}		return updateRadioBtnValue;	}}