package mja;import mja.SubscriptionRenewal.CaseName;import common.Case;import common.Case.CaseType;import common.Case.CreateFrom;import common.EISTestBase;import common.Page_;import common.TestProperties;import common.Util;/** * Representation of features and functionality specific to the Major Accounts application. *  * @author Jeffrey Blaze * @version 1.0.0 */public class MJATestBase extends EISTestBase {	private static final String APP_NAME		= "Major Accounts";	private static final String APP_BASE_DIR	= "mja";	private String strLaunchDriver;    //TODO  We need to figure out what is an auto user, do they use users on the setup page,    //  do they log in as an auto user and then as a partner user, etc.	private String mjaUser = "";		//Define only MJA-specific windows.  SFDC-scope windows (such as mainWindow) are static	//  objects in the EISTestBase class		//Define MJA-specific Page objects that have no associated test properties. The pages	//  defined here are those that:	//    will never be referenced in a test properties file, AND	//    contain MJA-specific GUI elements	//Note that if a test DOES need to specify test properties for one of these pages	//  (e.g., search terms), it can create its own local version of the page, and pass	//  the pagePropertiesFilenameKey argument	/**	 * Default constructor.  It calls the superclass constructor, passing the application's name and directory in the framework's source code hierarchy.	 */	MJATestBase() {		//TODO  Change to get APP_BASE_DIR from properties? (currently passed in as JVM arg)	    super(APP_NAME, APP_BASE_DIR);	    setup();    }	MJATestBase(String strLaunchDriver) {		//TODO  Change to get APP_BASE_DIR from properties? (currently passed in as JVM arg)	    super(APP_NAME, APP_BASE_DIR, strLaunchDriver);	    this.strLaunchDriver = strLaunchDriver;	    setup();    }	/**	 * Gets the Major Accounts user name. (NOTE that it is not yet clear what constitutes an MJA user,	 * a partner user, an admin user, etc.)	 * @return The Major Accounts user name	 */    final String getMJAUser() {		return mjaUser;	}   	@Override	public String toString() {		return getAppName() + " ["				+ "super=             " + super.toString() 				+ ", mjaUser=     " + mjaUser				+ "]";	}    	/**	 * Configures high-level MJA-specific objects.	 * @see #doSetup()	 */    @Override	protected final void setup() {    	super.setup();    	doSetup();    }    /**	 * Configures high-level MJA-specific objects&#58;<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates MJA-specific Page objects<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates MJA-specific Window objects	 * @see #createAppWindows()	 * @see #createAppPages()	 */    private final void doSetup() {    	setEnvironmentVariables();    	    	createAppWindows();    	    	createAppPages();    	//MUST be called after super.setup!!!    	//NOTE that MJAUser is the equivalent of a user that is found in the setup screen.    	//    The user that logs in to the app is known as the auto user.  Until we figure out    	//    whether that model applies, don't call this.    	//setMJAUser();    }    	/**	 * Instantiates MJA-specific Window objects.	 */    @Override	protected final void createAppWindows() {    	//Instantiate only MJA-specific windows.  SFDC-scope windows (such as mainWindow) are static    	//  objects in the EISTestBase class    }	/**	 * Instantiates MJA-specific Page objects.	 */	private final void createAppPages() {		//Instantiate Page objects that have no associated test properties		//Note that if a test DOES need to specify test properties for one of these pages		//  (e.g., search terms), it can create its own local version of the page, and pass		//  the pagePropertiesFilenameKey argument, OR create it here, by calling createPage		//  instead of createStaticPage		//Can also instantiate regular (i.e., with associated test properties) MJA-specific		//  Page objects here, but typically it is best for the test or utility methods to do that;		//  if we do it here we may end up creating Page objects that never get used.    }    		final Case utilCreateCase(CreateFrom createFrom, CaseType caseType) {       	return utilCreateCase(createFrom, caseType, testProperties);    }	final Case utilCreateCase(CreateFrom createFrom, CaseType caseType, TestProperties utilProperties) {    	Case supportCase = utilCreateCaseObject(createFrom, utilProperties);    	supportCase.create(createFrom, caseType);       	       	return supportCase;    }	final Case utilCreateCaseObject(CreateFrom createFrom, TestProperties utilProperties) {		Case supportCase = null;				Page_ createCaseRTPage		= createCommonPageInstance(utilProperties, "PAGE_COMMON_RECORD_TYPE_PROPERTIES_FILE");		//Page_ createCasePage		= createPage(utilProperties, "PAGE_CREATE_CASE_PROPERTIES_FILE");		Page_ createCasePage		= createCommonPageInstance(utilProperties, "PAGE_CREATE_CASE_PROPERTIES_FILE");      	//Page_ viewCasePage		= createPage(utilProperties, "PAGE_VIEW_CASE_PROPERTIES_FILE");      	Page_ viewCasePage			= createCommonPageInstance(utilProperties, "PAGE_VIEW_CASE_PROPERTIES_FILE");      	Page_ viewContactPage		= createCommonPage("PAGE_VIEW_CONTACT_PROPERTIES_FILE");      	      	if ((createFrom.equals(CreateFrom.PC_PORTAL)) || (createFrom.equals(CreateFrom.SC_PORTAL))) {    		Page_ commonPortalPage		= createCommonPageInstance(utilProperties, "PAGE_COMMON_PORTAL_PROPERTIES_FILE");    		//Page_ viewCaseInPortalPage= createPage(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");    		Page_ viewCaseInPortalPage	= createCommonPageInstance(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");          	Page_ productPopUpPage		= createPage(utilProperties, "PAGE_PRODUCT_POPUP_PROPERTIES_FILE");           	supportCase = new Case(createCaseRTPage, createCasePage, viewCasePage, viewContactPage, commonPortalPage, viewCaseInPortalPage, productPopUpPage);      	} else {           	supportCase = new Case(createCaseRTPage, createCasePage, viewCasePage, viewContactPage);      	}     	return supportCase;    }		final SubscriptionRenewal utilCreateSubscriptionRenewal(CaseName caseName,TestProperties utilProperties) throws Exception {		SubscriptionRenewal subRenewal = utilCreateSubscriptionRenewalObject(caseName,utilProperties);		if (caseName.equals(CaseName.OPTIONS_CHECK)){			subRenewal.verifyOptions();		}		else if(caseName.equals(CaseName.SUB_RENEWAL)){		subRenewal.create();		}		else if(caseName.equals(CaseName.SEAT_COUNT_CHECK)){			subRenewal.verifySeatCount();			}		else if(caseName.equals(CaseName.SAME_OPPTY_MULTIPLE_AGREEMENTS)){			subRenewal.verifyMultipleAgreements();			}				else if(caseName.equals(CaseName.SAME_OPPTY__NUM_MULTIPLE_AGREEMENTS)){			subRenewal.verifyNumMultipleAgreements();						}		else if(caseName.equals(CaseName.SAME_OPPTY__15_AGREEMENTS)){			subRenewal.createOptyForFifteenAgreements();		}		else if(caseName.equals(CaseName.SAME_OPPTY_MULTIPLE_AGREEMENTS_VERIFY_EXPIRY_DATE)){			subRenewal.verifyMultipleAgreements();		}		else if(caseName.equals(CaseName.REGISTERED_LINE_ITEM_MULTIPLE_AGREEMENTS)){			subRenewal.verifyMultipleAgreements();		}		else if(caseName.equals(CaseName.CLOSE_OPPTY_MULTIPLE_AGREEMENTS_VERIFY_GREEN_CHECK_MARK)){			subRenewal.closeOptyForMultiAgreementsAndVerifyGreenCheckMark();		}       	return subRenewal;    }		final SubscriptionRenewal utilCreateSubscriptionRenewal(CaseName caseName,String utilPropertiesFilenameKey) throws Exception {		TestProperties utilProperties = new TestProperties(getTestPropertiesFilename(utilPropertiesFilenameKey), getTestDataDir(), getTestManifest());       	return utilCreateSubscriptionRenewal(caseName,utilProperties);       	       	    }		final SubscriptionRenewal utilCreateSubscriptionRenewal(CaseName caseName)  throws Exception{	       	return utilCreateSubscriptionRenewal(caseName,testProperties);     	       	    }		final SubscriptionRenewal utilCreateSubscriptionRenewalObject(CaseName caseName,TestProperties utilProperties) {		SubscriptionRenewal subRenewal  = null;		//Use longer pageRedrawDelay setting for slow pages 		//Page_ createSubscriptionRenewalPage			= createPage(utilProperties, "PAGE_CREATE_SUBSCRIPTIONRENEWAL_PROPERTIES_FILE");		Page_ createSubscriptionRenewalPage				= createPage(utilProperties, "PAGE_CREATE_SUBSCRIPTIONRENEWAL_PROPERTIES_FILE", 600);		Page_ viewServiceContractPage					= createPage(utilProperties, "PAGE_VIEW_SERVICE_CONTRACT_PROPERTIES_FILE");				//NOTES TO OFFSHORE - I added this here, and also to SubscriptionRenewal constructor		Page_ viewOpptyPage								= createCommonPageInstance("PAGE_VIEW_OPPTY_PROPERTIES_FILE");      	//subRenewal = new SubscriptionRenewal(createSubscriptionRenewalPage , viewServiceContractPage);      	subRenewal = new SubscriptionRenewal(createSubscriptionRenewalPage, viewServiceContractPage, viewOpptyPage);     	return subRenewal;    }	 final SubscriptionRenewal utilCreateSubscriptionRenewalObject(CaseName caseName,String utilPropertiesFilenameKey) {	    	TestProperties utilProperties = new TestProperties(getTestPropertiesFilename(utilPropertiesFilenameKey), getTestDataDir(), getTestManifest());			return utilCreateSubscriptionRenewalObject(caseName,utilProperties);	    }			    final SubscriptionRenewal utilCreateSubscriptionRenewalObject(CaseName caseName) {			return utilCreateSubscriptionRenewalObject(caseName,testProperties);	    }	    /**	 * Logs in as the automation user, optionally launching Salesforce (default user is MJAConstants.AUTO_USERNAME).	 * @param launch the setting that determines whether to launch Salesforce before logging in	 * @return The automation user name	 */    @Override    protected final String loginAsAutoUser(boolean launch) {    	//login(MJAConstants.AUTO_USERNAME, MJAConstants.AUTO_PASSWORD, launch);    	super.login(getAutoUserName(), getAutoPassword(), launch);    	     	chooseApp();		    	return getCurrentUser();    }    	/**	 * Logs in as the automation user, without launching Salesforce.	 * @return The automation user name	 */    final String loginAsAutoUser() {    	return loginAsAutoUser(false);    }    protected void loginAsPartnerUser(boolean launch) {		Page_ portalLandingPage = createCommonPage("PAGE_PORTAL_LANDING_PAGE_PROPERTIES_FILE");		if (launch) {    		launchSalesforce();    	}    	    	mainWindow.select();    	    	loginPage.populateField("username", getPartnerUserName());    	loginPage.populateField("password", getPartnerPassword());     	loginPage.click("loginButton");     	portalLandingPage.waitForFieldPresent("privacyPolicy");     	     	handleServerMaintenanceNotification();    	     	//Deal with possible pop-ups, such as Reminders     	Util.sleep(2000);     	if (loginPage.closeAllPopUps(mainWindow.getLocator())) {        	disableReminders();     	}    	mainWindow.select();    	    	Util.printInfo("Logged in as the partner user '" + getPartnerUserName() + "'");    }	/**	 * Selects the default Major Accounts app from the SFDC app chooser.	 */    @Override    protected final void chooseApp() {    	chooseApp(MJAConstants.DEFAULT_MJA_APP);    }       /*    protected TransferLineItem getTestType(String transferLineItemConstantName) {    	String transferLineItemString = "";		TransferLineItem transferLineItem= null;				if (!transferLineItemConstantName.trim().equalsIgnoreCase(MJAConstants.MJA_TRANSFER_LINE_ITEM_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the MJAConstants.TransferLineItem  enumerated type is incorrect; it is '" + transferLineItemConstantName + "' but should be '" + MJAConstants.MJA_TRANSFER_LINE_ITEM_ENUM_CONSTANT_NAME + "'");		}				transferLineItemString = testProperties.getConstant(transferLineItemConstantName);				try {			transferLineItem = TransferLineItem.valueOf(transferLineItemString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + transferLineItemConstantName + "' constant ('" + transferLineItemString + "') is not a member of the MJAConstants.TransferLineItem enumerated type; valid values are: " + Util.valuesOfEnum(TransferLineItem.class));		}				return transferLineItem;    }   */    @Override	protected final void setEnvironmentVariables() {    	switch (getEnvironment().trim().toUpperCase()) {			case "DEV":	{				if (!MJAConstants.BASE_URL_DEV.isEmpty()) {					setBaseURL(MJAConstants.BASE_URL_DEV);				}								setAutoUserName(MJAConstants.AUTO_USERNAME_DEV);				setAutoPassword(MJAConstants.AUTO_PASSWORD_DEV);								break;			}			case "STG":			default:	{				if (!MJAConstants.BASE_URL_STG.isEmpty()) {					setBaseURL(MJAConstants.BASE_URL_STG);				}				setBasePartnerURL(MJAConstants.BASE_PARTNER_URL_STG);				setPartnerUserName(MJAConstants.PARTNER_USERNAME_STG);				setPartnerPassword(MJAConstants.PARTNER_PASSWORD_STG);								setAutoUserName(MJAConstants.AUTO_USERNAME_STG);				setAutoPassword(MJAConstants.AUTO_PASSWORD_STG);							}     	}    }            protected CreateFrom getInterfaceType(String createFromConstantName) {    	String createFromString = "";		CreateFrom createFrom = null;				if (!createFromConstantName.trim().equalsIgnoreCase(MJAConstants.MJA_CREATE_FROM_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.CreateFrom enumerated type is incorrect; it is '" + createFromConstantName + "' but should be '" + MJAConstants.MJA_CREATE_FROM_ENUM_CONSTANT_NAME + "'");		}				createFromString = testProperties.getConstant(createFromConstantName);				try {			createFrom = CreateFrom.valueOf(createFromString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + createFromConstantName + "' constant ('" + createFromString + "') is not a member of the SSConstants.CreateFrom enumerated type; valid values are: " + Util.valuesOfEnum(CreateFrom.class));		}				return createFrom;    }       protected CaseType getCaseType(String caseTypeConstantName) {    	String caseTypeString = "";		CaseType caseType = null;				if (!caseTypeConstantName.trim().equalsIgnoreCase(MJAConstants.MJA_CASE_TYPE_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.CaseType enumerated type is incorrect; it is '" + caseTypeConstantName + "' but should be '" + MJAConstants.MJA_CASE_TYPE_ENUM_CONSTANT_NAME + "'");		}				caseTypeString = testProperties.getConstant(caseTypeConstantName);				try {			caseType = CaseType.valueOf(caseTypeString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + caseTypeConstantName + "' constant ('" + caseTypeString + "') is not a member of the SSConstants.CaseType enumerated type; valid values are: " + Util.valuesOfEnum(CaseType.class));		}				return caseType;    }       protected CaseName getCaseName(String caseNameConstantName) {    	String caseNameString = "";		CaseName caseName = null;				if (!caseNameConstantName.trim().equalsIgnoreCase(MJAConstants.MJA_CASE_NAME_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the MJAConstants.CaseName enumerated type is incorrect; it is '" + caseNameConstantName + "' but should be '" + MJAConstants.MJA_CASE_NAME_ENUM_CONSTANT_NAME + "'");		}				caseNameString = testProperties.getConstant(caseNameConstantName);				try {			caseName = CaseName.valueOf(caseNameString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + caseNameConstantName + "' constant ('" + caseNameString + "') is not a member of the SSConstants.CreateFrom enumerated type; valid values are: " + Util.valuesOfEnum(CaseName.class));		}				return caseName;    }     }