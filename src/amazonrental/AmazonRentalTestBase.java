package amazonrental;import java.io.IOException;import java.security.SecureRandom;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.ListIterator;import java.util.Map;import java.util.Random;import java.util.concurrent.TimeUnit;import org.openqa.selenium.By;import org.openqa.selenium.Capabilities;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.Keys;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.interactions.HasInputDevices;import org.openqa.selenium.interactions.Mouse;import org.openqa.selenium.internal.Locatable;import org.openqa.selenium.remote.CapabilityType;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import amazonrental.AmazonRental;import amazonrental.AmazonRentalConstants;import common.Case.CaseType;import common.Case.CreateFrom;import common.EISConstants;import common.EISTestBase;import common.Page_;import common.TestProperties;import common.Util;import common.exception.MetadataException;import customerportal.UserDetailsDTO;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertEquals;/** * Representation of features and functionality specific to the CustomerPortal * application. *  * @author  * @version 1.0.0 */public class AmazonRentalTestBase extends EISTestBase{	private static final String APP_NAME = "amazonrental";	private static final String APP_BASE_DIR = "amazonrental";	private static final String APP_BROWSER = System.getProperty("appBrowser");	private static final String ENVIRONMENT = System.getProperty("Environment");	public static Page_ loginPage = null;	public static Page_ instantAccessPage = null;	public static Page_ sfdcPage = null;	public static Page_ accountLinking = null;	public static Page_ productHome = null;	public static Page_ createAccount = null;	public static String GetXpath ="document.getElementByXPath = function(sValue){ var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); if (a.snapshotLength > 0) { return a.snapshotItem(0); } };document.getElementsByXPath = function(sValue){ var aResult = new Array();var a = this.evaluate(sValue, this, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);for ( var i = 0 ; i < a.snapshotLength ; i++ ){aResult.push(a.snapshotItem(i));} return aResult;};";	public static String currentUser="";			AmazonRentalTestBase() {		// TODO Change to get APP_BASE_DIR from properties? (currently passed in		// as JVM arg)		super(APP_NAME, APP_BASE_DIR, APP_BROWSER);		setup();		doSetUp();	}		AmazonRentalTestBase(String testtype) {				super();		setup();		doSetUp();			}	public void doSetUp() {		setEnvironmentVariables();		createPages();	}	private void createPages() {		// TODO Auto-generated method stub		loginPage=createPage(testProperties, "PAGE_LOGIN_PROPERTIES_FILE", 600);		instantAccessPage=createPage(testProperties, "PAGE_INSTANTACCESS_PROPERTIES_FILE", 600);		sfdcPage=createPage(testProperties, "PAGE_SFDC_PROPERTIES_FILE", 600);		accountLinking=createPage(testProperties, "PAGE_ACCOUNTLINKING_PROPERTIES_FILE", 600);		productHome=createPage(testProperties, "PAGE_PRODUCTHOME_PROPERTIES_FILE", 600);		createAccount=createPage(testProperties, "PAGE_CREATEACCOUNT_PROPERTIES_FILE", 600);	}		public int getUniqueId() {  		int value = (int)(Math.random() * 888847988);		return value;	}  	public static String getRandomString(int length) throws Exception {		StringBuffer buffer = new StringBuffer();		String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";		int charactersLength = characters.length();		for (int i = 0; i < length; i++) {			double index = Math.random() * charactersLength;			buffer.append(characters.charAt((int) index));		}		return buffer.toString();	}				public static String getAlphanumericText(int length) throws Exception {		String[] symbols = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",				"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z" };				Random random = new SecureRandom();		StringBuilder sb = new StringBuilder(length);		for (int i = 0; i < length; i++) {			int indexRandom = random.nextInt(symbols.length);			sb.append(symbols[indexRandom]);		}		String AlphanumericText = sb.toString();		return AlphanumericText;	}	@Override	protected void createAppWindows() {		// TODO Auto-generated method stub			}	@Override	protected void chooseApp() {		// TODO Auto-generated method stub			}	@Override	protected void setEnvironmentVariables() {						switch (getEnvironment().trim().toUpperCase()) {				case "DEV": {					if (!AmazonRentalConstants.BASE_URL_DEV.isEmpty()) {						setBaseURL(AmazonRentalConstants.BASE_URL_DEV);											}					setAutoUserName(AmazonRentalConstants.AUTO_USERNAME_DEV);					setAutoPassword(AmazonRentalConstants.AUTO_PASSWORD_DEV);					break;				}				case "STG":				default: {					if (!AmazonRentalConstants.BASE_URL_STG.isEmpty()) {						setBaseURL(AmazonRentalConstants.BASE_URL_STG);											}					setAutoUserName(AmazonRentalConstants.AUTO_USERNAME_STG);					setAutoPassword(AmazonRentalConstants.AUTO_PASSWORD_STG);				}				}	}	protected void launchamazonRental(String url) {		    	 //Assumes a browser window is already open   	open(url);   	   			//Will have to do this every time we open a new window or pop-up,		//  because the locators are generated on the fly in WebDriver   	mainWindow.setLocator(driver.getWindowHandle());   	//Save the URL used to launch Salesforce, as sometimes the user wants to use it as a base for   	//  navigating to another URL, perhaps one that refers to an object ID   	setBaseURL(url);   	   	windowMaximize();   	String appName = getAppName();   	String currentURL = getCurrentURL();	    Util.printInfo("Launched " + appName + " at '" + currentURL + "'");   }		public void loginAmazon(String login, String password){				loginPage.populateField("userID", login);		loginPage.populateField("password", password);		loginPage.click("signInButton");		Util.printInfo("Loging to amazon rental Using below Credentials.");		Util.printInfo("UserID:"+login);		Util.printInfo("Password:"+password);		instantAccessPage.waitForFieldPresent("customerID");			}public void loginAmazonProduct(String login, String password){				loginPage.populateField("userID", login);		loginPage.populateField("password", password);		loginPage.click("signInButton");		Util.printInfo("Loging to amazon rental Using below Credentials.");		Util.printInfo("UserID:"+login);		Util.printInfo("Password: *****");		productHome.waitForFieldPresent("selectionOptions");			}	final String logoutamazon() {		if (getCurrentUser().isEmpty()) {			Util.printInfo("While attempting to log out the amazon user, found that an amazon user was not logged in");		} else {			String currentUserSave = getCurrentUser();			mainWindow.select();			instantAccessPage.click("logoutLink");			Util.printInfo("Logged out the amazon  '" + currentUserSave					+ "' (now logged in as '" + getCurrentUser() + "')");		}		return getCurrentUser();	}			public void compareStrings(String expected, String actual) {		try{			//System.out.println("Assert : Verify if the OK response was retrieved" + "\n");			org.junit.Assert.assertEquals(expected,actual);			System.out.println("Assertion Passed : Expected = " + expected + ", Actual = " + actual + "\n");	    }	    catch (AssertionError e){	    	System.out.println("Assertion Failed : Expected = " + expected + ", Actual = " + actual + "\n");	    	throw e;	    }	}		protected final void launchSFDC(String url) {		// Assumes a browser window is already open		open(url);		// Deal with possible certificate error by clicking (occurs often after		// we open a partner portal)		// We can't do it using normal WebDriver calls, because WebDriver just		// cannot see the link!		// NOTE that the AutoIT process we use to do this will sometimes open a		// new browser. I don't		// know why, but I have observed that it occurs only in the cases where		// we don't encounter		// the certificate error. So we sill attempt to determine whether the		// certificate error is		// present by looking for the login button.		createPages();		if (!sfdcPage.isFieldPresent("loginButton")) {			Util.printDebug("Handling possible web certificate error...");			int exitCode = commonPage.clickLinkInIE(EISConstants.TEST_BASE_PATH					+ EISConstants.CLICK_LINK_IN_IE_PROCESS, url,					AmazonRentalConstants.CONTINUE_TO_WEBSITE_LINK_TEXT);			if (exitCode != EISConstants.PROCESS_EXIT_CODE_SUCCESS) {				Util.printWarning("Error when clicking link on web certificate error page: "						+ exitCode);			}			Util.printDebug("Handled possible web certificate error");		}		// Will have to do this every time we open a new window or pop-up,		// because the locators are generated on the fly in WebDriver		mainWindow.setLocator(driver.getWindowHandle());		// Save the URL used to launch Salesforce, as sometimes the user wants		// to use it as a base for		// navigating to another URL, perhaps one that refers to an object ID		windowMaximize();	}			protected String loginSFDC(String userName, String password) {				mainWindow.select();		sfdcPage.populateField("userName", userName);		sfdcPage.populateField("password", password);		sfdcPage.clickToSubmit("loginButton");		handleServerMaintenanceNotification();		// Deal with possible pop-ups, such as Reminders		Util.sleep(50);		if (sfdcPage.closeAllPopUps(mainWindow.getLocator())) {			disableReminders();		}		mainWindow.select();		currentUser = userName;		return currentUser;	}		final String logoutAsSFDCUser(String userName) {				String currentUserSave = userName;			mainWindow.select();			sfdcPage.click("logoutLink");			Util.printInfo("Logged out the SFDC user '" + currentUserSave);				return getCurrentUser();	}			}