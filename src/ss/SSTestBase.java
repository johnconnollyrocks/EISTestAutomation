package ss;import common.Case;import common.EISTestBase;import common.Page_;import common.TestProperties;import common.Util;import common.Case.CaseType;import common.Case.CreateFrom;import ss.SSConstants;import ss.SSConstants.AfterCreateCaseOperation;/** * Representation of features and functionality specific to the Sales & Support application. *  * @author Jeffrey Blaze * @version 1.0.0 */public class SSTestBase extends EISTestBase {	private static final String APP_NAME		= "Sales & Support";	private static final String APP_BASE_DIR	= "ss";    //TODO  We need to figure out what is an auto user, do they use users on the setup page,    //  do they log in as an auto user and then as a partner user, etc.	private String ssUser = "";		//Define only SS-specific windows.  SFDC-scope windows (such as mainWindow) are static	//  objects in the EISTestBase class		//Define SS-specific Page objects that have no associated test properties. The pages	//  defined here are those that:	//    will never be referenced in a test properties file, AND	//    contain SS-specific GUI elements	//Note that if a test DOES need to specify test properties for one of these pages	//  (e.g., search terms), it can create its own local version of the page, and pass	//  the pagePropertiesFilenameKey argument	/**	 * Default constructor.  It calls the superclass constructor, passing the application's name and directory in the framework's source code hierarchy.	 */	SSTestBase() {		//TODO  Change to get APP_BASE_DIR from properties? (currently passed in as JVM arg)	    super(APP_NAME, APP_BASE_DIR);	    setup();    }	SSTestBase(String launchDriver) {		//TODO  Change to get APP_BASE_DIR from properties? (currently passed in as JVM arg)		 super(APP_NAME, APP_BASE_DIR,launchDriver);	    setup();    }	/**	 * Gets the Sales & Support user name. (NOTE that it is not yet clear what constitutes an SS user,	 * a partner user, an admin user, etc.)	 * @return The Sales & Support user name	 */    final String getSSUser() {		return ssUser;	}	@Override	public String toString() {		return getAppName() + " ["				+ "super=             " + super.toString() 				+ ", ssUser=      " + ssUser				+ "]";	}    	/**	 * Configures high-level SS-specific objects.	 * @see #doSetup()	 */    @Override	protected final void setup() {    	super.setup();    	doSetup();    }    /**	 * Configures high-level SS-specific objects&#58;<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates SS-specific Page objects<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates SS-specific Window objects	 * @see #createAppWindows()	 * @see #createAppPages()	 */    private final void doSetup() {    	setEnvironmentVariables();    	    	createAppWindows();    	    	createAppPages();    	//MUST be called after super.setup!!!    	//NOTE that SSUser is the equivalent of a user that is found in the setup screen.    	//    The user that logs in to the app is known as the auto user.  Until we figure out    	//    whether that model applies, don't call this.    	//setSSUser();    }    	/**	 * Instantiates SS-specific Window objects.	 */    @Override	protected final void createAppWindows() {    	//Instantiate only SS-specific windows.  SFDC-scope windows (such as mainWindow) are static    	//  objects in the EISTestBase class    }	/**	 * Instantiates SS-specific Page objects.	 */	private final void createAppPages() {		//Instantiate Page objects that have no associated test properties		//Note that if a test DOES need to specify test properties for one of these pages		//  (e.g., search terms), it can create its own local version of the page, and pass		//  the pagePropertiesFilenameKey argument, OR create it here, by calling createPage		//  instead of createStaticPage		//Can also instantiate regular (i.e., with associated test properties) SS-specific		//  Page objects here, but typically it is best for the test or utility methods to do that;		//  if we do it here we may end up creating Page objects that never get used.    }		/**	 * Creates an SFDC Case object by executing a workflow, using data in the specified TestProperties object.	 * @param createFrom an enumerated value that specifies which interface to use when creating the SFDC Case object	 * @param caseType an enumerated value that specifies the type of SFDC Case object to create	 * @param utilProperties a TestProperties object containing all data necessary to create an SFDC Case object	 * @return A Case object representing a created SFDC Case	 * @see Case#create(SSConstants.CreateFrom createFrom, SSConstants.CaseType caseType)	 * @see SSConstants.CreateFrom	 * @see SSConstants.CaseType	 */	final Case utilCreateCase(CreateFrom createFrom, CaseType caseType, TestProperties utilProperties) {    	Case supportCase = utilCreateCaseObject(createFrom, utilProperties);    	supportCase.create(createFrom, caseType);       	       	return supportCase;    }    	final Case utilCreateCase(CreateFrom createFrom, CaseType caseType, AfterCreateCaseOperation afterCreateCaseOperation, TestProperties utilProperties) {    	Case supportCase = utilCreateCaseObject(createFrom, afterCreateCaseOperation, utilProperties);    	supportCase.create(createFrom, caseType);       	       	return supportCase;    }		/**	 * Creates an SFDC Case object by executing a workflow, using data in the specified TestProperties object.	 * @param createFrom an enumerated value that specifies which interface to use when creating the SFDC Case object	 * @param caseType an enumerated value that specifies the type of SFDC Case object to create	 * @param utilPropertiesFilenameKey the key used for looking up the test properties file in the test manifest	 * @return A Case object representing a created SFDC Case	 * @see SSConstants.CreateFrom	 * @see SSConstants.CaseType	 */	final Case utilCreateCase(CreateFrom createFrom, CaseType caseType, String utilPropertiesFilenameKey) {    	TestProperties utilProperties = new TestProperties(getTestPropertiesFilename(utilPropertiesFilenameKey), getTestDataDir(), getTestManifest());       	return utilCreateCase(createFrom, caseType, utilProperties);    }    	/**	 * Creates an SFDC Case object by executing a workflow, using data in the default TestProperties object.	 * @param createFrom an enumerated value that specifies which interface to use when creating the SFDC Case object	 * @param caseType an enumerated value that specifies the type of SFDC Case object to create	 * @return A Case object representing a created SFDC Case	 * @see SSConstants.CreateFrom	 * @see SSConstants.CaseType	 */	final Case utilCreateCase(CreateFrom createFrom, CaseType caseType) {       	return utilCreateCase(createFrom, caseType, testProperties);    }		final Case utilCreateCase(CreateFrom createFrom, CaseType caseType, AfterCreateCaseOperation afterCreateCaseOperation) {       	return utilCreateCase(createFrom, caseType, afterCreateCaseOperation, testProperties);    }	/**	 * Creates an SFDC Case object by executing a workflow, using data in the default TestProperties object.	 * @param caseType an enumerated value that specifies the type of SFDC Case object to create	 * @return A Case object representing a created SFDC Case	 * @see SSConstants.CaseType	 */	final Case utilCreateCase(CaseType caseType) {       	return utilCreateCase(CreateFrom.SFDC_CASES_TAB, caseType, testProperties);    }		/**	 * Instantiates a Case object, using data in the specified TestProperties object.  Does not execute the workflow	 * to create an SFDC Case.	 * @param createFrom an enumerated value that specifies which interface to use when creating the SFDC Case object	 * @param utilProperties a TestProperties object containing data necessary to create a Case object	 * @return A Case object	 * @see SSConstants.CreateFrom	 */	final Case utilCreateCaseObject(CreateFrom createFrom, TestProperties utilProperties) {		Case supportCase = null;				Page_ createCaseRTPage		= createCommonPageInstance(utilProperties, "PAGE_COMMON_RECORD_TYPE_PROPERTIES_FILE");		//Page_ createCasePage		= createPage(utilProperties, "PAGE_CREATE_CASE_PROPERTIES_FILE");		Page_ createCasePage		= createCommonPageInstance(utilProperties, "PAGE_CREATE_CASE_PROPERTIES_FILE");      	//Page_ viewCasePage		= createPage(utilProperties, "PAGE_VIEW_CASE_PROPERTIES_FILE");      	Page_ viewCasePage			= createCommonPageInstance(utilProperties, "PAGE_VIEW_CASE_PROPERTIES_FILE");      	Page_ viewContactPage		= createCommonPage("PAGE_VIEW_CONTACT_PROPERTIES_FILE");      	      	if ((createFrom.equals(CreateFrom.PC_PORTAL)) || (createFrom.equals(CreateFrom.SC_PORTAL) || (createFrom.equals(CreateFrom.SSP)) ||(createFrom.equals(CreateFrom.PROD_SUPPORT))  )) {    		Page_ commonPortalPage		= createCommonPageInstance(utilProperties, "PAGE_COMMON_PORTAL_PROPERTIES_FILE");    		//Page_ viewCaseInPortalPage= createPage(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");    		Page_ viewCaseInPortalPage	= createCommonPageInstance(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");          	Page_ productPopUpPage		= createPage(utilProperties, "PAGE_PRODUCT_POPUP_PROPERTIES_FILE");           	supportCase = new Case(createCaseRTPage, createCasePage, viewCasePage, viewContactPage, commonPortalPage, viewCaseInPortalPage, productPopUpPage);      	} else {           	supportCase = new Case(createCaseRTPage, createCasePage, viewCasePage, viewContactPage);      	}     	return supportCase;    }		final Case utilCreateCaseObject(CreateFrom createFrom, AfterCreateCaseOperation afterCreateCaseOperation, TestProperties utilProperties) {		Case supportCase = null;				Page_ createCaseRTPage		= createCommonPageInstance(utilProperties, "PAGE_COMMON_RECORD_TYPE_PROPERTIES_FILE");		//Page_ createCasePage		= createPage(utilProperties, "PAGE_CREATE_CASE_PROPERTIES_FILE");		Page_ createCasePage		= createCommonPageInstance(utilProperties, "PAGE_CREATE_CASE_PROPERTIES_FILE");      	//Page_ viewCasePage		= createPage(utilProperties, "PAGE_VIEW_CASE_PROPERTIES_FILE");      	Page_ viewCasePage			= createCommonPageInstance(utilProperties, "PAGE_VIEW_CASE_PROPERTIES_FILE");      	Page_ viewContactPage		= createCommonPage("PAGE_VIEW_CONTACT_PROPERTIES_FILE");      	      	if ((createFrom.equals(CreateFrom.PC_PORTAL)) || (createFrom.equals(CreateFrom.SC_PORTAL))) {      		Page_ commonPortalPage		= createCommonPageInstance(utilProperties, "PAGE_COMMON_PORTAL_PROPERTIES_FILE");      		//Page_ viewCaseInPortalPage= createPage(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");      		Page_ viewCaseInPortalPage	= createCommonPageInstance(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");      		Page_ productPopUpPage		= createPage(utilProperties, "PAGE_PRODUCT_POPUP_PROPERTIES_FILE");           	supportCase = new Case(createCaseRTPage, createCasePage, viewCasePage, viewContactPage, commonPortalPage, viewCaseInPortalPage, productPopUpPage);                	}       	      	if (afterCreateCaseOperation.equals(AfterCreateCaseOperation.CLOSE_CASE)) {    		Page_ commonPortalPage		= createCommonPageInstance(utilProperties, "PAGE_COMMON_PORTAL_PROPERTIES_FILE");          	//Page_ viewCaseInPortalPage= createPage(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");          	Page_ viewCaseInPortalPage	= createCommonPageInstance(utilProperties, "PAGE_VIEW_CASE_IN_PORTAL_PROPERTIES_FILE");          	Page_ productPopUpPage		= createPage(utilProperties, "PAGE_PRODUCT_POPUP_PROPERTIES_FILE");          	//Page_ closeCasePage		= createPage(utilProperties, "PAGE_CLOSE_CASE_PROPERTIES_FILE");	          	Page_ closeCasePage			= createCommonPageInstance(utilProperties, "PAGE_CLOSE_CASE_PROPERTIES_FILE");	           	          	supportCase = new Case(createCaseRTPage, createCasePage, viewCasePage, viewContactPage, commonPortalPage, viewCaseInPortalPage, productPopUpPage, closeCasePage);                	}      	      	      	else {           	supportCase = new Case(createCaseRTPage, createCasePage, viewCasePage, viewContactPage);      	}     	return supportCase;    }	/**	 * Instantiates a Case object, using data in the specified TestProperties object.  Does not execute the workflow	 * to create an SFDC Case.	 * @param createFrom an enumerated value that specifies which interface to use when creating the SFDC Case object	 * @param utilPropertiesFilenameKey the key used for looking up the test properties file in the test manifest	 * @return A Case object	 * @see SSConstants.CreateFrom	 */    final Case utilCreateCaseObject(CreateFrom createFrom, String utilPropertiesFilenameKey) {    	TestProperties utilProperties = new TestProperties(getTestPropertiesFilename(utilPropertiesFilenameKey), getTestDataDir(), getTestManifest());		return utilCreateCaseObject(createFrom, utilProperties);    }	/**	 * Instantiates a Case object, using data in the default TestProperties object.  Does not execute the workflow	 * to create an SFDC Case.	 * @param createFrom an enumerated value that specifies which interface to use when creating the SFDC Case object	 * @return A Case object	 * @see SSConstants.CreateFrom	 */    final Case utilCreateCaseObject(CreateFrom createFrom) {		return utilCreateCaseObject(createFrom, testProperties);    }    	/**	 * Instantiates a Case object, using data in the default TestProperties object.  Does not execute the workflow	 * to create an SFDC Case.	 * @return A Case object	 */    final Case utilCreateCaseObject() {		return utilCreateCaseObject(CreateFrom.SFDC_CASES_TAB, testProperties);    }   	/**	 * Logs in as the automation user, optionally launching Salesforce (default user is SSConstants.AUTO_USERNAME).	 * @param launch the setting that determines whether to launch Salesforce before logging in	 * @return The automation user name	 */    @Override    protected final String loginAsAutoUser(boolean launch) {    	//login(SSConstants.AUTO_USERNAME, SSConstants.AUTO_PASSWORD, launch);    	super.login(getAutoUserName(), getAutoPassword(), launch);    	    	     	chooseApp();		    	return getCurrentUser();    }    	/**	 * Logs in as the automation user, without launching Salesforce.	 * @return The automation user name	 */    final String loginAsAutoUser() {    	return loginAsAutoUser(false);    }    /**	 * Selects the default Sales & Support app from the SFDC app chooser.	 */    @Override    protected final void chooseApp() {    	if(testProperties.getConstant("CASE_TYPE_ENUM").equalsIgnoreCase("DEV")){    	chooseApp(SSConstants.DEFAULT_SS_APP_DEV);    	}    	else{    		chooseApp(SSConstants.DEFAULT_SS_APP_STG);    	}    }        protected CreateFrom getInterfaceType(String createFromConstantName) {    	String createFromString = "";		CreateFrom createFrom = null;				if (!createFromConstantName.trim().equalsIgnoreCase(SSConstants.SS_CREATE_FROM_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.CreateFrom enumerated type is incorrect; it is '" + createFromConstantName + "' but should be '" + SSConstants.SS_CREATE_FROM_ENUM_CONSTANT_NAME + "'");		}				createFromString = testProperties.getConstant(createFromConstantName);				try {			createFrom = CreateFrom.valueOf(createFromString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + createFromConstantName + "' constant ('" + createFromString + "') is not a member of the SSConstants.CreateFrom enumerated type; valid values are: " + Util.valuesOfEnum(CreateFrom.class));		}				return createFrom;    }         protected CaseType getCaseType(String caseTypeConstantName) {    	String caseTypeString = "";		CaseType caseType = null;				if (!caseTypeConstantName.trim().equalsIgnoreCase(SSConstants.SS_CASE_TYPE_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.CaseType enumerated type is incorrect; it is '" + caseTypeConstantName + "' but should be '" + SSConstants.SS_CASE_TYPE_ENUM_CONSTANT_NAME + "'");		}				caseTypeString = testProperties.getConstant(caseTypeConstantName);				try {			caseType = CaseType.valueOf(caseTypeString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + caseTypeConstantName + "' constant ('" + caseTypeString + "') is not a member of the SSConstants.CaseType enumerated type; valid values are: " + Util.valuesOfEnum(CaseType.class));		}				return caseType;    }       protected AfterCreateCaseOperation getCaseOperation(String caseOperationConstantName) {    	String caseOperationString = "";    	AfterCreateCaseOperation afterCreateCaseOperation = null;				if (!caseOperationConstantName.trim().equalsIgnoreCase(SSConstants.SS_CASE_OPERATION_ENUM_CONSTANT_NAME)) {			fail("The name of the constant that stores the name of a member of the SSConstants.AfterCreateCaseOperation enumerated type is incorrect; it is '" + caseOperationConstantName + "' but should be '" + SSConstants.SS_CASE_OPERATION_ENUM_CONSTANT_NAME + "'");		}				caseOperationString = testProperties.getConstant(caseOperationConstantName);				try {			afterCreateCaseOperation = AfterCreateCaseOperation.valueOf(caseOperationString.trim().toUpperCase());		} catch (IllegalArgumentException e) {			fail("The value supplied in the '" + caseOperationConstantName + "' constant ('" + caseOperationString + "') is not a member of the SSConstants.AfterCreateCaseOperation enumerated type; valid values are: " + Util.valuesOfEnum(AfterCreateCaseOperation.class));		}				return afterCreateCaseOperation;    }           final void loginAsPortalUser() {		//It is assumed that a user is logged in and has the SFDC interface open		Page_ viewContactPage = createCommonPage("PAGE_VIEW_CONTACT_PROPERTIES_FILE");		search(testProperties.getConstant("CONTACT_CSN"));				//We search the results on Account CSN to get the contact we want; we don't search on the contact name itself		//  because there are often duplicate names		//NOTE that clickLinkInRelatedListAndWait does not wait anymore		//commonPage.clickLinkInRelatedListAndWait("accountCsnInContactsRelatedList", testProperties.getConstant("ACCOUNT_CSN"), "nameInContactsRelatedList");		commonPage.clickLinkInRelatedList("accountCsnInContactsRelatedList", testProperties.getConstant("ACCOUNT_CSN"), "nameInContactsRelatedList");		viewContactPage.waitForFieldPresent("loginAsPortalUserLink");		    	//We have gotten rid of clickAndWait(String fieldName) calls, so we have to specify    	//  something for which to wait - but what?		//viewContactPage.clickAndWait("loginAsPortalUserLink");		viewContactPage.click("loginAsPortalUserLink");	}    protected void salesforceLoginStage(){    	launchSalesforce("https://test.salesforce.com");		login(SSConstants.AUTO_USERNAME_STG, SSConstants.AUTO_PASSWORD_STG, false);    }    protected void custPortallogin(String userName, String password, boolean launch) {		Page_ portalLandingPage = createCommonPage("PAGE_PORTAL_LANDING_PAGE_PROPERTIES_FILE");		if (launch) {    		launchSalesforce();    	}    	    	mainWindow.select();    	    	loginPage.populateField("username", userName);    	loginPage.populateField("password", password);     	loginPage.click("loginButton");     	portalLandingPage.waitForFieldPresent("privacyPolicy");     	     	handleServerMaintenanceNotification();    	     	//Deal with possible pop-ups, such as Reminders     	Util.sleep(2000);     	if (loginPage.closeAllPopUps(mainWindow.getLocator())) {        	disableReminders();     	}    	mainWindow.select();    	    	Util.printInfo("Logged in as the partner user '" + userName + "'");    }    protected void custPortallogin(String userName, String password) {    	custPortallogin(userName, password, false);    }        protected void custPortallogin(boolean launch) {    	custPortallogin(getPartnerUserName(), getPartnerPassword(), launch);    }        protected void custPortallogin() {    	custPortallogin(getPartnerUserName(), getPartnerPassword(), false);    }    protected final void setEnvironmentVariables() {    	switch (getEnvironment().trim().toUpperCase()) {			case "DEV":	{				if (!SSConstants.BASE_URL_DEV.isEmpty()) {					setBaseURL(SSConstants.BASE_URL_DEV);				}								setBasePartnerURL(SSConstants.BASE_PARTNER_URL_DEV);								setAutoUserName(SSConstants.AUTO_USERNAME_DEV);				setAutoPassword(SSConstants.AUTO_PASSWORD_DEV);								setPartnerUserName(SSConstants.PARTNER_USERNAME_DEV);				setPartnerPassword(SSConstants.PARTNER_PASSWORD_DEV);								break;			}			case "STG":			default:	{				if (!SSConstants.BASE_URL_STG.isEmpty()) {					setBaseURL(SSConstants.BASE_URL_STG);				}								setBasePartnerURL(SSConstants.BASE_PARTNER_URL_STG);								setAutoUserName(SSConstants.AUTO_USERNAME_STG);				setAutoPassword(SSConstants.AUTO_PASSWORD_STG);								setPartnerUserName(SSConstants.PARTNER_USERNAME_STG);				setPartnerPassword(SSConstants.PARTNER_PASSWORD_STG);							}     	}    }}