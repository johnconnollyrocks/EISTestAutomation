package bornincloud;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileReader;import java.io.FilenameFilter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.SocketException;import java.security.InvalidKeyException;import java.security.KeyStore;import java.security.NoSuchAlgorithmException;import java.security.SecureRandom;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.Random;import java.util.Scanner;import java.util.TimeZone;import java.util.TreeMap;import java.util.concurrent.TimeUnit;import javax.crypto.Mac;import javax.crypto.spec.SecretKeySpec;import javax.net.ssl.HostnameVerifier;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.KeyManager;import javax.net.ssl.KeyManagerFactory;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSession;import javax.net.ssl.TrustManager;import javax.net.ssl.TrustManagerFactory;import org.apache.commons.codec.binary.Base64;import org.apache.commons.httpclient.HttpStatus;import org.apache.commons.lang.RandomStringUtils;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.methods.HttpPut;import org.apache.http.conn.ClientConnectionManager;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.conn.ssl.StrictHostnameVerifier;import org.apache.http.conn.ssl.X509HostnameVerifier;import org.apache.http.entity.ContentType;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.DefaultHttpClient;import org.codehaus.jackson.map.ObjectMapper;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import org.openqa.selenium.By;import org.openqa.selenium.Capabilities;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.interactions.Mouse;import org.openqa.selenium.remote.CapabilityType;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import org.openqa.selenium.safari.SafariDriver;import org.openqa.selenium.support.events.EventFiringWebDriver;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import org.openqa.selenium.interactions.HasInputDevices;import org.openqa.selenium.internal.Locatable;import common.EISConstants;import common.EISTestBase;import common.Page_;import common.TestProperties;import common.Util;import common.WebDriverListerners;import common.exception.MetadataException;import customerportal.CustomerPortal;import customerportal.CustomerPortalConstants;import flex.messaging.util.URLEncoder;/** * Representation of features and functionality specific to the BornInCloud * application. *  * @author Brijesh Chavda * @version 1.0.0 */@SuppressWarnings("deprecation")public class BornInCloudTestBase extends EISTestBase{	private static final String APP_NAME = "bornincloud";	private static final String APP_BASE_DIR = "bornincloud";//	private static final String APP_BROWSER = System.getProperty("Browser");	/*private static final String APP_BROWSER = "chrome";*/		private static String APP_BROWSER = System.getProperty("appBrowser")==null?"chrome":System.getProperty("appBrowser");		/*private static final String ENVIRONMENT = System.getProperty("Environment");*/	private static final String ENVIRONMENT = System.getProperty("environment");		public static Page_ CatalogPage = null;	public static Page_ homePage = null;	public static Page_ createUserPage = null;	// TODO We need to figure out what is an auto user, do they use users on the	// setup page,	// do they log in as an auto user and then as a partner user, etc.	private String cepUser = "";	private String baseURL = "";	private String portalURL = "";	private String pelicanURL = "";	WebDriver ieDriver=null;	WebDriverWait wait = null;		//TestData testdata = null;				// Define only BornInCloud-specific windows. SFDC-scope windows (such as	// mainWindow) are static	// objects in the EISTestBase class	// Define BornInCloud-specific Page objects that have no associated test	// properties. The pages	// defined here are those that:	// will never be referenced in a test properties file, AND	// contain BornInCloud-specific GUI elements	// Note that if a test DOES need to specify test properties for one of these	// pages	// (e.g., search terms), it can create its own local version of the page,	// and pass	// the pagePropertiesFilenameKey argument//	BornInCloudTestBase(String launchDriver) {//		// TODO Change to get APP_BASE_DIR from properties? (currently passed in//		// as JVM arg)//		super(APP_NAME, APP_BASE_DIR, launchDriver);//		setup();//	}//	public static WebDriver driver = null;	/**	 * Default constructor. It calls the superclass constructor, passing the	 * application's name and directory in the framework's source code	 * hierarchy.	 * @param string2 	 * @param string 	 * 	 * @throws IOException	 */	public BornInCloudTestBase(String browser){		super( APP_NAME,  APP_BASE_DIR, browser,APP_BROWSER);		setup();   	}	public BornInCloudTestBase(String browser, String browerType){		super( APP_NAME,  APP_BASE_DIR, browser,browerType);		setup();   	}	public BornInCloudTestBase(String browser, String browerType,boolean setPreferences,boolean browserProfileExtensions){				super(APP_NAME,  APP_BASE_DIR, browser,browerType,false,true);		setup();   	}	public BornInCloudTestBase() {	}	public BornInCloudTestBase(String testtype, String browser, String appBrowser) throws IOException {		// TODO Change to get APP_BASE_DIR from properties? (currently passed in		// as JVM arg)		super();		setEnvironmentVariables(); 		 		if (testtype.equalsIgnoreCase("Frontend")){			System.setProperty("webdriver.chrome.driver", EISConstants.TEST_BASE_PATH + "chromedriver.exe");    		driver = new ChromeDriver();//    	    driver = new EventFiringWebDriver(event);//    		eventListener = new WebDriverListerners();//    		driver.register(eventListener);    	    		}		else{			//create test properties object for non front end tests			/*s*/			if (sysProps.getProperty("testPropertiesFilenameKey")!=null){								String testPropFileName=sysProps.getProperty("testPropertiesFilenameKey");				super.gettestProperties(testPropFileName);			}					}		//super(APP_NAME, APP_BASE_DIR);		//setup();			}		    /**     * @Description This is mainly used to do the setup for Rest tests which are trying to refer the the test data from properties file     * @param testPropertiesFilenameKey     * @param typeOfTest     */    private void setup(String testPropertiesFilenameKey,String typeOfTest) {    	    	    	    }    public static void initSetup(String testPropertiesFilenameKey,String typeOfTest) {			}		@Override	protected final void setup() {		super.setup();		doSetup();	}	@Override	 protected String getBaseURL() {	    	return this.baseURL;	 }	protected String getPortalURL() {    	return this.portalURL;	}		protected void setPortalURL(String portalURL) {    	this.portalURL=portalURL;	}		public static String getBICDir(){		return APP_BASE_DIR;	}	/**	 * Configures high-level bornincloud-specific objects&#58;<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates CustomerPortal-specific Page objects<br>	 * &nbsp;&nbsp;&nbsp;&nbsp;instantiates CustomerPortal-specific Window	 * objects	 * 	 * @see #createAppWindows()	 * @see #createAppPages()	 */	private final void doSetup() {		setEnvironmentVariables();		createAppWindows();		createAppPages();		// MUST be called after super.setup!!!		// NOTE that CEPUser is the equivalent of a user that is found in the		// setup screen.		// The user that logs in to the app is known as the auto user. Until we		// figure out		// whether that model applies, don't call this.		// setCEPUser();	}			public static String getAppBrowser() {		return APP_BROWSER;	}		public String getPelicanURL() {		return pelicanURL;	}	public void setPelicanURL(String pelicanURL) {		this.pelicanURL = pelicanURL;	}	protected void launchIPP(String url) {		// Assumes a browser window is already open		open(url);	//	setBaseURL(url);		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);		driver.manage().window().maximize();		//String appName = getAppName();		//String currentURL = getCurrentURL();			}	//	public static void open(String url) {    	//		Util.sleep(500);		//		//Changed from driver.get(url) due to inconsistent behaviour////				//		driver.navigate().to(url);//		//		driver.navigate().refresh();//		Util.sleep(5000);//		Util.printInfo("Opened '" + url + "'");		//		//currentURL = url;//	}		protected void setBaseURL(String baseURL) {    	this.baseURL = baseURL;    }		/**	 * @Description compareStrings("expected", "actual");	 * @throws  assertEquals(actual,expected)	 */	public void compareStrings(int actual, int expected) {		try{			//System.out.println("Assert : Verify if the OK response was retrieved" + "\n");			org.junit.Assert.assertEquals(actual,expected);			System.out.println("Assert Passed" + "\n");	    }	    catch (AssertionError e){	    	System.out.println("Assertion Failed : Expected = " + expected + ", Actual = " + actual + "\n");	    	throw e;	    }	}		public void compareObjects(String comment, Object expected , Object actual) {		try{			org.junit.Assert.assertEquals(expected,actual);			System.out.println(comment + ", Assert Passed" + "\n");	    }	    catch (AssertionError e){	    	System.out.println(" Assertion Failed : comment = " + comment + ", Expected = " + expected + ", Actual = " + actual + ", Error: " + e + "\n");	    	throw e;	    }	}		@Deprecated	public void compareStrings(String expected, String actual) {		try{			//System.out.println("Assert : Verify if the OK response was retrieved" + "\n");			org.junit.Assert.assertEquals(expected,actual);			System.out.println("Assert Passed" + "\n");	    }	    catch (AssertionError e){	    	System.out.println("Assertion Failed : Expected = " + expected + ", Actual = " + actual + ", Error:"+ e +"\n");	    	throw e;	    }	}		/**	 * compareStrings("Comment", "expected", "actual");	 */	public void compareStrings(String comment, String expected, String actual) {		try{			org.junit.Assert.assertEquals(expected,actual);			System.out.println(comment + ", Assert Passed" + "\n");	    }	    catch (AssertionError e){	    	System.out.println(" Assertion Failed : comment = " + comment + ", Expected = " + expected + ", Actual = " + actual + ", Error: " + e + "\n");	    	throw e;	    }	}		/**	 * Check if string contains substring	 * containStrings("Comment", "String", "Substring");	 */	public void containStrings(String comment, String string, String subString) {		try{			org.junit.Assert.assertTrue(string.contains(subString));			System.out.println(comment + ", Assert Passed" + "\n");	    }	    catch (AssertionError e){	    	System.out.println(" Assertion Failed : comment = " + comment + ", Expected = " + string + ", Actual = " + subString + ", Error: " + e + "\n");	    	throw e;	    }	}		public void compareMaps(Map<String, String> ActualMap,	Map<String, String> ExpectedMap) {		// TODO Auto-generated method stub		try{			//System.out.println("Assert : Verify if the OK response was retrieved" + "\n");			org.junit.Assert.assertEquals(ActualMap,ExpectedMap);			System.out.println("Assert Passed" + "\n");	    }	    catch (AssertionError e){	    	System.out.println("Assertion Failed : Expected = " + ExpectedMap + ", Actual = " + ActualMap + "\n");	    	throw e;	    }	}	//	public HttpResponse getEntitlement(String url,String userId,String queryParams) throws Exception {//		//		DefaultHttpClient httpClient = setuphttpclient();       ////		System.setProperty("javax.net.ssl.keyStore", path);////		System.setProperty("javax.net.ssl.keyStorePassword", "unittesting");////		System.setProperty("javax.net.ssl.keyStoreType", "pkcs12");		//		HttpGet get = new HttpGet(url + userId + queryParams);		    //	    HttpResponse response = httpClient.execute(get);	    //	    return response;	    //	}	public HttpResponse getEntitlement(HttpClient client, String url,String userId,String queryParams) throws Exception {				HttpGet get = new HttpGet(url + userId + queryParams);		    	    //HttpResponse response = client.execute(get);	    	    int count = 0;	    int maxTries = 3;	    HttpResponse response = null;	    while(true) {	        try {	        	response = client.execute(get);		        	break;	        } catch (SocketException e) {	            // handle exception	            if (++count == maxTries) throw e;	        }	    }	    	    return response;	    	}		/**	 * This method do GET request, verify response status, verify response type	 * Return HttpResponse	 */	public HttpResponse getRequest(Map<String,String> testDataMap, String URL, String userid) throws Exception{		HttpResponse response=null;		int count = 0;		do {	    HttpClient client = getClient(testDataMap.get("mutualAuthCert"), testDataMap.get("mutualAuthPass"));			Thread.sleep(1000);			response = getEntitlement(client, URL, userid, "");			count++;			client.getConnectionManager().shutdown();		} while (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK && count < 10);				compareStrings("Assert : Verify the Status Code", new Integer(response.getStatusLine().getStatusCode()).toString(), new Integer(HttpStatus.SC_OK).toString());		compareStrings("Assert : Verify the Repsonse Format", testDataMap.get("jsonMimetype"), ContentType.getOrDefault(response.getEntity()).getMimeType());		return response;	}		public HttpClient getClient(String cert, String pass) throws Exception {		System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");		System.setProperty("sun.security.ssl.allowLegacyHelloMessages", "false"); 		System.setProperty("https.protocols","TLSv1");		//HttpClient httpClient = setuphttpclient();       //		System.setProperty("javax.net.ssl.keyStore", path);//		System.setProperty("javax.net.ssl.keyStorePassword", "unittesting");//		System.setProperty("javax.net.ssl.keyStoreType", "pkcs12");				//HttpGet get = new HttpGet(url + userId + queryParams);		    	    //HttpResponse response = httpClient.execute(get);	    	    //return httpClient;	    	    	    String path = new java.io.File(".").getCanonicalPath();		path = path.replace("\\build", "");		String pfxLocation = path + "\\src\\bornincloud\\resource\\" + cert;		String javaHome = System.getenv("JAVA_HOME");			HttpClient httpClient = new DefaultHttpClient();			SSLContext ctx = SSLContext.getInstance("SSL");        TrustManager[] trustManagers = getTrustManagers("jks", new FileInputStream(new File(javaHome+"\\jre\\lib\\security\\cacerts")), "changeit");        //KeyManager[] keyManagers = getKeyManagers("pkcs12", new FileInputStream(new File(pfxLocation)), pass);        KeyManager[] keyManagers = getKeyManagers("pkcs12", new FileInputStream(new File(pfxLocation)), pass);        ctx.init(keyManagers, trustManagers, new SecureRandom());               SSLSocketFactory factory = new SSLSocketFactory(ctx, new StrictHostnameVerifier());        ClientConnectionManager manager = httpClient.getConnectionManager();        manager.getSchemeRegistry().register(new Scheme("https", 443, factory));        return httpClient;	}			public DefaultHttpClient getClientNew(String cert, String pass) throws Exception {		DefaultHttpClient DefaultHttpClient = new DefaultHttpClient();				/*if (getEnvironment().equalsIgnoreCase("DEV")){*/			String path = new java.io.File(".").getCanonicalPath();				path = path.replace("\\build", "");				String pfxLocation = path + "\\src\\bornincloud\\resource\\" + cert;				String javaHome = System.getenv("JAVA_HOME");							SSLContext sslContext = SSLContext.getInstance("TLS"); 			HostnameVerifier hostnameVerifier = org.apache.http.conn.ssl.SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;						TrustManager[] trustManagers = getTrustManagers("JKS", new FileInputStream(new File(javaHome+"\\jre\\lib\\security\\cacerts")), "changeit");				KeyManager[] keyManagers = getKeyManagers("PKCS12", new FileInputStream(new File(pfxLocation)), pass);				sslContext.init(keyManagers, trustManagers, new SecureRandom());						SSLSocketFactory factory = new SSLSocketFactory(sslContext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);			factory.setHostnameVerifier((X509HostnameVerifier) hostnameVerifier);			ClientConnectionManager manager = DefaultHttpClient.getConnectionManager();				manager.getSchemeRegistry().register(new Scheme("https", 443, factory));		/*}*/		return DefaultHttpClient;	}			private HttpClient setuphttpclient() throws Exception {		// TODO Auto-generated method stub		String path = new java.io.File(".").getCanonicalPath();		path = path.replace("\\build", "");		String pfxLocation = path + "\\src\\bornincloud\\resource\\" + "unittesting.pfx";		String javaHome = System.getenv("JAVA_HOME");			HttpClient httpClient = new DefaultHttpClient();			SSLContext ctx = SSLContext.getInstance("SSL");        TrustManager[] trustManagers = getTrustManagers("jks", new FileInputStream(new File(javaHome+"\\jre\\lib\\security\\cacerts")), "changeit");        KeyManager[] keyManagers = getKeyManagers("pkcs12", new FileInputStream(new File(pfxLocation)), "unittesting");        ctx.init(keyManagers, trustManagers, new SecureRandom());               SSLSocketFactory factory = new SSLSocketFactory(ctx, new StrictHostnameVerifier());        ClientConnectionManager manager = httpClient.getConnectionManager();        manager.getSchemeRegistry().register(new Scheme("https", 443, factory));        return httpClient;	}	protected static KeyManager[] getKeyManagers(String keyStoreType, InputStream keyStoreFile, String keyStorePassword) throws Exception {	    KeyStore keyStore = KeyStore.getInstance(keyStoreType);	    keyStore.load(keyStoreFile, keyStorePassword.toCharArray());	    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());	    kmf.init(keyStore, keyStorePassword.toCharArray());	    return kmf.getKeyManagers();	}	protected static TrustManager[] getTrustManagers(String trustStoreType, InputStream trustStoreFile, String trustStorePassword) throws Exception {	    KeyStore trustStore = KeyStore.getInstance(trustStoreType);	    trustStore.load(trustStoreFile, trustStorePassword.toCharArray());	    TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());	    tmf.init(trustStore);	    return tmf.getTrustManagers();	}		public HttpResponse createEntitlement(HttpClient client, String url,String userId, String content,String jsonMimeType) throws Exception {				//HttpClient client = new DefaultHttpClient();			HttpPost post = new HttpPost(url + userId);	    	    StringEntity entity = new StringEntity(content);	    post.addHeader("Content-Type", jsonMimeType);	    post.addHeader("Accept-Charset", "UTF-8");	    post.setEntity(entity);	    int count = 0;	    int maxTries = 3;	    HttpResponse response = null;	    while(true) {	        try {	        	response = client.execute(post);		        	break;	        } catch (SocketException e) {	            // handle exception	            if (++count == maxTries) throw e;	        }	    }	    	    //HttpResponse response = client.execute(post);		    	    return response;	}		public HttpResponse updateEntitlement(HttpClient client, String userId,String url,String content,String jsonMimeType) throws Exception {				//HttpClient client = new DefaultHttpClient();			HttpPut put = new HttpPut(url + userId);		put.addHeader("Content-Type", jsonMimeType);		if(!content.equals("")){		    StringEntity entity = new StringEntity(content);		    put.setEntity(entity);		}	    	    int count = 0;	    int maxTries = 3;	    HttpResponse response = null;	    while(true) {	        try {	        	response = client.execute(put);		        	break;	        } catch (SocketException e) {	            // handle exception	            if (++count == maxTries) throw e;	        }	    }	    	    //HttpResponse response = client.execute(put);		    return response;	}		public HttpResponse updateEntitlement(DefaultHttpClient client, String userId,String url,String content,String jsonMimeType) throws Exception {				//HttpClient client = new DefaultHttpClient();			HttpPut put = new HttpPut(url + userId);	    	    StringEntity entity = new StringEntity(content);	    put.addHeader("Content-Type", jsonMimeType);	    put.setEntity(entity);	    	    int count = 0;	    int maxTries = 3;	    HttpResponse response = null;	    while(true) {	        try {	        	response = client.execute(put);		        	break;	        } catch (SocketException e) {	            // handle exception	            if (++count == maxTries) throw e;	        }	    }	    	    //HttpResponse response = client.execute(put);		    return response;	}			public Map<String, String> createEntMap(String jsondata, String userId, String type, String method, String offer) throws IllegalStateException, IOException {		// TODO Auto-generated method stub		ObjectMapper objectMapper = new ObjectMapper();				Map<String,String> EntMap = new HashMap<String,String>();		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");		Calendar c = Calendar.getInstance();		c.setTime(new Date()); // Now use today date.				String startdate = dateFormat.format(cvtToGmt(c.getTime()));		String enddate = null;		if (type == "Actual"){			User user = objectMapper.readValue(jsondata, User.class);			List<Entitlements> EntitlementList = user.getEntitlements();			if (method == "Create" || method == "Get"){								for (int i=0; i<EntitlementList.size(); i++) {					String EntKey = null;					String EntValue = null;					if(offer == "Trial" || offer == "Cancel" || offer == "Enthusiast" || offer == "Student" || offer == "Revoke"){						if (EntitlementList.get(i).getFeatureLicensingModel().equals("OPN#1")){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									EntitlementList.get(i).getOfferingLegalName() + "|" +									EntitlementList.get(i).getEntitlementStartDate().substring(0, 10) + "|" +																	EntitlementList.get(i).getOfferingTemplateId() + "|" +											EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									EntitlementList.get(i).getDateLastModified().substring(0, 10)  + "|" +									EntitlementList.get(i).getactive();								 EntMap.put(EntKey,EntValue);						}						else{							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									EntitlementList.get(i).getOfferingLegalName() + "|" +									EntitlementList.get(i).getEntitlementStartDate().substring(0, 10) + "|" +									EntitlementList.get(i).getEntitlementEndDate().substring(0, 10) + "|" +									EntitlementList.get(i).getOfferingTemplateId() + "|" +											EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									////EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									EntitlementList.get(i).getDateLastModified().substring(0, 10)  + "|" +									EntitlementList.get(i).getactive();							 EntMap.put(EntKey,EntValue);						 }					}					else if (offer == "Rental"){													 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									EntitlementList.get(i).getOfferingLegalName() + "|" +									EntitlementList.get(i).getEntitlementStartDate().substring(0, 10) + "|" +																	EntitlementList.get(i).getOfferingTemplateId() + "|" +											EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									EntitlementList.get(i).getDateLastModified().substring(0, 10)  + "|" +									EntitlementList.get(i).getactive();								 EntMap.put(EntKey,EntValue);							 					}									}			}			else if (method == "Update"){				for (int i=0; i<EntitlementList.size(); i++) {					String EntKey = null;					String EntValue = null;					if (offer == "Rental"){												 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();						 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									EntitlementList.get(i).getOfferingLegalName() + "|" +									EntitlementList.get(i).getEntitlementStartDate().substring(0, 10) + "|" +																			EntitlementList.get(i).getOfferingTemplateId() + "|" +											EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									EntitlementList.get(i).getDateLastModified().substring(0, 10)  + "|" +									EntitlementList.get(i).getactive();						 EntMap.put(EntKey,EntValue);		        												}					else if (offer == "Reactivate"){						if (EntitlementList.get(i).getFeatureLicensingModel().equals("OPN#1")){													}						else{							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +										EntitlementList.get(i).getOfferingLegalName() + "|" +										EntitlementList.get(i).getEntitlementStartDate().substring(0, 10) + "|" +																				EntitlementList.get(i).getOfferingTemplateId() + "|" +												EntitlementList.get(i).getParentFeatureId() + "|" +										EntitlementList.get(i).getFeatureName() + "|" +										//EntitlementList.get(i).getFeatureType() + "|" +										EntitlementList.get(i).getFeatureLicensingModel() + "|" +										EntitlementList.get(i).getDateLastModified().substring(0, 10)  + "|" +										EntitlementList.get(i).getactive();							 EntMap.put(EntKey,EntValue);		        						}						}					else if (offer == "Cancel" || offer == "Revoke"){						if (EntitlementList.get(i).getFeatureLicensingModel().equals("OPN#1")){													}						else{							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +										EntitlementList.get(i).getOfferingLegalName() + "|" +										EntitlementList.get(i).getEntitlementStartDate().substring(0, 10) + "|" +										EntitlementList.get(i).getEntitlementEndDate().substring(0, 10) + "|" +										EntitlementList.get(i).getOfferingTemplateId() + "|" +												EntitlementList.get(i).getParentFeatureId() + "|" +										EntitlementList.get(i).getFeatureName() + "|" +										//EntitlementList.get(i).getFeatureType() + "|" +										EntitlementList.get(i).getFeatureLicensingModel() + "|" +										EntitlementList.get(i).getDateLastModified().substring(0, 10)  + "|" +										EntitlementList.get(i).getactive();							 EntMap.put(EntKey,EntValue);		        						}						}						}			}					}		else if (type == "Expected"){			if (offer == "Trial"){				c.add(Calendar.DATE, 30); // Adding 30 days				enddate = dateFormat.format(cvtToGmt(c.getTime()));			}			else if (offer == "Cancel"){					c.add(Calendar.MONTH, 1);				c.add(Calendar.DATE, 29); // Adding 1 Month & 29 days							enddate = dateFormat.format(cvtToGmt(c.getTime()));						}			else if (offer == "Revoke"){					//c.add(Calendar.MONTH, 1);				//c.add(Calendar.DATE, 29); // Adding 1 Month & 29 days							enddate = dateFormat.format(cvtToGmt(c.getTime()));						}			else if (offer == "Student"){				c.add(Calendar.DATE, 1095);				if (method == "Update"){					c.add(Calendar.DATE,29);				} // Adding 1095 days & remaining 29 days				enddate = dateFormat.format(cvtToGmt(c.getTime()));			}			else if (offer == "Enthusiast"){				c.add(Calendar.DATE, 365);				if (method == "Update"){					c.add(Calendar.DATE, 29); // Adding 365 & remaining 29 days				}				enddate = dateFormat.format(cvtToGmt(c.getTime()));			}			Offering offering = objectMapper.readValue(jsondata, Offering.class);			List<FeatureList> EntitlementList = offering.getFeatureList();			if (method == "Create" || method == "Get"){								for (int i=0; i<EntitlementList.size(); i++) {						String EntKey = null;					String EntValue = null;					if(offer == "Trial" || offer == "Cancel" || offer == "Enthusiast" || offer == "Student"){						if (EntitlementList.get(i).getFeatureAddToEntsTable() && EntitlementList.get(i).getFeatureLicensingModel().equals("OPN#1")){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									EntitlementList.get(i).getFeatureAddToEntsTable();								 EntMap.put(EntKey,EntValue);						}						else if (EntitlementList.get(i).getFeatureAddToEntsTable()){							EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									enddate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									////EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									EntitlementList.get(i).getFeatureAddToEntsTable();								 EntMap.put(EntKey,EntValue);						}					}					else if (offer == "Rental"){						if (EntitlementList.get(i).getFeatureAddToEntsTable()){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									EntitlementList.get(i).getFeatureAddToEntsTable();								 EntMap.put(EntKey,EntValue);						}					}					else if (offer == "Revoke"){						if (EntitlementList.get(i).getFeatureAddToEntsTable()){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									enddate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									"false";							 EntMap.put(EntKey,EntValue);						}					}									}			}						else if (method == "Update"){								for (int i=0; i<EntitlementList.size(); i++) {					String EntKey = null;					String EntValue = null;					if (offer == "Rental"){						if (EntitlementList.get(i).getFeatureAddToEntsTable()){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									EntitlementList.get(i).getFeatureAddToEntsTable();					        EntMap.put(EntKey,EntValue);						}					}						else if (offer == "Reactivate"){						if (EntitlementList.get(i).getFeatureLicensingModel().equals("OPN#1")){													}						else if (EntitlementList.get(i).getFeatureAddToEntsTable()){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									EntitlementList.get(i).getFeatureAddToEntsTable();					        EntMap.put(EntKey,EntValue);						}					}						else if (offer == "Cancel"){						if (EntitlementList.get(i).getFeatureLicensingModel().equals("OPN#1")){													}						else if (EntitlementList.get(i).getFeatureAddToEntsTable()){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									enddate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									EntitlementList.get(i).getFeatureAddToEntsTable();					        EntMap.put(EntKey,EntValue);						}					}					else if (offer == "Revoke"){						if (EntitlementList.get(i).getFeatureLicensingModel().equals("OPN#1")){													}						else if (EntitlementList.get(i).getFeatureAddToEntsTable()){							 EntKey = userId + "|" + EntitlementList.get(i).getFeatureId() + "|" +EntitlementList.get(i).getOfferingId();							 EntValue = EntitlementList.get(i).getOfferingId() + "|" +									offering.getOfferingLegalName() + "|" +									startdate + "|" +									enddate + "|" +									offering.getOfferingTemplate() + "|" +									EntitlementList.get(i).getParentFeatureId() + "|" +									EntitlementList.get(i).getFeatureName() + "|" +									//EntitlementList.get(i).getFeatureType() + "|" +									EntitlementList.get(i).getFeatureLicensingModel() + "|" +									startdate + "|" +									"false";					        EntMap.put(EntKey,EntValue);						}					}				}			}					}				return EntMap;	}		public String findjsonelement(String jsondata) throws IllegalStateException, IOException {		// TODO Auto-generated method stub		ObjectMapper objectMapper = new ObjectMapper();				String contextId = null;					User user = objectMapper.readValue(jsondata, User.class);			List<Entitlements> EntitlementList = user.getEntitlements();			for (int i=0; i<EntitlementList.size(); i++) {				contextId = EntitlementList.get(i).getContextId();				break;			}						return contextId;	}		/**	 * Find and return JSON element.	 * {"ListOfContacts":{"Contact":{"FirstName":"Tee","ContactPaymentProfile":{....	 * example: findJsonOject(actualjsondata, "ListOfContacts,Contact,ContactPaymentProfile")	 */	protected JSONObject findJsonOject(String actualjsondata, String s) throws ParseException{		JSONParser jsonParser = new JSONParser();		JSONObject jsonObject = (JSONObject) jsonParser.parse(actualjsondata);		String[] as = s.split(",");		for(int i=0; i < as.length; i++){			jsonObject = (JSONObject) jsonObject.get(as[i]);		}		return jsonObject;	}		public Map<String, String> parseTestData(String jsondata, String testname) throws IllegalStateException, IOException {		// TODO Auto-generated method stub		ObjectMapper objectMapper = new ObjectMapper();			/*objectMapper.setPropertyNamingStrategy(new testDataNamingStrategy());*/				//ignore few properties as in many tests we are pulling only certain properties for required tests					Map<String,String> TestValues = new HashMap<String,String>();		TestData testdata = objectMapper.readValue(jsondata, TestData.class);				 //testdata = objectMapper.readValue(jsondata, TestData.class);		List<TestParameters> TestParametersList = testdata.getTestParameters();				TestValues.put("url", testdata.getHttpRequest());		//TestValues.put("httpRequest", testdata.getHttpRequest());		TestValues.put("buucRequest", testdata.getBuucRequest());		TestValues.put("jsonMimetype" , testdata.getJsonMimeType());		TestValues.put("mutualAuthCert" , testdata.getMutualAuthCert());		TestValues.put("mutualAuthPass" , testdata.getMutualAuthPass());		TestValues.put("mutualAuthCertBuuc" , testdata.getMutualAuthCertBuuc());		TestValues.put("mutualAuthPassBuuc" , testdata.getMutualAuthPassBuuc());		/*TestValues.put("url_Offering" , testdata.getHttpRequest_Offering());*/		TestValues.put("url_Offering" , testdata.getHttpRequest_Offering());		TestValues.put("ccurl" , testdata.getCcurl());		TestValues.put("ippRequest" , testdata.getIppRequest());				for (int i=0; i<TestParametersList.size(); i++) {			if (TestParametersList.get(i).getTestName().equals(testname)){				TestValues.put("userId", TestParametersList.get(i).getUserId());				TestValues.put("expectedjsondata", TestParametersList.get(i).getExpectedJsonData());				TestValues.put("expectedJsonDataRefund", TestParametersList.get(i).getExpectedJsonDataRefund());				TestValues.put("contextId", TestParametersList.get(i).getContextId());				TestValues.put("content", TestParametersList.get(i).getContent());				TestValues.put("httpUrl", TestParametersList.get(i).getHttpUrl());				TestValues.put("offTable1", TestParametersList.get(i).getOffTable1());				TestValues.put("offTable2", TestParametersList.get(i).getOffTable2());				TestValues.put("ippURL", TestParametersList.get(i).getIppURL());				TestValues.put("emailAddress", TestParametersList.get(i).getEmailAddress());				TestValues.put("offeringId", TestParametersList.get(i).getOfferingId());				TestValues.put("country", TestParametersList.get(i).getCountry());				TestValues.put("lang", TestParametersList.get(i).getLang());				TestValues.put("transactionId", TestParametersList.get(i).getTransactionId());				TestValues.put("contract", TestParametersList.get(i).getContract());				TestValues.put("grantToken", TestParametersList.get(i).getGrantToken());				TestValues.put("subId", TestParametersList.get(i).getSubId());				TestValues.put("tempURL", TestParametersList.get(i).getTempURL());				TestValues.put("templateId", TestParametersList.get(i).getTemplateId());							break;			}					}						return TestValues;	}			public String readJsonFromResponse(HttpResponse response) throws IllegalStateException, IOException {		// TODO Auto-generated method stub						BufferedReader rd = new BufferedReader (new InputStreamReader(response.getEntity().getContent(), "UTF-8"), 8000);	    String line = null;	    String  jsondata = null;	    while ((line = rd.readLine()) != null) {	    		    	//System.out.println("Request Response: "+ "\n" + line);	    	    	jsondata = line;	    }		    return jsondata;	}		public String readJsonFromoffering(String offtable) throws IOException {		// TODO Auto-generated method stub		String path = new java.io.File(".").getCanonicalPath();		path = path.replace("\\build", "");		String fileLocation = null;		if(offtable.equals("Test_Rest_DEV.json") || offtable.equals("Test_Rest_STG.json")){			fileLocation = path + "\\src\\bornincloud\\testdata\\" + offtable;		}		else{			fileLocation = path + "\\src\\bornincloud\\resource\\" + offtable;		}				String offeringjsondata = new Scanner(new File(fileLocation)).useDelimiter("\\Z").next();		return offeringjsondata;	}		public  Date cvtToGmt( Date date ){	    TimeZone tz = TimeZone.getDefault();	    Date ret = new Date( date.getTime() - tz.getRawOffset() );	    // if we are now in DST, back off by the delta.  Note that we are checking the GMT date, this is the KEY.	    if ( tz.inDaylightTime( ret )){	        Date dstDate = new Date( ret.getTime() - tz.getDSTSavings() );	        // check to make sure we have not crossed back into standard time	        // this happens when we are on the cusp of DST (7pm the day before the change for PDT)	        if ( tz.inDaylightTime( dstDate )){	            ret = dstDate;	        }	     }	     return ret;	}		/**	 * Instantiates borninCloud-specific Page objects.	 */	private final void createAppPages() {		// Instantiate Page objects that have no associated test properties		// Note that if a test DOES need to specify test properties for one of		// these pages		// (e.g., search terms), it can create its own local version of the		// page, and pass		// the pagePropertiesFilenameKey argument, OR create it here, by calling		// createPage		// instead of createStaticPage		// Can also instantiate regular (i.e., with associated test properties)		// CustomerPortal-specific		// Page objects here, but typically it is best for the test or utility		// methods to do that;		// if we do it here we may end up creating Page objects that never get		// used.		homePage = createPage(testProperties, "PAGE_HOME_PROPERTIES_FILE", 600);		CatalogPage = createPage(testProperties, "PAGE_CATALOGPAGE_PROPERTIES_FILE", 600);		createUserPage= createPage(testProperties, "PAGE_CREATEUSER_PROPERTIES_FILE", 600);	}	@Override	protected void createAppWindows() {		// TODO Auto-generated method stub			}	@Override	protected void chooseApp() {		// TODO Auto-generated method stub			}	@Override	protected void setEnvironmentVariables() {		// TODO Auto-generated method stub				switch (getEnvironment().trim().toUpperCase()) {		case "DEV": {			if (!BornInCloudConstants.BASE_URL_DEV.isEmpty()) {				setBaseURL(BornInCloudConstants.BASE_URL_DEV);				setPortalURL(BornInCloudConstants.PORTAL_URL_DEV);				setPelicanURL(BornInCloudConstants.PELICANL_URL_DEV);				setPelicanURL(BornInCloudConstants.PELICANL_URL_DEV_SEARCH);			}			setAutoUserName(BornInCloudConstants.AUTO_USERNAME_DEV);			setAutoPassword(BornInCloudConstants.AUTO_PASSWORD_DEV);			break;		}		case "STG":		default: {			if (!BornInCloudConstants.BASE_URL_STG.isEmpty()) {				setBaseURL(BornInCloudConstants.BASE_URL_STG);				setPortalURL(BornInCloudConstants.PORTAL_URL_STG);				setPelicanURL(BornInCloudConstants.PELICANL_URL_STG);			}			/*			 * ArrayList<String> parameterizedJobs =			 * EISTestBase.getParameterizedJobs();			 * Util.printInfo("parameterizedJobs----"+parameterizedJobs.get(0));			 * Util.printInfo("job name----"+jobName);			 * if(parameterizedJobs.contains(jobName)){			 * 			 * Util.printInfo("Inside parameterization----"); ReadExcel excel =			 * new ReadExcel(); List loginDetails; try { loginDetails =			 * excel.readExcel(); setAutoUserName((String) loginDetails.get(0));			 * setAutoPassword((String) loginDetails.get(1)); } catch			 * (IOException e) { // TODO Auto-generated catch block			 * e.printStackTrace(); }			 * 			 * }else{ Util.printInfo("Inside else of parameterization----");			 * setAutoUserName(BornInCloudConstants.AUTO_USERNAME_STG);			 * setAutoPassword(BornInCloudConstants.AUTO_PASSWORD_STG); }			 */			setAutoUserName(BornInCloudConstants.AUTO_USERNAME_STG);			setAutoPassword(BornInCloudConstants.AUTO_PASSWORD_STG);		}		}			}	public String readFileAsString(String fileName) throws IOException {				String path = new java.io.File(".").getCanonicalPath();		path = path.replace("\\build", "");		String fileLocation = path + "\\src\\bornincloud\\resource\\" + fileName;        StringBuffer fileData = new StringBuffer();        BufferedReader reader = new BufferedReader(                new FileReader(fileLocation));        char[] buf = new char[1024];        int numRead=0;        while((numRead=reader.read(buf)) != -1){            String readData = String.valueOf(buf, 0, numRead);            fileData.append(readData);        }        reader.close();        String text=fileData.toString();        String returnText=text.replaceAll("[\n\r]", "").trim();         returnText=returnText.replaceAll(" ", "").trim();        return returnText;    }		public void assertTrueCatchException(String message , boolean expected){		try{			assertTrue(message,expected);		}catch(Exception e){			testStatus=false;			Util.printInfo(message+"--FAILED");		}	}	public void assertEqualsCatchException(String expected , String actual){		try{			assertEquals(expected,actual);		}catch(Exception e){			testStatus=false;			Util.printInfo("Mismatch Between Expected & Actual");		}	}		   protected String getCurrentURL() {	    	return driver.getCurrentUrl();	    }	   	   final BornInCloud utilCreateMyAutodeskPortal() throws Exception {			return utilCreateMyAutodeskPortal(testProperties);	   }	   final BornInCloud utilCreateMyAutodeskPortal(				TestProperties utilProperties) throws Exception {		   BornInCloud customerPortal = utilCreateMyAutodeskPortalObject(utilProperties);			return customerPortal;		}		final BornInCloud utilCreateMyAutodeskPortalObject(				TestProperties utilProperties) {			BornInCloud bornincloud = null;			// Use longer pageRedrawDelay setting for slow pages			Page_ login = createPage(utilProperties, "PAGE_PORTALLOGIN_PROPERTIES_FILE",					600);			Page_ home = createPage(utilProperties, "PAGE_PORTALHOME_PROPERTIES_FILE");			bornincloud = new BornInCloud(login, home);			return bornincloud;		}		public Map<String, String> createCustomerPortalUserID() throws MetadataException, IOException, InterruptedException{			//			List<String> userDetails=new ArrayList<String>();			Map<String, String> userDetails = new TreeMap<String, String>();			String autodeskUserID="UserIDForTesting"+getUniqueString(9);			launchIPP(getPortalURL());			createUserPage.waitForFieldVisible("userID", 10000);							if (getEnvironment().equalsIgnoreCase("DEV")){				if (!createUserPage.checkIfElementExistsInPage("toolTipForHelpLink", 1)){					Process process = null;		//			process=Runtime.getRuntime().exec(System.getProperty("user.dir")+"\\build\\firefoxAutoIT.exe");					String path = new java.io.File(".").getCanonicalPath();					if (!path.contains("build")){						path=path+"\\build";					}					process=Runtime.getRuntime().exec(path+"\\firefoxAutoIT.exe");					//process.waitFor();					Util.sleep(2000);				}			}			String emailId="BICUser"+getUniqueString(10)+"@ssttest.net";			if (!createUserPage.checkIfElementExistsInPage("CreateUser", 10)){				launchIPP(getPortalURL());				if (!createUserPage.checkIfElementExistsInPage("CreateUser", 10)){					EISTestBase.failTest("Create user button not found on customer portal login page");				}			}			createUserPage.click("CreateUser");			createUserPage.populateField("firstName","FirstName"+getUniqueString(5));			createUserPage.populateField("lasttName","LastName"+getUniqueString(5));			createUserPage.populateField("emailID",emailId);			createUserPage.populateField("confirmEmailID",emailId);			createUserPage.populateField("autodeskID",autodeskUserID);			createUserPage.populateField("password","Password1");			createUserPage.populateField("confirmPassword","Password1");			createUserPage.click("confirmEmailNotificationCheckBox");			createUserPage.click("iAgreeCheckBox");			createUserPage.click("createAccountButton");						while (true){				if (createUserPage.checkIfElementExistsInPage("ProductsandServices", 20)){					break;				}else{					Util.sleep(10000);				}			}			String userID=getUserSessionID();			userDetails.put("userID", autodeskUserID);			userDetails.put("sessionID", userID);			assertTrue("User created sucesfully-UserID:"+autodeskUserID+"-SessionID:"+userID,createUserPage.checkIfElementExistsInPage("ProductsandServices", 20));						return userDetails;		}		public String getUserSessionID(){						JavascriptExecutor js;			String userSessionID = null;			js = (JavascriptExecutor) driver;						String userCurrentData = (String) js.executeScript(String.format("return window.sessionStorage.getItem('%s');", "userdata:current"));			String[] temp=userCurrentData.split("\"Id\":\"");			if (temp[1]!=null){				String[] sessionID=temp[1].split("\",\"");				userSessionID=sessionID[0];			}else{				EISTestBase.failTest("Session ID not found for the user. Actual currnt data got: "+ userCurrentData);			}						return userSessionID;		}				public String getGrantToken(){						JavascriptExecutor js;			String grantToken = null;			js = (JavascriptExecutor) driver;						String usergrantTokenData = (String) js.executeScript(String.format("return window.sessionStorage.getItem('%s');", "userdata:grantToken"));									return usergrantTokenData;		}				public String getUniqueString(int lenght) {			return RandomStringUtils.random(lenght, true, true);		}				public void switchDriverToOtherBrowser(String browseType){						driver.quit();			if (browseType.equals("firefox")) {	    		driver = new FirefoxDriver();//	    		driver = new EventFiringWebDriver(event);//	    		eventListener = new WebDriverListerners();//	    		driver.register(eventListener);			    		//wait is required to navigate successfully due to selenium defect	    		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);	    	}	    	else if(browseType.equals("chrome")){		    		System.setProperty("webdriver.chrome.driver", EISConstants.TEST_BASE_PATH + "chromedriver.exe");	    		driver = new ChromeDriver();//	    	    driver = new EventFiringWebDriver(event);//	    		eventListener = new WebDriverListerners();//	    		driver.register(eventListener);	    	}	    	else if(browseType.equals("ie")){		    		System.setProperty("webdriver.ie.driver", EISConstants.TEST_BASE_PATH + "IEDriverServer.exe");	    		DesiredCapabilities capabilities = new DesiredCapabilities();	    		capabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true); 	    			        	driver = new InternetExplorerDriver(capabilities);//	        	driver = new EventFiringWebDriver(event);//	    		eventListener = new WebDriverListerners();//	    		driver.register(eventListener);	    	}else if(browseType.equals("safari")){	    		driver = new SafariDriver();//	    		driver = new EventFiringWebDriver(event);//	    		eventListener = new WebDriverListerners();//	    		driver.register(eventListener);	    		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);	    	}					}			public void portalValidationsForUser(String userName, String password, String expectedUser) throws Exception{						BornInCloud bic = utilCreateMyAutodeskPortal();			loginPage = bic.getLoginPage();			homePage = bic.getHomePage();												bic.login(userName,password);					homePage.waitForElementToDisappear("pageLoadImg", 100000);			homePage.waitForFieldVisible("titleproductservices", 30000);			boolean text = homePage.getValueFromGUI("titleproductservices").contains("PRODUCTS & SERVICES");			EISTestBase.assertTrue("Customer Portal Home Page is Displayed", text);						//Select Product Link			bic.select("productlink");			homePage.waitForFieldVisible("productfusion", 10);			Util.sleep(10000);			//Verify Fusion 360 is Displayed			EISTestBase.assertTrue("Fusion 360 found for the user",homePage.getValueFromGUI("productfusion").contains("Fusion 360"));						//Verify User is Displayed			if (expectedUser.equalsIgnoreCase("Student")){				EISTestBase.assertEquals("Student",homePage.getValueFromGUI("student"));			}else if(expectedUser.equalsIgnoreCase("Enthusiast")){				EISTestBase.assertEquals("Enthusiast",homePage.getValueFromGUI("enthusiast"));			}else if(expectedUser.equalsIgnoreCase("rental")){				assertTrueCatchException("Contract number is displayed on the rental product. Contract: "+homePage.getValueFromGUI("contractNumber"), homePage.checkIfElementExistsInPage("contractNumber", 10));			}						//Verify DownLoad is Displayed					EISTestBase.assertEquals("Download Now",homePage.getValueFromGUI("download"));						//Expand Product Link			homePage.click("viewproductdeatils");			if (!expectedUser.equalsIgnoreCase("rental")){					//Verify End Date is Displayed							assertEqualsCatchException("End Date",homePage.getValueFromGUI("enddate"));					//Verify Expires is Displayed							assertEqualsCatchException("Expires",homePage.getValueFromGUI("expires"));					assertTrueCatchException("Expected date field found. Expected date:"+homePage.getValueFromGUI("expiresDateValue"),homePage.checkIfElementExistsInPage("expires",10));							}else if(expectedUser.equalsIgnoreCase("rental")){					assertTrueCatchException("Contract renewal date message is displayed",homePage.checkIfElementExistsInPage("contractRenewalMsg", 10));					assertTrueCatchException("Auto renewal Message is displayed.",homePage.checkIfElementExistsInPage("autoRenews", 10));					if (homePage.checkIfElementExistsInPage("autoRenews", 10)){						String renewalDate=homePage.getValueFromGUI("renewDate");						if(!renewalDate.isEmpty()){ 							assertTrueCatchException("Auto renewal date is displayed."+renewalDate,true);						}else{							assertTrueCatchException("Auto renewal date is not displayed.",false);						}					}					if (homePage.checkIfElementExistsInPage("cardNumber", 10)){						String cardNumber=homePage.getValueFromGUI("cardNumber");						int length=cardNumber.length();						String regex = "[0-9]+";						String lastFour=cardNumber.substring(length-4, length);						String lastFive=cardNumber.substring(length-5, length);						if(!lastFour.isEmpty() && lastFour.matches(regex) && !lastFive.matches(regex)){							assertTrueCatchException("Only Last four charactes of the card are displayed. card number:****"+lastFour,true);						}else{							assertTrueCatchException("Card number is not displayed as expected.",false);						}					}else{						assertTrueCatchException("Card number is not displayed.",false);					}										assertTrueCatchException("Edit link is displaed.",homePage.checkIfElementExistsInPage("editRenewalLink", 10));;								}						homePage.click("serviceslink");						if (!homePage.checkIfElementExistsInPage("fusionProductInServicesPage", 5)){				assertTrueCatchException("E4 fusion prodcut is not displayed in service page.",true);			}else{				assertTrueCatchException("E4 fusion prodcut is displayed in service page.",false);			}			//Logout			homePage.click("arrow");						homePage.click("signout");					}				public String getclicHash(String uname, String country, String lang) throws Exception {			// TODO Auto-generated method stub			String hash = null;			String usertime = null;			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss'Z'");			Calendar c = Calendar.getInstance();			c.setTime(new Date()); // Now use today date.					String todaydate = dateFormat.format(cvtToGmt(c.getTime()));			usertime = uname+todaydate;			String Hash = URLEncoder.encode(getSHA256Hash(usertime,"i9zo*pzmha(007)!*z|wl2aceo9^helm"));						hash =  "&sig="+ Hash+"&ts="+todaydate;						return hash;		}				public String getSignature(String uname) throws Exception {			// TODO Auto-generated method stub			String hash = null;			String usertime = null;			String Hash = null;			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss'Z'");			Calendar c = Calendar.getInstance();			c.setTime(new Date()); // Now use today date.					String todaydate = dateFormat.format(cvtToGmt(c.getTime()));			usertime = uname+todaydate;			if(getEnvironment().equalsIgnoreCase("dev")){				Hash = URLEncoder.encode(getSHA256Hash(usertime,"b0Ydty{3*K4}T%h2Bs#@>r8*h77XGlHs"));			}			else if (getEnvironment().equalsIgnoreCase("stg"))			{				Hash = URLEncoder.encode(getSHA256Hash(usertime,"#2m}qM)959.^A0T3&B40!TE23]y(*HmP"));			}			else{				Hash = URLEncoder.encode(getSHA256Hash(usertime,"te*3C0eL1DE^x?,D7N.$-c42Zvbh,Y)3"));			}			hash =  Hash+"&grantToken=ABCD"+"&timestamp="+todaydate;						return hash;		}//		public String testGetSHA256Hash() throws Exception {//			String hash = getSHA256Hash("YU5HKQT2BYPN2014-05-23T22:37:17Z","h1p4[pwm79?!83T]*z|sd24OF0d3^@bc");//			//Assert.assertEquals("PJjUTRbZ1tyr5s4dXcvs7ddp/J7+nPqBaWj98WhKnOY=", hash);//			return hash;//		}		public static String getSHA256Hash(String strToHash, String secretKey) {			String hashedStr = "";			try {				SecretKeySpec keySpec = new SecretKeySpec(secretKey.getBytes("UTF-8"),						"HmacSHA256");				Mac mac = Mac.getInstance("HmacSHA256");				mac.init(keySpec);				byte[] rawHmac = mac.doFinal(strToHash.getBytes("UTF-8"));				hashedStr = new String(Base64.encodeBase64(rawHmac));			} catch (NoSuchAlgorithmException nsa) {				//logger.error("Cannot create hash :", nsa);			} catch (InvalidKeyException ie) {				//logger.error("Cannot create hash: ", ie);			} catch (UnsupportedEncodingException ie) {				//logger.error("Cannot create hash: ", ie);			} 			return hashedStr;		}			public void IPPOrderCreate(String userID, String userType) throws Exception{		    Util.sleep(15000);			homePage = createPage(testProperties, "PAGE_HOME_PROPERTIES_FILE", 600);			System.out.println("URL for test: "+driver.getCurrentUrl());						switch (userType){							case "rental":					assertTrue("Choose Your Plan window exists : IPP Redirect works", homePage.checkIfElementExistsInPage("AnnualPlanButton", 10));					homePage.click("AnnualPlanButton");					Util.sleep(20000);				 	homePage.click("enableBuyItButton");					homePage.waitForFieldVisible("BillingAddressText", 10000);					String newURL = getCurrentURL();					String updatedURL = newURL+"&DOTEST=1";					Util.sleep(1000);					open(updatedURL);					Util.sleep(1000);					homePage.populateField("BillingAddressText","test#38, 143th Main, stLawrence Rd.");					homePage.populateField("cityText","QueBec");					homePage.populateField("SelectProvince","California");					homePage.populateField("ZipCodeText","94444");					homePage.check("autoRenewalCheckBox");					Util.sleep(5000);					homePage.click("ContinueEnable");					//Verify Submit order Button is Present					assertTrue("Successfully able to navigate to Submit Order Page ", homePage.checkIfElementExistsInPage("submitOrder", 10));					homePage.click("submitOrder");					assertTrue("Successfully able to submit the order ", homePage.checkIfElementExistsInPage("orderCompleteClose", 10));//					homePage.click("orderCompleteClose");					break;														case "student":					homePage.click("nonCommercialTxt");					homePage.waitForFieldVisible("studentOption", 10000);					assertTrue("Student option found in Non-Commercial user page.", homePage.checkIfElementExistsInPage("studentOption", 10));					homePage.click("studentOption");					homePage.check("iAcceptCheckBox");					homePage.click("submitButtonInNonCommercialPage");					break;				case "enthusiast":					homePage.click("nonCommercialTxt");					homePage.waitForFieldVisible("studentOption", 10000);					assertTrue("Student option found in Non-Commercial user page.", homePage.checkIfElementExistsInPage("studentOption", 10));					homePage.click("enthusiastOption");					homePage.check("iAcceptCheckBox");					homePage.click("submitButtonInNonCommercialPage");					break;									default:EISTestBase.failTest("Please provide proper user type to create order in IPP.");				break;			}	}				public String randomFutureDate(){				//random future date -excluding current year				//SoapUIExampleTest suet = new SoapUIExampleTest();		/*SimpleDateFormat sFormat= new SimpleDateFormat("yyyy-MM-dd");		Date date= new Date();		//get the any next 5 year Random Date		Random myRand= new Random();		//int iYear=myRand.nextInt(1)+1;		int iYear=myRand.nextInt(1);		Random myDay= new Random();		int iDay=myDay.nextInt(30);		Random myMonth= new Random();		int iMonth=myMonth.nextInt(5);		//int iMonth=myMonth.nextInt(1);		Calendar curCal= Calendar.getInstance();		curCal.setTime(date);		curCal.add(Calendar.YEAR, iYear); //starts from 0 being 1year		curCal.add(Calendar.MONTH, iMonth); //starts from 0 being 1year		curCal.add(Calendar.DAY_OF_MONTH, iDay); //starts from 0 being 1year		String newDate=sFormat.format(curCal.getTime());		return newDate;		*/		String newRandmDate="";		//random future date -excluding current year		long beginTime = Timestamp.valueOf("2015-01-01 00:00:00").getTime();	       long endTime = Timestamp.valueOf("2015-12-30 00:00:00").getTime();	      Date dMin = new Date(beginTime);	      Date dMax = new Date(endTime);	      Calendar dispCal = Calendar.getInstance();	      dispCal.setTime(dMin);	       System.out.println("Min Date:"+dispCal.getTime());	       	       dispCal.setTime(dMax);	       System.out.println("Max Date:"+dispCal.getTime());	       SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");	        	        Random_Date rnd = new Random_Date(dMin, dMax);	        newRandmDate = sdf.format(rnd.generate());	      	          System.out.println(" Random Date is = " + newRandmDate);	    		return newRandmDate;				}  	@Override	protected String getEnvironment() {		String testEnv= super.getEnvironment();// to avoid setting the value to default set the env value again here if it doesnt match with test properties		if (!testEnv.equalsIgnoreCase(ENVIRONMENT)){			System.setProperty("environment", ENVIRONMENT);		}		return ENVIRONMENT;	}			public void mouseHover(WebElement element) throws MetadataException{        /*Actions actions = new Actions(driver);                        actions.moveToElement(element).perform();                               actions.perform();        Util.sleep(2000);*/        Locatable hoverTheItem= (Locatable)element;        Mouse mouse= ((HasInputDevices) driver).getMouse();        mouse.mouseMove(hoverTheItem.getCoordinates());                 Util.sleep(2000);   }			public String getHarFileToRead(File harFileToRead) {		String harFileAbsPath=null;		File[] myHarFiles=harFileToRead.listFiles(new FilenameFilter() {			@Override			public boolean accept(File harFileToRead, String harFileExtn) {								return harFileExtn.endsWith(".har");			}		});		for(File myHarfile:myHarFiles){			//read the each har file and pull the one has name containing 'customer'			if(myHarfile.getName().startsWith("customer")){				harFileAbsPath= myHarfile.getAbsolutePath();			}		}		return harFileAbsPath;	}	protected void launchPelican(String url){		open(url);		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);		driver.manage().window().maximize();	}		public void portalValidationsForBICUser(String userName, String password, String expectedUser) throws Exception{				BornInCloud bic = utilCreateMyAutodeskPortal();		loginPage = bic.getLoginPage();		homePage = bic.getHomePage();							launchIPP(getPortalURL());		loginPage.waitForFieldVisible("userID", 50);		bic.login(userName,password);				homePage.waitForElementToDisappear("pageLoadImg", 100000);		homePage.waitForFieldVisible("titleproductservices", 30000);		boolean text = homePage.getValueFromGUI("titleproductservices").contains("PRODUCTS & SERVICES");		EISTestBase.assertTrue("Customer Portal Home Page is Displayed", text);				//Select Product Link		bic.select("productlink");		homePage.waitForFieldVisible("productfusion", 10);		Util.sleep(10000);		//Verify Fusion 360 Pro is Displayed		switch (expectedUser.toUpperCase()){			case "FUSION":{								EISTestBase.assertTrue("Fusion 360 Pro found for the user",homePage.getValueFromGUI("productfusion").contains("Fusion 360"));				homePage.click("fusion360ProDrawer");				String[] expectedServices=testProperties.getConstant("expectedServices").split(";");				String[] actualServices=homePage.getMultipleTextValuesfromField("servicesForFusion360Pro");				if(expectedServices.length==actualServices.length){					assertTrue("Expected number of services should match actual number of services", true);				}				int foundServices=0;				for(int i=0;i<actualServices.length;i++){					for(int j=0;j<expectedServices.length;j++){						if(actualServices[i].contains(expectedServices[j])){							assertTrue("Expected services found. Expected: "+expectedServices[j],true);							foundServices=foundServices+1;							break;						}					}				}				if (foundServices==actualServices.length){					assertTrue("All expected services are displayed for Fusion 360 Pro",true);				}				break;			}			case "MAYALT":{							}		}				logoutMyAutodeskPortal();	}				public String login_Pelican_Admin()			throws Exception {				String Env = null;		if(getEnvironment().trim().contains("DEV")){			Env="DEV";			System.out.println("UserName in Cp URL:"+BornInCloudConstants.PELICANL_URL_DEV_SEARCH);						launchIPP(BornInCloudConstants.PELICANL_URL_DEV_SEARCH);			Page_ homePage = createPage(testProperties, "PAGE_HOME_PROPERTIES_FILE", 600);			homePage.populateField("PelicanAppFamily", testProperties.getConstant("PelicanAppFamily_DEV"));			homePage.populateField("PelicanUserID", testProperties.getConstant("PelicanUserID_DEV"));			homePage.populateField("PelicanPass",  testProperties.getConstant("PelicanPass_DEV"));		}else if(getEnvironment().trim().contains("STG")){			Env="STG";			System.out.println("UserName in Cp URL:"+BornInCloudConstants.PELICANL_URL_STG_SEARCH);						launchIPP(BornInCloudConstants.PELICANL_URL_STG_SEARCH);			Page_ homePage = createPage(testProperties, "PAGE_HOME_PROPERTIES_FILE", 600);			homePage.populateField("PelicanAppFamily", testProperties.getConstant("PelicanAppFamily_STG"));			homePage.populateField("PelicanUserID", testProperties.getConstant("PelicanUserID_STG"));			homePage.populateField("PelicanPass",  testProperties.getConstant("PelicanPass_STG"));		}		else{			EISTestBase.fail("Please check the Platform");		}							 Util.sleep(1000);		 homePage.click("PelicanSubmit");		 Util.sleep(2000);					 if(driver.findElement(By.xpath(".//*[@id='bd']/h1")).isDisplayed()){				 Util.printInfo("Logged into Pelican Portal successfully.");			 }else {				 throw new Exception("**** Unable to login to Pelican Dev Portal : Environment :"+getEnvironment()+" please increase time out");			 }				return Env;	}				public String PelicanExpireSubscription(String Env){		 String res=null;		 //Select the Radio Button on Find Subscription page		 homePage.click("PUExtKey");		 homePage.populateField("PUID", testProperties.getConstant("PelicanExternalkey"+"_"+Env));		 homePage.click("PFindSubmit");		 //Subscription Results Page		 if(driver.findElement(By.xpath(".//*[@id='bd']/h1")).isDisplayed()){			 res ="Logged into Pelican Portal successfully.";		 }else {			 EISTestBase.fail("Log into to Pelican is Unsuccessfull");		 }		 		  WebElement result = driver.findElement(By.xpath(".//*[@id='find-results']//div/p"));		  		  String Tcount= result.getText().trim();		  		   if(Tcount.contains("Showing 1-")){			 String PSkip= (String) Tcount.toString().subSequence(16, 18);						 homePage.populateField("PSkipIndex", PSkip.trim());			 homePage.click("PSkipButton");			 Util.sleep(3000);		List<WebElement> Status= driver.findElements(By.xpath(".//*[@id='find-results']//td[4]"));						   for(WebElement Active :Status ){				   				   if(Active.getText().equalsIgnoreCase("Active")){					   					   String Url=driver.getCurrentUrl();				   Active.click();				   WebDriverWait wb=new WebDriverWait(driver,180);					wb.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(".//*[@id='bd']/h1")));					homePage.click("SubscriptionCancel");					wb.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='cancel-action-form']/span/button")));					homePage.click("CancelImdradio");					homePage.click("CancelConfirm");					open(Url);			   }			  			   }					  }else {			  res ="There are no Active Subscriptions";		  }		  return   Util.PrintInfo(res);	}		public String PageRedirectWaitFor(String fieldName){				 String Status = null;		List<String> temp = BornInCloudTestBase.homePage.getFieldLocators(""+fieldName+""); 		for(int i=0;i<temp.size();i++){ 		Util.sleep(2000); 		String Xloc =temp.get(i).trim(); 		 		try{   			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""+Xloc+"")));			Status=""+fieldName+" : Displayed in GUI";		       break; 		} catch (Exception e){  		   e.printStackTrace();  		  Status ="Xpath not found "+Xloc+" for "+fieldName+"field is NOT displayed in GUI";  		    		   if(i==temp.size()-1){ 		   EISTestBase.fail("Valid Xath Not Found for WebElement : \"" +fieldName+ " \"from "+temp+"is NOT displayed in GUI"); 		   } 		    		   } 		 		} 				return Util.PrintInfo(Status);	}			public String verifyButton(String Button){	String Status =null;if(homePage.waitForFieldVisible(Button, 10000)){		Status="Verified "+Button+" button is displayed in GUI";	}else{	Status="Verified "+Button+" button is NOT displayed in GUI";	EISTestBase.fail(Button+"Button is not displayed even after waiting for 60sec");}return Util.PrintInfo(Status);}		public void logoutMyAutodeskPortal() throws Exception {				BornInCloud bic = utilCreateMyAutodeskPortal();		loginPage = bic.getLoginPage();		homePage = bic.getHomePage();		Capabilities capabilities = ((RemoteWebDriver) driver).getCapabilities();		String browserName = capabilities.getBrowserName();		if(!browserName.equalsIgnoreCase("safari") && !browserName.equalsIgnoreCase("ie")) {			//Logout			homePage.click("logout");		}		else{			try { 				driver.manage().deleteAllCookies();				/*String mouseOverScript = "var click_ev = document.createEvent(\"MouseEvents\"); click_ev.initEvent(\"click\", true, true ); document.getElementById(\"logout\").dispatchEvent(click_ev);";*/				String mouseOverScript= "var ele=document.getElementById(\"logout\");var evt= document.createEvent(\"HTMLEvents\");evt.initEvent(\"click\",true,true);ele.dispatchEvent(evt);";				JavascriptExecutor js = (JavascriptExecutor) driver;				js.executeScript(mouseOverScript); 				driver.manage().deleteAllCookies();				Util.sleep(5000);			} catch (Exception e){				e.printStackTrace();			}		}	}}