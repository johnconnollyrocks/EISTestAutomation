package qtpseleniumintegration;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import common.Account;
import common.EISTestBase;
import common.Page_;
import common.Util;


/**
 * Test class - TestCreateNewEndCustomerAccountAndVerifyAccountType
 * 
 * @author Jeffrey Blaze
 * @version 1.0.0
 */
public final class TestCreateNewEndCustomerAccountAndVerifyAccountType extends EpartnerTestBase {
	public TestCreateNewEndCustomerAccountAndVerifyAccountType() {
		super();
	}
	
	@Before
	public void setUp() throws Exception {
		//launchSalesforce(EpartnerConstants.BASE_URL);
		launchSalesforce(getBasePartnerURL());
	}

	@Test
	public void Test_CreateNewEndCustomerAccountAndVerifyAccountType() throws Exception {
		Partner partner = utilCreatePartnerObject();
		Page_ portalLandingPage = partner.getPortalLandingPage();
		
		loginAsEpartnerUser(testProperties.getConstant("PARTNER_USER_NAME"), testProperties.getConstant("PARTNER_PASSWORD"), false);
		partner.setUrl();
		
		
		portalLandingPage.clickAndWait("dealRegACELink", "partnerCenterHome");			
		Account account = utilCreateAccountForOppty();
		
		Partner partner1 = utilCreatePartnerOpportunityObject();
		
		
		String AccName=account.getName();
		Util.printInfo("Autogenerated Account Name is "+AccName);
	//	partner1.createOpportunity();
		partner1.createOpportunityWithNewAccount(AccName);
		
		Page_ viewPartnerOpportunityPage1 = partner1.getViewPartnerOpportunityPage();
		Page_ ViewAccountDetailsPage1 =partner1.getViewAccountDetailsPage();
				
		//NOTES TO OFFSHORE - There is no need to verify this.  In the Partner.createOpportunity method
		//  you scraped it from the GUI.  All we are doing here is verifying that same value.  The value does
		//  not need verifying here, but if the test were to navigate somewhere else (perhaps to the page of
		//  a contact or distributor, etc.) we might want to verify it there
		//viewPartnerOpportunityPage1.setVerificationDataValue("opportunityNumber", partner1.getOpportunityNumber());
		//viewPartnerOpportunityPage1.verifyField("opportunityNumber");
		viewPartnerOpportunityPage1.click("accountName");
		partner1.verifyAddressForOpportunity();
		
		partner1.waitForAccountCSN();
		ViewAccountDetailsPage1.setVerificationDataValue("accountCSN", partner1.getAccountCSN());
		ViewAccountDetailsPage1.verify();
		ViewAccountDetailsPage1.click("optyInAccountDetails");
		partner1.addContactsToOpportunity();
		Util.sleep(2000);
		EISTestBase.switchDriverToFrame(3);
		viewPartnerOpportunityPage1.verifyInstance("AFTER_ADD_CONTACTS");
		mainWindow.select();
		
		//NOTES TO OFFSHORE - the page-scope verify call can check for existence as well
//		viewPartnerOpportunityPage1.verifyFieldExists("isPrimaryInOpportunityContactRoles");		
		
		
		partner1.addDistributorsToOpportunity();
		Util.sleep(2000);
		EISTestBase.switchDriverToFrame(4);
		viewPartnerOpportunityPage1.verifyInstance("AFTER_ADD_DISTS");
		mainWindow.select();
		
		partner1.addProductsToOpportunity();
		
		viewPartnerOpportunityPage1.verifyRelatedListCellInstance("productInproductsRelatedList", 0, "AFTER_ADD_PRODS");
		viewPartnerOpportunityPage1.verifyRelatedListCellInstance("estimatedSeatsInproductsRelatedList", 0, "AFTER_ADD_PRODS");
		viewPartnerOpportunityPage1.verifyRelatedListCellInstance("productTypeInproductsRelatedList", 0, "AFTER_ADD_PRODS");
		viewPartnerOpportunityPage1.verifyRelatedListCellInstance("licenseTypeInproductsRelatedList", 0, "AFTER_ADD_PRODS");		
				
		partner1.registerDealAndConfirm();	
		
		//Srikanth says not to worry about this, because the rules are quite complex
		//String dealStatus = viewPartnerOpportunityPage1.getValueFromGUI("dealStatus");
		//viewPartnerOpportunityPage1.setVerificationDataValue("dealStatus", dealStatus);
		//viewPartnerOpportunityPage1.verifyInstance("AFTER_REGISTER_DEAL");
				
		viewPartnerOpportunityPage1.verify();
						
		partner.open();
		logoutAsEpartnerUser();
	}

	@After
	public void tearDown() throws Exception {
		//Close the browser. Call stop on the WebDriverBackedSelenium instance
		//  instead of calling driver.quit(). Otherwise, the JVM will continue
		//  running after the browser has been closed.
		driver.quit();
		
		//TODO  Figure out how to determine if the test code has failed in a
		//  manner other than by EISTestBase.fail() being called.  Otherwise,
		//  finish() will always print the default passed message to the console.
		finish();
	}
}
